
solar_schmiede-stm-adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000accc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800ae7c  0800ae7c  0000be7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b048  0800b048  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b048  0800b048  0000c048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b050  0800b050  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b050  0800b050  0000c050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b054  0800b054  0000c054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b058  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d068  2**0
                  CONTENTS
 10 .bss          00007514  20000068  20000068  0000d068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000757c  2000757c  0000d068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e981  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043bd  00000000  00000000  0002ba19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  0002fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001400  00000000  00000000  00031780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002746e  00000000  00000000  00032b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d327  00000000  00000000  00059fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2f7b  00000000  00000000  00077315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016a290  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e30  00000000  00000000  0016a2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00171104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ae64 	.word	0x0800ae64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800ae64 	.word	0x0800ae64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b988 	b.w	8000528 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	468e      	mov	lr, r1
 8000238:	4604      	mov	r4, r0
 800023a:	4688      	mov	r8, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d962      	bls.n	800030c <__udivmoddi4+0xdc>
 8000246:	fab2 f682 	clz	r6, r2
 800024a:	b14e      	cbz	r6, 8000260 <__udivmoddi4+0x30>
 800024c:	f1c6 0320 	rsb	r3, r6, #32
 8000250:	fa01 f806 	lsl.w	r8, r1, r6
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	40b7      	lsls	r7, r6
 800025a:	ea43 0808 	orr.w	r8, r3, r8
 800025e:	40b4      	lsls	r4, r6
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f fc87 	uxth.w	ip, r7
 8000268:	fbb8 f1fe 	udiv	r1, r8, lr
 800026c:	0c23      	lsrs	r3, r4, #16
 800026e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000276:	fb01 f20c 	mul.w	r2, r1, ip
 800027a:	429a      	cmp	r2, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x62>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f101 30ff 	add.w	r0, r1, #4294967295
 8000284:	f080 80ea 	bcs.w	800045c <__udivmoddi4+0x22c>
 8000288:	429a      	cmp	r2, r3
 800028a:	f240 80e7 	bls.w	800045c <__udivmoddi4+0x22c>
 800028e:	3902      	subs	r1, #2
 8000290:	443b      	add	r3, r7
 8000292:	1a9a      	subs	r2, r3, r2
 8000294:	b2a3      	uxth	r3, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a6:	459c      	cmp	ip, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x8e>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	f080 80d6 	bcs.w	8000460 <__udivmoddi4+0x230>
 80002b4:	459c      	cmp	ip, r3
 80002b6:	f240 80d3 	bls.w	8000460 <__udivmoddi4+0x230>
 80002ba:	443b      	add	r3, r7
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c2:	eba3 030c 	sub.w	r3, r3, ip
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40f3      	lsrs	r3, r6
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xb6>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb0>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa2>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x14c>
 80002ee:	4573      	cmp	r3, lr
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xc8>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 8105 	bhi.w	8000502 <__udivmoddi4+0x2d2>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4690      	mov	r8, r2
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e5      	beq.n	80002d2 <__udivmoddi4+0xa2>
 8000306:	e9c5 4800 	strd	r4, r8, [r5]
 800030a:	e7e2      	b.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	2a00      	cmp	r2, #0
 800030e:	f000 8090 	beq.w	8000432 <__udivmoddi4+0x202>
 8000312:	fab2 f682 	clz	r6, r2
 8000316:	2e00      	cmp	r6, #0
 8000318:	f040 80a4 	bne.w	8000464 <__udivmoddi4+0x234>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	0c03      	lsrs	r3, r0, #16
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	b280      	uxth	r0, r0
 8000326:	b2bc      	uxth	r4, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb2 fcfe 	udiv	ip, r2, lr
 800032e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000336:	fb04 f20c 	mul.w	r2, r4, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x11e>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x11c>
 8000346:	429a      	cmp	r2, r3
 8000348:	f200 80e0 	bhi.w	800050c <__udivmoddi4+0x2dc>
 800034c:	46c4      	mov	ip, r8
 800034e:	1a9b      	subs	r3, r3, r2
 8000350:	fbb3 f2fe 	udiv	r2, r3, lr
 8000354:	fb0e 3312 	mls	r3, lr, r2, r3
 8000358:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800035c:	fb02 f404 	mul.w	r4, r2, r4
 8000360:	429c      	cmp	r4, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x144>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f102 30ff 	add.w	r0, r2, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x142>
 800036c:	429c      	cmp	r4, r3
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2d6>
 8000372:	4602      	mov	r2, r0
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x98>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa0e f401 	lsl.w	r4, lr, r1
 800038c:	fa20 f306 	lsr.w	r3, r0, r6
 8000390:	fa2e fe06 	lsr.w	lr, lr, r6
 8000394:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	fa1f fc87 	uxth.w	ip, r7
 80003a2:	fbbe f0f9 	udiv	r0, lr, r9
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1a0>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c2:	f080 809c 	bcs.w	80004fe <__udivmoddi4+0x2ce>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f240 8099 	bls.w	80004fe <__udivmoddi4+0x2ce>
 80003cc:	3802      	subs	r0, #2
 80003ce:	443c      	add	r4, r7
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	fa1f fe83 	uxth.w	lr, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1ce>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f2:	f080 8082 	bcs.w	80004fa <__udivmoddi4+0x2ca>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d97f      	bls.n	80004fa <__udivmoddi4+0x2ca>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	fba0 ec02 	umull	lr, ip, r0, r2
 800040a:	4564      	cmp	r4, ip
 800040c:	4673      	mov	r3, lr
 800040e:	46e1      	mov	r9, ip
 8000410:	d362      	bcc.n	80004d8 <__udivmoddi4+0x2a8>
 8000412:	d05f      	beq.n	80004d4 <__udivmoddi4+0x2a4>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x1fe>
 8000416:	ebb8 0203 	subs.w	r2, r8, r3
 800041a:	eb64 0409 	sbc.w	r4, r4, r9
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431e      	orrs	r6, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c5 6400 	strd	r6, r4, [r5]
 800042e:	2100      	movs	r1, #0
 8000430:	e74f      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000432:	fbb1 fcf2 	udiv	ip, r1, r2
 8000436:	0c01      	lsrs	r1, r0, #16
 8000438:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800043c:	b280      	uxth	r0, r0
 800043e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000442:	463b      	mov	r3, r7
 8000444:	4638      	mov	r0, r7
 8000446:	463c      	mov	r4, r7
 8000448:	46b8      	mov	r8, r7
 800044a:	46be      	mov	lr, r7
 800044c:	2620      	movs	r6, #32
 800044e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000452:	eba2 0208 	sub.w	r2, r2, r8
 8000456:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045a:	e766      	b.n	800032a <__udivmoddi4+0xfa>
 800045c:	4601      	mov	r1, r0
 800045e:	e718      	b.n	8000292 <__udivmoddi4+0x62>
 8000460:	4610      	mov	r0, r2
 8000462:	e72c      	b.n	80002be <__udivmoddi4+0x8e>
 8000464:	f1c6 0220 	rsb	r2, r6, #32
 8000468:	fa2e f302 	lsr.w	r3, lr, r2
 800046c:	40b7      	lsls	r7, r6
 800046e:	40b1      	lsls	r1, r6
 8000470:	fa20 f202 	lsr.w	r2, r0, r2
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	430a      	orrs	r2, r1
 800047a:	fbb3 f8fe 	udiv	r8, r3, lr
 800047e:	b2bc      	uxth	r4, r7
 8000480:	fb0e 3318 	mls	r3, lr, r8, r3
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb08 f904 	mul.w	r9, r8, r4
 800048e:	40b0      	lsls	r0, r6
 8000490:	4589      	cmp	r9, r1
 8000492:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000496:	b280      	uxth	r0, r0
 8000498:	d93e      	bls.n	8000518 <__udivmoddi4+0x2e8>
 800049a:	1879      	adds	r1, r7, r1
 800049c:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x276>
 80004a2:	4589      	cmp	r9, r1
 80004a4:	d81f      	bhi.n	80004e6 <__udivmoddi4+0x2b6>
 80004a6:	eba1 0109 	sub.w	r1, r1, r9
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b6:	b292      	uxth	r2, r2
 80004b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004bc:	4542      	cmp	r2, r8
 80004be:	d229      	bcs.n	8000514 <__udivmoddi4+0x2e4>
 80004c0:	18ba      	adds	r2, r7, r2
 80004c2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c6:	d2c4      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004c8:	4542      	cmp	r2, r8
 80004ca:	d2c2      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004cc:	f1a9 0102 	sub.w	r1, r9, #2
 80004d0:	443a      	add	r2, r7
 80004d2:	e7be      	b.n	8000452 <__udivmoddi4+0x222>
 80004d4:	45f0      	cmp	r8, lr
 80004d6:	d29d      	bcs.n	8000414 <__udivmoddi4+0x1e4>
 80004d8:	ebbe 0302 	subs.w	r3, lr, r2
 80004dc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e0:	3801      	subs	r0, #1
 80004e2:	46e1      	mov	r9, ip
 80004e4:	e796      	b.n	8000414 <__udivmoddi4+0x1e4>
 80004e6:	eba7 0909 	sub.w	r9, r7, r9
 80004ea:	4449      	add	r1, r9
 80004ec:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f4:	fb09 f804 	mul.w	r8, r9, r4
 80004f8:	e7db      	b.n	80004b2 <__udivmoddi4+0x282>
 80004fa:	4673      	mov	r3, lr
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1ce>
 80004fe:	4650      	mov	r0, sl
 8000500:	e766      	b.n	80003d0 <__udivmoddi4+0x1a0>
 8000502:	4608      	mov	r0, r1
 8000504:	e6fd      	b.n	8000302 <__udivmoddi4+0xd2>
 8000506:	443b      	add	r3, r7
 8000508:	3a02      	subs	r2, #2
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x144>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	443b      	add	r3, r7
 8000512:	e71c      	b.n	800034e <__udivmoddi4+0x11e>
 8000514:	4649      	mov	r1, r9
 8000516:	e79c      	b.n	8000452 <__udivmoddi4+0x222>
 8000518:	eba1 0109 	sub.w	r1, r1, r9
 800051c:	46c4      	mov	ip, r8
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	e7c4      	b.n	80004b2 <__udivmoddi4+0x282>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <ADS124S08_Init>:
  * @param hspi_handle Pointer to the SPI_HandleTypeDef used for communication.
  * @param nss_port GPIO Port for the software NSS pin.
  * @param nss_pin GPIO Pin for the software NSS pin.
  * @retval None
  */
void ADS124S08_Init(ADS124S08 *adc) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
//    adc->hspi = hspi_handle;
//    adc->nss_port = nss_port;
//    adc->nss_pin = nss_pin;

    // Ensure NSS is high before starting any communication
    ADS124S08_NSS_HIGH(adc);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6858      	ldr	r0, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	891b      	ldrh	r3, [r3, #8]
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	f004 fb86 	bl	8004c50 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Short delay to ensure pin state settles
 8000544:	200a      	movs	r0, #10
 8000546:	f003 f87b 	bl	8003640 <HAL_Delay>

    ADS124S08_Reset(adc);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f81f 	bl	800058e <ADS124S08_Reset>
    HAL_Delay(5);  // Allow time after reset
 8000550:	2005      	movs	r0, #5
 8000552:	f003 f875 	bl	8003640 <HAL_Delay>

    // SYSMON: default sample number = 8 (Register 0x09)
    // Note: The datasheet specifies SYSMON register at address 0x09.
    // The value 0x10 sets the number of samples for internal temperature sensor conversions.
    ADS124S08_WriteRegister(adc, 0x09, 0x10);
 8000556:	2210      	movs	r2, #16
 8000558:	2109      	movs	r1, #9
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f86c 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000560:	2005      	movs	r0, #5
 8000562:	f003 f86d 	bl	8003640 <HAL_Delay>

    // INPMUX: Configure PGA_GAIN (Register 0x03)
    // Assuming 0x00 for gain = 1 (PGA bypassed or gain 1, consult datasheet for specific bits)
    ADS124S08_WriteRegister(adc, 0x03, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2103      	movs	r1, #3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f864 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000570:	2005      	movs	r0, #5
 8000572:	f003 f865 	bl	8003640 <HAL_Delay>
    // 0x1A typically enables internal 2.5V reference and connects negative input to AINN.
    // Ensure this matches your desired reference configuration.
    // Bits [7:6] - VREFCON (reference voltage control)
    // Bit [5]    - REF_EN (reference enable)
    // Bits [4:0] - REFP_DIR, REFN_DIR (reference positive/negative direction)
    ADS124S08_WriteRegister(adc, 0x05, 0x1A);
 8000576:	221a      	movs	r2, #26
 8000578:	2105      	movs	r1, #5
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f85c 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000580:	2005      	movs	r0, #5
 8000582:	f003 f85d 	bl	8003640 <HAL_Delay>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <ADS124S08_Reset>:
/**
  * @brief Sends the RESET command to the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval None
  */
void ADS124S08_Reset(ADS124S08 *adc) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_RESET;
 8000596:	2306      	movs	r3, #6
 8000598:	73fb      	strb	r3, [r7, #15]
    ADS124S08_NSS_LOW(adc); // Activate NSS
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6858      	ldr	r0, [r3, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	891b      	ldrh	r3, [r3, #8]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	f004 fb53 	bl	8004c50 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 80005aa:	2005      	movs	r0, #5
 80005ac:	f003 f848 	bl	8003640 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, HAL_MAX_DELAY);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	f107 010f 	add.w	r1, r7, #15
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	2201      	movs	r2, #1
 80005be:	f005 f89b 	bl	80056f8 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 80005c2:	2005      	movs	r0, #5
 80005c4:	f003 f83c 	bl	8003640 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6858      	ldr	r0, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	891b      	ldrh	r3, [r3, #8]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f004 fb3c 	bl	8004c50 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Small delay after deactivating NSS
 80005d8:	2001      	movs	r0, #1
 80005da:	f003 f831 	bl	8003640 <HAL_Delay>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <ADS124S08_StartConversion>:
/**
  * @brief Sends the START command to the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval None
  */
void ADS124S08_StartConversion(ADS124S08 *adc) {
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_START;
 80005ee:	2308      	movs	r3, #8
 80005f0:	73fb      	strb	r3, [r7, #15]
    ADS124S08_NSS_LOW(adc); // Activate NSS
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6858      	ldr	r0, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	891b      	ldrh	r3, [r3, #8]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f004 fb27 	bl	8004c50 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 8000602:	2005      	movs	r0, #5
 8000604:	f003 f81c 	bl	8003640 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, HAL_MAX_DELAY);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	f107 010f 	add.w	r1, r7, #15
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2201      	movs	r2, #1
 8000616:	f005 f86f 	bl	80056f8 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 800061a:	2005      	movs	r0, #5
 800061c:	f003 f810 	bl	8003640 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6858      	ldr	r0, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	891b      	ldrh	r3, [r3, #8]
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	f004 fb10 	bl	8004c50 <HAL_GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <ADS124S08_WriteRegister>:
  * @param adc Pointer to the ADS124S08 structure.
  * @param reg Register address to write.
  * @param value Value to write to the register.
  * @retval None
  */
void ADS124S08_WriteRegister(ADS124S08 *adc, uint8_t reg, uint8_t value) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
 8000644:	4613      	mov	r3, r2
 8000646:	70bb      	strb	r3, [r7, #2]
    if (reg >= ADS124S08_REG_COUNT) return; // Basic boundary check
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b1f      	cmp	r3, #31
 800064c:	d828      	bhi.n	80006a0 <ADS124S08_WriteRegister+0x68>

    // WREG command format: [WREG | Reg_Address] [Number_of_Registers_to_write - 1] [Value]
    // To write one register, Num_Registers - 1 = 0x00
    uint8_t tx[3] = { ADS_CMD_WREG | reg, 0x00, value };
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000654:	b2db      	uxtb	r3, r3
 8000656:	733b      	strb	r3, [r7, #12]
 8000658:	2300      	movs	r3, #0
 800065a:	737b      	strb	r3, [r7, #13]
 800065c:	78bb      	ldrb	r3, [r7, #2]
 800065e:	73bb      	strb	r3, [r7, #14]

    ADS124S08_NSS_LOW(adc); // Activate NSS
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f004 faf0 	bl	8004c50 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 8000670:	2005      	movs	r0, #5
 8000672:	f002 ffe5 	bl	8003640 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, tx, 3, HAL_MAX_DELAY); // Send command, count byte, and value
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f107 010c 	add.w	r1, r7, #12
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	2203      	movs	r2, #3
 8000684:	f005 f838 	bl	80056f8 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 8000688:	2005      	movs	r0, #5
 800068a:	f002 ffd9 	bl	8003640 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6858      	ldr	r0, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	891b      	ldrh	r3, [r3, #8]
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	f004 fad9 	bl	8004c50 <HAL_GPIO_WritePin>
 800069e:	e000      	b.n	80006a2 <ADS124S08_WriteRegister+0x6a>
    if (reg >= ADS124S08_REG_COUNT) return; // Basic boundary check
 80006a0:	bf00      	nop
}
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <ADS124S08_SetInputChannel>:
  * @param adc Pointer to the ADS124S08 structure.
  * @param pos Positive input channel (AIN0-AIN15, VREF, etc.).
  * @param neg Negative input channel (AIN0-AIN15, VREF, etc.).
  * @retval None
  */
void ADS124S08_SetInputChannel(ADS124S08 *adc, uint8_t pos, uint8_t neg) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
 80006b4:	4613      	mov	r3, r2
 80006b6:	70bb      	strb	r3, [r7, #2]
    if (pos > 15 || neg > 15) return; // Input channels are typically 0-15 (AIN0-AIN15)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b0f      	cmp	r3, #15
 80006bc:	d834      	bhi.n	8000728 <ADS124S08_SetInputChannel+0x80>
 80006be:	78bb      	ldrb	r3, [r7, #2]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d831      	bhi.n	8000728 <ADS124S08_SetInputChannel+0x80>

    uint8_t mux_value = ((pos & 0x0F) << 4) | (neg & 0x0F); // Combine into MUX register format
 80006c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]
    // MUX register address is 0x01 on ADS124S08
    uint8_t tx[3] = {
 80006dc:	2341      	movs	r3, #65	@ 0x41
 80006de:	733b      	strb	r3, [r7, #12]
 80006e0:	2300      	movs	r3, #0
 80006e2:	737b      	strb	r3, [r7, #13]
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	73bb      	strb	r3, [r7, #14]
        ADS_CMD_WREG | 0x01,  // Write to MUX register (0x01)
        0x00,                 // Write 1 register (count - 1)
        mux_value             // The actual MUX register value
    };

    ADS124S08_NSS_LOW(adc); // Activate NSS
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6858      	ldr	r0, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	891b      	ldrh	r3, [r3, #8]
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	f004 faac 	bl	8004c50 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 80006f8:	2005      	movs	r0, #5
 80006fa:	f002 ffa1 	bl	8003640 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, tx, sizeof(tx), HAL_MAX_DELAY);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 010c 	add.w	r1, r7, #12
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	2203      	movs	r2, #3
 800070c:	f004 fff4 	bl	80056f8 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 8000710:	2005      	movs	r0, #5
 8000712:	f002 ff95 	bl	8003640 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6858      	ldr	r0, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	891b      	ldrh	r3, [r3, #8]
 800071e:	2201      	movs	r2, #1
 8000720:	4619      	mov	r1, r3
 8000722:	f004 fa95 	bl	8004c50 <HAL_GPIO_WritePin>
 8000726:	e000      	b.n	800072a <ADS124S08_SetInputChannel+0x82>
    if (pos > 15 || neg > 15) return; // Input channels are typically 0-15 (AIN0-AIN15)
 8000728:	bf00      	nop
}
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <ADS124S08_ReadData>:
/**
  * @brief Reads the 24-bit conversion data from the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval Signed 32-bit integer representing the conversion result.
  */
uint32_t ADS124S08_ReadData(ADS124S08 *adc) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_RDATA; // Read Data command
 8000738:	2312      	movs	r3, #18
 800073a:	72fb      	strb	r3, [r7, #11]
    uint8_t rx[3] = {0};         // Buffer for 3 data bytes
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2100      	movs	r1, #0
 8000742:	460a      	mov	r2, r1
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	460a      	mov	r2, r1
 8000748:	709a      	strb	r2, [r3, #2]

    ADS124S08_NSS_LOW(adc); // Activate NSS
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6858      	ldr	r0, [r3, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	891b      	ldrh	r3, [r3, #8]
 8000752:	2200      	movs	r2, #0
 8000754:	4619      	mov	r1, r3
 8000756:	f004 fa7b 	bl	8004c50 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 800075a:	2005      	movs	r0, #5
 800075c:	f002 ff70 	bl	8003640 <HAL_Delay>
//    osDelay(5);
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, 100); // Send RDATA command
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	f107 010b 	add.w	r1, r7, #11
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	2201      	movs	r2, #1
 800076c:	f004 ffc4 	bl	80056f8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(adc->hspi, rx, 3, 200);    // Receive 3 data bytes
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	f107 0108 	add.w	r1, r7, #8
 8000778:	23c8      	movs	r3, #200	@ 0xc8
 800077a:	2203      	movs	r2, #3
 800077c:	f005 f900 	bl	8005980 <HAL_SPI_Receive>
    HAL_Delay(5); // Delay after transmit/receive and before deactivating NSS
 8000780:	2005      	movs	r0, #5
 8000782:	f002 ff5d 	bl	8003640 <HAL_Delay>
//    osDelay(5);
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6858      	ldr	r0, [r3, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	891b      	ldrh	r3, [r3, #8]
 800078e:	2201      	movs	r2, #1
 8000790:	4619      	mov	r1, r3
 8000792:	f004 fa5d 	bl	8004c50 <HAL_GPIO_WritePin>

    // Reconstruct 24-bit value into a 32-bit signed integer
    uint32_t value = (rx[0] << 16) | (rx[1] << 8) | rx[2];
 8000796:	7a3b      	ldrb	r3, [r7, #8]
 8000798:	041a      	lsls	r2, r3, #16
 800079a:	7a7b      	ldrb	r3, [r7, #9]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	4313      	orrs	r3, r2
 80007a0:	7aba      	ldrb	r2, [r7, #10]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
    // Check for negative 24-bit value and sign-extend to 32 bits
//    if (value & 0x800000) { // If the 24th bit (MSB of 24-bit data) is set
//        value |= 0xFF000000; // Sign-extend by filling upper bits with 1s
//    }

    return value;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <getWaitTime>:
static uint8_t myAddr = 0xFF; // Unassigned
static bool downstreamDetected = false;
static volatile bool spi_finished = 0;


static uint32_t getWaitTime(uint8_t prevNodes) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	return prevNodes * MIN_WAIT_TIME_PER_NODE;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2232      	movs	r2, #50	@ 0x32
 80007be:	fb02 f303 	mul.w	r3, r2, r3
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <handleADCDataRequest>:

static void handleADCDataRequest() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0c0      	sub	sp, #256	@ 0x100
 80007d4:	af00      	add	r7, sp, #0
	// Create packet with ADC data
	Packet p = { 
 80007d6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80007da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007de:	4618      	mov	r0, r3
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	461a      	mov	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f00a fa5a 	bl	800aca0 <memset>
 80007ec:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <handleADCDataRequest+0xd4>)
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80007f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007f8:	705a      	strb	r2, [r3, #1]
 80007fa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80007fe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000802:	2205      	movs	r2, #5
 8000804:	711a      	strb	r2, [r3, #4]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 8000806:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800080a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000818:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	0049      	lsls	r1, r1, #1
 8000822:	440b      	add	r3, r1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4413      	add	r3, r2
 8000828:	b2da      	uxtb	r2, r3
 800082a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800082e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000832:	785b      	ldrb	r3, [r3, #1]
 8000834:	4619      	mov	r1, r3
 8000836:	0089      	lsls	r1, r1, #2
 8000838:	440b      	add	r3, r1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4413      	add	r3, r2
 800083e:	b2da      	uxtb	r2, r3
 8000840:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000844:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000848:	70da      	strb	r2, [r3, #3]
	
	// Set request type
	p.requestDataPack.requestDataType = RQP_TYPE_ADC_READINGS;
 800084a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800084e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000852:	2201      	movs	r2, #1
 8000854:	715a      	strb	r2, [r3, #5]

	// Safely acquire mutex with timeout
	if(osMutexAcquire(adcBufReadMutexHandle, 10) == osOK) {
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <handleADCDataRequest+0xd8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	210a      	movs	r1, #10
 800085c:	4618      	mov	r0, r3
 800085e:	f006 fe3f 	bl	80074e0 <osMutexAcquire>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <handleADCDataRequest+0xb0>
		// Copy ADC readings to packet
		memcpy(p.requestDataPack.data, adcReadings, ADC_READINGS_SIZE);
 8000868:	463b      	mov	r3, r7
 800086a:	3307      	adds	r3, #7
 800086c:	2218      	movs	r2, #24
 800086e:	490f      	ldr	r1, [pc, #60]	@ (80008ac <handleADCDataRequest+0xdc>)
 8000870:	4618      	mov	r0, r3
 8000872:	f00a fa9f 	bl	800adb4 <memcpy>
		osMutexRelease(adcBufReadMutexHandle);
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <handleADCDataRequest+0xd8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f006 fe7b 	bl	8007576 <osMutexRelease>
	}

	// Set data size
	p.requestDataPack.dataSize = ADC_READINGS_SIZE;
 8000880:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000884:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000888:	2218      	movs	r2, #24
 800088a:	719a      	strb	r2, [r3, #6]

	// Transmit with increased timeout to ensure completion
	HAL_SPI_Transmit(&slave, (uint8_t*)&p, PACKET_MAX_SIZE, 200);
 800088c:	4639      	mov	r1, r7
 800088e:	23c8      	movs	r3, #200	@ 0xc8
 8000890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000894:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <handleADCDataRequest+0xe0>)
 8000896:	f004 ff2f 	bl	80056f8 <HAL_SPI_Transmit>
}
 800089a:	bf00      	nop
 800089c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000006 	.word	0x20000006
 80008a8:	200029ac 	.word	0x200029ac
 80008ac:	200029b4 	.word	0x200029b4
 80008b0:	20000084 	.word	0x20000084

080008b4 <handleExternalADCDataRequest>:

static void handleExternalADCDataRequest() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0c0      	sub	sp, #256	@ 0x100
 80008b8:	af00      	add	r7, sp, #0
	// Create packet with external ADC data
	Packet p = { 
 80008ba:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008c2:	4618      	mov	r0, r3
 80008c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008c8:	461a      	mov	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f00a f9e8 	bl	800aca0 <memset>
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <handleExternalADCDataRequest+0xb8>)
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008dc:	705a      	strb	r2, [r3, #1]
 80008de:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008e2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008e6:	2205      	movs	r2, #5
 80008e8:	711a      	strb	r2, [r3, #4]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 80008ea:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	0049      	lsls	r1, r1, #1
 8000906:	440b      	add	r3, r1
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000912:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	4619      	mov	r1, r3
 800091a:	0089      	lsls	r1, r1, #2
 800091c:	440b      	add	r3, r1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4413      	add	r3, r2
 8000922:	b2da      	uxtb	r2, r3
 8000924:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000928:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800092c:	70da      	strb	r2, [r3, #3]
	
	// Set request type
	p.requestDataPack.requestDataType = RQP_TYPE_EXT_ADC_READINGS;
 800092e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000932:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000936:	2211      	movs	r2, #17
 8000938:	715a      	strb	r2, [r3, #5]

	// Copy external ADC readings to packet
	// No mutex needed as this is accessed only from one task
	memcpy(p.requestDataPack.data, externalADCReadings, EXT_ADC_READINGS_SIZE);
 800093a:	463b      	mov	r3, r7
 800093c:	3307      	adds	r3, #7
 800093e:	2216      	movs	r2, #22
 8000940:	490b      	ldr	r1, [pc, #44]	@ (8000970 <handleExternalADCDataRequest+0xbc>)
 8000942:	4618      	mov	r0, r3
 8000944:	f00a fa36 	bl	800adb4 <memcpy>

	// Set data size
	p.requestDataPack.dataSize = EXT_ADC_READINGS_SIZE;
 8000948:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800094c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000950:	2216      	movs	r2, #22
 8000952:	719a      	strb	r2, [r3, #6]

	// Transmit with increased timeout to ensure completion
	HAL_SPI_Transmit(&slave, (uint8_t*)&p, PACKET_MAX_SIZE, 200);
 8000954:	4639      	mov	r1, r7
 8000956:	23c8      	movs	r3, #200	@ 0xc8
 8000958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <handleExternalADCDataRequest+0xc0>)
 800095e:	f004 fecb 	bl	80056f8 <HAL_SPI_Transmit>
}
 8000962:	bf00      	nop
 8000964:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000006 	.word	0x20000006
 8000970:	200029cc 	.word	0x200029cc
 8000974:	20000084 	.word	0x20000084

08000978 <handleSayHiRequest>:

static void handleSayHiRequest() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b0c2      	sub	sp, #264	@ 0x108
 800097c:	af00      	add	r7, sp, #0
	// Create packet for "Say Hi" response
	Packet hi = { 
 800097e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000986:	4618      	mov	r0, r3
 8000988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098c:	461a      	mov	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f00a f986 	bl	800aca0 <memset>
 8000994:	4b2e      	ldr	r3, [pc, #184]	@ (8000a50 <handleSayHiRequest+0xd8>)
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800099c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009a0:	705a      	strb	r2, [r3, #1]
 80009a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009aa:	2205      	movs	r2, #5
 80009ac:	711a      	strb	r2, [r3, #4]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	hi.header.crc = hi.header.packetType * 2 + hi.header.targetAddr * 3 + hi.header.srcAddr * 5;
 80009ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4619      	mov	r1, r3
 80009c8:	0049      	lsls	r1, r1, #1
 80009ca:	440b      	add	r3, r1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4413      	add	r3, r2
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	4619      	mov	r1, r3
 80009de:	0089      	lsls	r1, r1, #2
 80009e0:	440b      	add	r3, r1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009f0:	70da      	strb	r2, [r3, #3]
	
	// Set request type
	hi.requestDataPack.requestDataType = RQP_TYPE_SAY_HI;
 80009f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009fa:	2203      	movs	r2, #3
 80009fc:	715a      	strb	r2, [r3, #5]

	// Message to send
	const char *msg = "Solar Schmiede STM Adapter v1.0";
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <handleSayHiRequest+0xdc>)
 8000a00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	size_t dataLen = strlen(msg) + 1;
 8000a04:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8000a08:	f7ff fbf2 	bl	80001f0 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	3301      	adds	r3, #1
 8000a10:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	
	// Copy message to packet
	memcpy(hi.requestDataPack.data, msg, dataLen);
 8000a14:	463b      	mov	r3, r7
 8000a16:	3307      	adds	r3, #7
 8000a18:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8000a1c:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00a f9c7 	bl	800adb4 <memcpy>

	// Set data size
	hi.requestDataPack.dataSize = dataLen;
 8000a26:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a34:	719a      	strb	r2, [r3, #6]

	// Transmit with increased timeout to ensure completion
	HAL_SPI_Transmit(&slave, (uint8_t*)&hi, PACKET_MAX_SIZE, 200);
 8000a36:	4639      	mov	r1, r7
 8000a38:	23c8      	movs	r3, #200	@ 0xc8
 8000a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <handleSayHiRequest+0xe0>)
 8000a40:	f004 fe5a 	bl	80056f8 <HAL_SPI_Transmit>
}
 8000a44:	bf00      	nop
 8000a46:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000006 	.word	0x20000006
 8000a54:	0800ae7c 	.word	0x0800ae7c
 8000a58:	20000084 	.word	0x20000084

08000a5c <handleUARTDataRequest>:

static void handleUARTDataRequest() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000a62:	af00      	add	r7, sp, #0
    UartPacket packet = { 0 };
 8000a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	23fb      	movs	r3, #251	@ 0xfb
 8000a70:	461a      	mov	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f00a f914 	bl	800aca0 <memset>
    uint32_t msg_count = osMessageQueueGetCount(uartQueueHandle);
 8000a78:	4b8b      	ldr	r3, [pc, #556]	@ (8000ca8 <handleUARTDataRequest+0x24c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f006 ff71 	bl	8007964 <osMessageQueueGetCount>
 8000a82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    
    // If no messages, return immediately with empty packet
    if (msg_count == 0) {
 8000a86:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d15d      	bne.n	8000b4a <handleUARTDataRequest+0xee>
        Packet p = { 
 8000a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000a92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000a96:	4618      	mov	r0, r3
 8000a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f00a f8fe 	bl	800aca0 <memset>
 8000aa4:	4b81      	ldr	r3, [pc, #516]	@ (8000cac <handleUARTDataRequest+0x250>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000aac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ab0:	705a      	strb	r2, [r3, #1]
 8000ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ab6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000aba:	2208      	movs	r2, #8
 8000abc:	709a      	strb	r2, [r3, #2]
 8000abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ac2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	711a      	strb	r2, [r3, #4]
            }, 
            .data = { 0 } 
        };
        
        // Calculate CRC for header
        p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 8000aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ace:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000adc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	0049      	lsls	r1, r1, #1
 8000ae6:	440b      	add	r3, r1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4413      	add	r3, r2
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000af2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	4619      	mov	r1, r3
 8000afa:	0089      	lsls	r1, r1, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4413      	add	r3, r2
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b0c:	70da      	strb	r2, [r3, #3]
        
        p.requestDataPack.requestDataType = RQP_TYPE_UART_DATA;
 8000b0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b16:	2202      	movs	r2, #2
 8000b18:	715a      	strb	r2, [r3, #5]
        p.requestDataPack.dataSize = 0; // No data
 8000b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b22:	2200      	movs	r2, #0
 8000b24:	719a      	strb	r2, [r3, #6]
        p.requestDataPack.data[0] = 0xff; // Indicate no data
 8000b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b2e:	22ff      	movs	r2, #255	@ 0xff
 8000b30:	71da      	strb	r2, [r3, #7]
        
        HAL_SPI_Transmit(&slave, (uint8_t*)&p, p.header.packetSize, 100);
 8000b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b3a:	789b      	ldrb	r3, [r3, #2]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	1d39      	adds	r1, r7, #4
 8000b40:	2364      	movs	r3, #100	@ 0x64
 8000b42:	485b      	ldr	r0, [pc, #364]	@ (8000cb0 <handleUARTDataRequest+0x254>)
 8000b44:	f004 fdd8 	bl	80056f8 <HAL_SPI_Transmit>
 8000b48:	e0aa      	b.n	8000ca0 <handleUARTDataRequest+0x244>
        return;
    }
    
    // Process message from queue
    if (osMessageQueueGet(uartQueueHandle, (void*)&packet, NULL, 0) == osOK) {
 8000b4a:	4b57      	ldr	r3, [pc, #348]	@ (8000ca8 <handleUARTDataRequest+0x24c>)
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8000b52:	2300      	movs	r3, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	f006 fea7 	bl	80078a8 <osMessageQueueGet>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f040 809f 	bne.w	8000ca0 <handleUARTDataRequest+0x244>
        // Determine actual data length - find the stop byte (0x16) if present
        uint16_t data_len = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        for (data_len = 0; data_len < UART_DATA_SIZE; data_len++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
 8000b6e:	e018      	b.n	8000ba2 <handleUARTDataRequest+0x146>
            if (packet.data[data_len] == MBUS_STOP_BYTE && data_len > 5) {
 8000b70:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000b74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8000b78:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b7c:	4413      	add	r3, r2
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	2b16      	cmp	r3, #22
 8000b82:	d109      	bne.n	8000b98 <handleUARTDataRequest+0x13c>
 8000b84:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000b88:	2b05      	cmp	r3, #5
 8000b8a:	d905      	bls.n	8000b98 <handleUARTDataRequest+0x13c>
                // Found stop byte, include it in the packet
                data_len++;
 8000b8c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000b90:	3301      	adds	r3, #1
 8000b92:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
                break;
 8000b96:	e008      	b.n	8000baa <handleUARTDataRequest+0x14e>
        for (data_len = 0; data_len < UART_DATA_SIZE; data_len++) {
 8000b98:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
 8000ba2:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000ba6:	2bf9      	cmp	r3, #249	@ 0xf9
 8000ba8:	d9e2      	bls.n	8000b70 <handleUARTDataRequest+0x114>
            }
        }
        
        // If no stop byte found, use the entire buffer
        if (data_len == UART_DATA_SIZE) {
 8000baa:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000bae:	2bfa      	cmp	r3, #250	@ 0xfa
 8000bb0:	d102      	bne.n	8000bb8 <handleUARTDataRequest+0x15c>
            data_len = UART_DATA_SIZE;
 8000bb2:	23fa      	movs	r3, #250	@ 0xfa
 8000bb4:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        }
        
        // Create packet with appropriate size
        Packet p = { 
 8000bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f00a f869 	bl	800aca0 <memset>
 8000bce:	4b37      	ldr	r3, [pc, #220]	@ (8000cac <handleUARTDataRequest+0x250>)
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bda:	705a      	strb	r2, [r3, #1]
            .header = { 
                .targetAddr = 0, 
                .srcAddr = myAddr, 
                .packetSize = PACKET_HEADER_SIZE + 2 + data_len + 1, // Header + requestType + dataSize + data + uart_id
 8000bdc:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	3308      	adds	r3, #8
 8000be4:	b2da      	uxtb	r2, r3
        Packet p = { 
 8000be6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bee:	709a      	strb	r2, [r3, #2]
 8000bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bf4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bf8:	2205      	movs	r2, #5
 8000bfa:	711a      	strb	r2, [r3, #4]
            }, 
            .data = { 0 } 
        };
        
        // Calculate CRC for header
        p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 8000bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	440b      	add	r3, r1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	0089      	lsls	r1, r1, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c3e:	70da      	strb	r2, [r3, #3]
        
        p.requestDataPack.requestDataType = RQP_TYPE_UART_DATA;
 8000c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c48:	2202      	movs	r2, #2
 8000c4a:	715a      	strb	r2, [r3, #5]
        p.requestDataPack.dataSize = data_len + 1; // Data + UART ID
 8000c4c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c5e:	719a      	strb	r2, [r3, #6]
        
        // Copy UART ID and data
        p.requestDataPack.data[0] = packet.uart_id;
 8000c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c72:	71da      	strb	r2, [r3, #7]
        memcpy(&p.requestDataPack.data[1], packet.data, data_len);
 8000c74:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 8000c78:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000c7c:	1c59      	adds	r1, r3, #1
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	3308      	adds	r3, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00a f896 	bl	800adb4 <memcpy>
        
        // Transmit with higher timeout to ensure completion
        HAL_SPI_Transmit(&slave, (uint8_t*)&p, p.header.packetSize, 500);
 8000c88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c90:	789b      	ldrb	r3, [r3, #2]
 8000c92:	461a      	mov	r2, r3
 8000c94:	1d39      	adds	r1, r7, #4
 8000c96:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <handleUARTDataRequest+0x254>)
 8000c9c:	f004 fd2c 	bl	80056f8 <HAL_SPI_Transmit>
    }
}
 8000ca0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200029a8 	.word	0x200029a8
 8000cac:	20000006 	.word	0x20000006
 8000cb0:	20000084 	.word	0x20000084

08000cb4 <detect_downstream>:

static bool detect_downstream(Packet *response, uint8_t prevNodes) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0c6      	sub	sp, #280	@ 0x118
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cc2:	6018      	str	r0, [r3, #0]
 8000cc4:	460a      	mov	r2, r1
 8000cc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cca:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000cce:	701a      	strb	r2, [r3, #0]
	// Create identification packet
	Packet ident = { 
 8000cd0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f009 ffdd 	bl	800aca0 <memset>
 8000ce6:	22ff      	movs	r2, #255	@ 0xff
 8000ce8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	4b88      	ldr	r3, [pc, #544]	@ (8000f14 <detect_downstream+0x260>)
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cfe:	705a      	strb	r2, [r3, #1]
 8000d00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d08:	2207      	movs	r2, #7
 8000d0a:	709a      	strb	r2, [r3, #2]
 8000d0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d14:	2202      	movs	r2, #2
 8000d16:	711a      	strb	r2, [r3, #4]
			.srcAddr = myAddr 
		} 
	};

	// Calculate CRC for header
	ident.header.crc = ident.header.packetType * 2 + 
 8000d18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d20:	791b      	ldrb	r3, [r3, #4]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	b2da      	uxtb	r2, r3
	                   ident.header.targetAddr * 3 + 
 8000d26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d2e:	781b      	ldrb	r3, [r3, #0]
	ident.header.crc = ident.header.packetType * 2 + 
 8000d30:	4619      	mov	r1, r3
 8000d32:	0049      	lsls	r1, r1, #1
 8000d34:	440b      	add	r3, r1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	b2da      	uxtb	r2, r3
	                   ident.header.srcAddr * 5;
 8000d3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d44:	785b      	ldrb	r3, [r3, #1]
	                   ident.header.targetAddr * 3 + 
 8000d46:	4619      	mov	r1, r3
 8000d48:	0089      	lsls	r1, r1, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b2da      	uxtb	r2, r3
	ident.header.crc = ident.header.packetType * 2 + 
 8000d52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d5a:	70da      	strb	r2, [r3, #3]
	
	// Set identification packet data
	ident.identifyPack.identifiedDevices = 1;
 8000d5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d64:	2201      	movs	r2, #1
 8000d66:	715a      	strb	r2, [r3, #5]
	ident.identifyPack.searchDepth = prevNodes > 0 ? prevNodes - 1 : 0;
 8000d68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d6c:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d007      	beq.n	8000d86 <detect_downstream+0xd2>
 8000d76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d7a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	e000      	b.n	8000d88 <detect_downstream+0xd4>
 8000d86:	2200      	movs	r2, #0
 8000d88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d90:	719a      	strb	r2, [r3, #6]

	// Start byte
	uint8_t byte = PACKET_START_BYTE;
 8000d92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d96:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000d9a:	22aa      	movs	r2, #170	@ 0xaa
 8000d9c:	701a      	strb	r2, [r3, #0]

	// First transmission - send start byte and identification packet
	SPI2_NSS_LOW();
 8000d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8000f18 <detect_downstream+0x264>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a5e      	ldr	r2, [pc, #376]	@ (8000f1c <detect_downstream+0x268>)
 8000da4:	8811      	ldrh	r1, [r2, #0]
 8000da6:	2200      	movs	r2, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 ff51 	bl	8004c50 <HAL_GPIO_WritePin>
	HAL_Delay(2); // Slightly longer delay to ensure stable signal
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fc46 	bl	8003640 <HAL_Delay>
	
	// Send start byte
	if (HAL_SPI_Transmit(&master, &byte, 1, 100) != HAL_OK) {
 8000db4:	f107 010f 	add.w	r1, r7, #15
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4858      	ldr	r0, [pc, #352]	@ (8000f20 <detect_downstream+0x26c>)
 8000dbe:	f004 fc9b 	bl	80056f8 <HAL_SPI_Transmit>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d009      	beq.n	8000ddc <detect_downstream+0x128>
		SPI2_NSS_HIGH();
 8000dc8:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <detect_downstream+0x264>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a53      	ldr	r2, [pc, #332]	@ (8000f1c <detect_downstream+0x268>)
 8000dce:	8811      	ldrh	r1, [r2, #0]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 ff3c 	bl	8004c50 <HAL_GPIO_WritePin>
		return false; // Abort if transmission fails
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e095      	b.n	8000f08 <detect_downstream+0x254>
	}
	
	// Send identification packet
	if (HAL_SPI_Transmit(&master, (uint8_t*)&ident, PACKET_MAX_SIZE, 200) != HAL_OK) {
 8000ddc:	f107 0110 	add.w	r1, r7, #16
 8000de0:	23c8      	movs	r3, #200	@ 0xc8
 8000de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de6:	484e      	ldr	r0, [pc, #312]	@ (8000f20 <detect_downstream+0x26c>)
 8000de8:	f004 fc86 	bl	80056f8 <HAL_SPI_Transmit>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d009      	beq.n	8000e06 <detect_downstream+0x152>
		SPI2_NSS_HIGH();
 8000df2:	4b49      	ldr	r3, [pc, #292]	@ (8000f18 <detect_downstream+0x264>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a49      	ldr	r2, [pc, #292]	@ (8000f1c <detect_downstream+0x268>)
 8000df8:	8811      	ldrh	r1, [r2, #0]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 ff27 	bl	8004c50 <HAL_GPIO_WritePin>
		return false; // Abort if transmission fails
 8000e02:	2300      	movs	r3, #0
 8000e04:	e080      	b.n	8000f08 <detect_downstream+0x254>
	}
	
	// End first transmission
	SPI2_NSS_HIGH();
 8000e06:	4b44      	ldr	r3, [pc, #272]	@ (8000f18 <detect_downstream+0x264>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a44      	ldr	r2, [pc, #272]	@ (8000f1c <detect_downstream+0x268>)
 8000e0c:	8811      	ldrh	r1, [r2, #0]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 ff1d 	bl	8004c50 <HAL_GPIO_WritePin>

	// Wait for downstream nodes to process the packet
	// Use a longer wait time for more reliability
	uint32_t wait_time = getWaitTime(prevNodes) + 50;
 8000e16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e1a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fcc5 	bl	80007b0 <getWaitTime>
 8000e26:	4603      	mov	r3, r0
 8000e28:	3332      	adds	r3, #50	@ 0x32
 8000e2a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	osDelay(wait_time);
 8000e2e:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8000e32:	f006 fab4 	bl	800739e <osDelay>
	
	// Second transmission - receive response
	SPI2_NSS_LOW();
 8000e36:	4b38      	ldr	r3, [pc, #224]	@ (8000f18 <detect_downstream+0x264>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a38      	ldr	r2, [pc, #224]	@ (8000f1c <detect_downstream+0x268>)
 8000e3c:	8811      	ldrh	r1, [r2, #0]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 ff05 	bl	8004c50 <HAL_GPIO_WritePin>
	HAL_Delay(2); // Slightly longer delay to ensure stable signal
 8000e46:	2002      	movs	r0, #2
 8000e48:	f002 fbfa 	bl	8003640 <HAL_Delay>
	
	// Clear response buffer
	memset(response, 0, sizeof(Packet));
 8000e4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e58:	2100      	movs	r1, #0
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	f009 ff20 	bl	800aca0 <memset>
	
	// Receive response with longer timeout
	HAL_StatusTypeDef status = HAL_SPI_Receive(&master, (uint8_t*)response, 
 8000e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000e6a:	f5a2 718a 	sub.w	r1, r2, #276	@ 0x114
 8000e6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e72:	6809      	ldr	r1, [r1, #0]
 8000e74:	482a      	ldr	r0, [pc, #168]	@ (8000f20 <detect_downstream+0x26c>)
 8000e76:	f004 fd83 	bl	8005980 <HAL_SPI_Receive>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	                                           PACKET_MAX_SIZE, wait_time * 2);
	
	// End second transmission
	SPI2_NSS_HIGH();
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <detect_downstream+0x264>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a25      	ldr	r2, [pc, #148]	@ (8000f1c <detect_downstream+0x268>)
 8000e86:	8811      	ldrh	r1, [r2, #0]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fee0 	bl	8004c50 <HAL_GPIO_WritePin>

	// Check if we received a valid acknowledgment
	if (status == HAL_OK && response->header.packetType == PACKET_TYPE_IDENTIFY_ACK) {
 8000e90:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d136      	bne.n	8000f06 <detect_downstream+0x252>
 8000e98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	791b      	ldrb	r3, [r3, #4]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d12e      	bne.n	8000f06 <detect_downstream+0x252>
		// Validate CRC
		uint8_t crc = response->header.packetType * 2 + 
 8000ea8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
		              response->header.targetAddr * 3 + 
 8000eb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ebc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
		uint8_t crc = response->header.packetType * 2 + 
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	0049      	lsls	r1, r1, #1
 8000ec8:	440b      	add	r3, r1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2da      	uxtb	r2, r3
		              response->header.srcAddr * 5;
 8000ed0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ed4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	785b      	ldrb	r3, [r3, #1]
		              response->header.targetAddr * 3 + 
 8000edc:	4619      	mov	r1, r3
 8000ede:	0089      	lsls	r1, r1, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	b2db      	uxtb	r3, r3
		uint8_t crc = response->header.packetType * 2 + 
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
		              
		return (crc == response->header.crc);
 8000eea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	78db      	ldrb	r3, [r3, #3]
 8000ef6:	f897 2112 	ldrb.w	r2, [r7, #274]	@ 0x112
 8000efa:	429a      	cmp	r2, r3
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	e000      	b.n	8000f08 <detect_downstream+0x254>
	}
	
	return false;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000006 	.word	0x20000006
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000004 	.word	0x20000004
 8000f20:	200000dc 	.word	0x200000dc

08000f24 <BusNode_Init>:

void BusNode_Init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	myAddr = 0xFF; // Unassigned
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <BusNode_Init+0x34>)
 8000f2a:	22ff      	movs	r2, #255	@ 0xff
 8000f2c:	701a      	strb	r2, [r3, #0]
	downstreamDetected = false;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <BusNode_Init+0x38>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]

	master = hspi2;
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <BusNode_Init+0x3c>)
 8000f36:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <BusNode_Init+0x40>)
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2358      	movs	r3, #88	@ 0x58
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f009 ff38 	bl	800adb4 <memcpy>
	slave = hspi1;
 8000f44:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <BusNode_Init+0x44>)
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <BusNode_Init+0x48>)
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2358      	movs	r3, #88	@ 0x58
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f009 ff30 	bl	800adb4 <memcpy>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000006 	.word	0x20000006
 8000f5c:	20000134 	.word	0x20000134
 8000f60:	200000dc 	.word	0x200000dc
 8000f64:	200022f4 	.word	0x200022f4
 8000f68:	20000084 	.word	0x20000084
 8000f6c:	2000229c 	.word	0x2000229c

08000f70 <forward_packet>:

static void forward_packet(const Packet *pkt) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0c4      	sub	sp, #272	@ 0x110
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f7e:	6018      	str	r0, [r3, #0]
	// Buffer for response
	Packet response = {0};
 8000f80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2100      	movs	r1, #0
 8000f92:	f009 fe85 	bl	800aca0 <memset>
	
	// Start byte
	uint8_t byte = PACKET_START_BYTE;
 8000f96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f9a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000f9e:	22aa      	movs	r2, #170	@ 0xaa
 8000fa0:	701a      	strb	r2, [r3, #0]
	
	// First transmission - send start byte and packet
	SPI2_NSS_LOW();
 8000fa2:	4b45      	ldr	r3, [pc, #276]	@ (80010b8 <forward_packet+0x148>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a45      	ldr	r2, [pc, #276]	@ (80010bc <forward_packet+0x14c>)
 8000fa8:	8811      	ldrh	r1, [r2, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fe4f 	bl	8004c50 <HAL_GPIO_WritePin>
	HAL_Delay(2); // Slightly longer delay to ensure stable signal
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f002 fb44 	bl	8003640 <HAL_Delay>
	
	// Send start byte
	if (HAL_SPI_Transmit(&master, &byte, 1, 100) != HAL_OK) {
 8000fb8:	f107 010f 	add.w	r1, r7, #15
 8000fbc:	2364      	movs	r3, #100	@ 0x64
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	483f      	ldr	r0, [pc, #252]	@ (80010c0 <forward_packet+0x150>)
 8000fc2:	f004 fb99 	bl	80056f8 <HAL_SPI_Transmit>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d008      	beq.n	8000fde <forward_packet+0x6e>
		SPI2_NSS_HIGH();
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80010b8 <forward_packet+0x148>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80010bc <forward_packet+0x14c>)
 8000fd2:	8811      	ldrh	r1, [r2, #0]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 fe3a 	bl	8004c50 <HAL_GPIO_WritePin>
		return; // Abort if transmission fails
 8000fdc:	e068      	b.n	80010b0 <forward_packet+0x140>
	}
	
	// Send packet
	if (HAL_SPI_Transmit(&master, (uint8_t*)pkt, PACKET_MAX_SIZE, 200) != HAL_OK) {
 8000fde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fe2:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8000fe6:	23c8      	movs	r3, #200	@ 0xc8
 8000fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fec:	6809      	ldr	r1, [r1, #0]
 8000fee:	4834      	ldr	r0, [pc, #208]	@ (80010c0 <forward_packet+0x150>)
 8000ff0:	f004 fb82 	bl	80056f8 <HAL_SPI_Transmit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d008      	beq.n	800100c <forward_packet+0x9c>
		SPI2_NSS_HIGH();
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <forward_packet+0x148>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <forward_packet+0x14c>)
 8001000:	8811      	ldrh	r1, [r2, #0]
 8001002:	2201      	movs	r2, #1
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fe23 	bl	8004c50 <HAL_GPIO_WritePin>
		return; // Abort if transmission fails
 800100a:	e051      	b.n	80010b0 <forward_packet+0x140>
	}
	
	// End first transmission
	SPI2_NSS_HIGH();
 800100c:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <forward_packet+0x148>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2a      	ldr	r2, [pc, #168]	@ (80010bc <forward_packet+0x14c>)
 8001012:	8811      	ldrh	r1, [r2, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fe1a 	bl	8004c50 <HAL_GPIO_WritePin>
	
	// Small delay between transmissions
	HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f002 fb0f 	bl	8003640 <HAL_Delay>
	
	// Second transmission - receive response
	SPI2_NSS_LOW();
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <forward_packet+0x148>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a25      	ldr	r2, [pc, #148]	@ (80010bc <forward_packet+0x14c>)
 8001028:	8811      	ldrh	r1, [r2, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fe0f 	bl	8004c50 <HAL_GPIO_WritePin>
	HAL_Delay(2); // Slightly longer delay to ensure stable signal
 8001032:	2002      	movs	r0, #2
 8001034:	f002 fb04 	bl	8003640 <HAL_Delay>
	
	// Receive response with longer timeout
	HAL_SPI_Receive(&master, (uint8_t*)&response, PACKET_MAX_SIZE, 300);
 8001038:	f107 0110 	add.w	r1, r7, #16
 800103c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001044:	481e      	ldr	r0, [pc, #120]	@ (80010c0 <forward_packet+0x150>)
 8001046:	f004 fc9b 	bl	8005980 <HAL_SPI_Receive>
	
	// End second transmission
	SPI2_NSS_HIGH();
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <forward_packet+0x148>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <forward_packet+0x14c>)
 8001050:	8811      	ldrh	r1, [r2, #0]
 8001052:	2201      	movs	r2, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fdfb 	bl	8004c50 <HAL_GPIO_WritePin>
	
	// Calculate CRC for response header
	response.header.crc = response.header.packetType * 2 + 
 800105a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800105e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b2da      	uxtb	r2, r3
	                      response.header.targetAddr * 3 + 
 8001068:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800106c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001070:	781b      	ldrb	r3, [r3, #0]
	response.header.crc = response.header.packetType * 2 + 
 8001072:	4619      	mov	r1, r3
 8001074:	0049      	lsls	r1, r1, #1
 8001076:	440b      	add	r3, r1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b2da      	uxtb	r2, r3
	                      response.header.srcAddr * 5;
 800107e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001082:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001086:	785b      	ldrb	r3, [r3, #1]
	                      response.header.targetAddr * 3 + 
 8001088:	4619      	mov	r1, r3
 800108a:	0089      	lsls	r1, r1, #2
 800108c:	440b      	add	r3, r1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4413      	add	r3, r2
 8001092:	b2da      	uxtb	r2, r3
	response.header.crc = response.header.packetType * 2 + 
 8001094:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001098:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800109c:	70da      	strb	r2, [r3, #3]
	
	// Forward response back to the slave
	HAL_SPI_Transmit(&slave, (uint8_t*)&response, PACKET_MAX_SIZE, 300);
 800109e:	f107 0110 	add.w	r1, r7, #16
 80010a2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80010a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010aa:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <forward_packet+0x154>)
 80010ac:	f004 fb24 	bl	80056f8 <HAL_SPI_Transmit>
}
 80010b0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000004 	.word	0x20000004
 80010c0:	200000dc 	.word	0x200000dc
 80010c4:	20000084 	.word	0x20000084

080010c8 <BusNode_RunLoop>:
    	spi_finished = 1;
    	osThreadFlagsSet(logTaskHandle, 0x0001);
    }
}

void BusNode_RunLoop(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 80010ce:	af00      	add	r7, sp, #0
    static uint32_t last_uart_check = 0;
    uint32_t current_tick = osKernelGetTickCount();
 80010d0:	f006 f8be 	bl	8007250 <osKernelGetTickCount>
 80010d4:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408
    
    // Check for UART data more frequently (every 2ms)
    // This ensures we prioritize forwarding M-Bus data to ESP32
    if (current_tick - last_uart_check >= 2) {
 80010d8:	4bb8      	ldr	r3, [pc, #736]	@ (80013bc <BusNode_RunLoop+0x2f4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d925      	bls.n	8001132 <BusNode_RunLoop+0x6a>
        last_uart_check = current_tick;
 80010e6:	4ab5      	ldr	r2, [pc, #724]	@ (80013bc <BusNode_RunLoop+0x2f4>)
 80010e8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 80010ec:	6013      	str	r3, [r2, #0]
        
        // If there's data in the UART queue, process it immediately
        uint32_t msg_count = osMessageQueueGetCount(uartQueueHandle);
 80010ee:	4bb4      	ldr	r3, [pc, #720]	@ (80013c0 <BusNode_RunLoop+0x2f8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f006 fc36 	bl	8007964 <osMessageQueueGetCount>
 80010f8:	f8c7 0404 	str.w	r0, [r7, #1028]	@ 0x404
        if (msg_count > 0) {
 80010fc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8001100:	2b00      	cmp	r3, #0
 8001102:	d016      	beq.n	8001132 <BusNode_RunLoop+0x6a>
            // Process all available UART messages (up to 5 at a time to avoid blocking)
            for (uint32_t i = 0; i < msg_count && i < 5; i++) {
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800110a:	e006      	b.n	800111a <BusNode_RunLoop+0x52>
                handleUARTDataRequest();
 800110c:	f7ff fca6 	bl	8000a5c <handleUARTDataRequest>
            for (uint32_t i = 0; i < msg_count && i < 5; i++) {
 8001110:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001114:	3301      	adds	r3, #1
 8001116:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800111a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 800111e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8001122:	429a      	cmp	r2, r3
 8001124:	f080 81b7 	bcs.w	8001496 <BusNode_RunLoop+0x3ce>
 8001128:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800112c:	2b04      	cmp	r3, #4
 800112e:	d9ed      	bls.n	800110c <BusNode_RunLoop+0x44>
            }
            
            // Return early to prioritize UART data processing
            return;
 8001130:	e1b1      	b.n	8001496 <BusNode_RunLoop+0x3ce>
        }
    }

    // Check for SPI commands from master
    uint8_t byte = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3401 	strb.w	r3, [r7, #1025]	@ 0x401
    
    // Non-blocking check for start byte
    if (HAL_SPI_Receive(&slave, &byte, 1, 5) != HAL_OK || byte != PACKET_START_BYTE) {
 8001138:	f207 4101 	addw	r1, r7, #1025	@ 0x401
 800113c:	2305      	movs	r3, #5
 800113e:	2201      	movs	r2, #1
 8001140:	48a0      	ldr	r0, [pc, #640]	@ (80013c4 <BusNode_RunLoop+0x2fc>)
 8001142:	f004 fc1d 	bl	8005980 <HAL_SPI_Receive>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	f040 81a6 	bne.w	800149a <BusNode_RunLoop+0x3d2>
 800114e:	f897 3401 	ldrb.w	r3, [r7, #1025]	@ 0x401
 8001152:	2baa      	cmp	r3, #170	@ 0xaa
 8001154:	f040 81a1 	bne.w	800149a <BusNode_RunLoop+0x3d2>
        return; // No valid start byte, return and try again next time
    }
    
    // We received a start byte, now get the packet header first
    PacketHeader header = {0};
 8001158:	f507 737f 	add.w	r3, r7, #1020	@ 0x3fc
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	711a      	strb	r2, [r3, #4]
    
    if (HAL_SPI_Receive(&slave, (uint8_t*)&header, PACKET_HEADER_SIZE, 50) != HAL_OK) {
 8001162:	f507 717f 	add.w	r1, r7, #1020	@ 0x3fc
 8001166:	2332      	movs	r3, #50	@ 0x32
 8001168:	2205      	movs	r2, #5
 800116a:	4896      	ldr	r0, [pc, #600]	@ (80013c4 <BusNode_RunLoop+0x2fc>)
 800116c:	f004 fc08 	bl	8005980 <HAL_SPI_Receive>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 8193 	bne.w	800149e <BusNode_RunLoop+0x3d6>
        return;
    }
    
    // Validate header
    if (header.packetSize < PACKET_HEADER_SIZE || header.packetSize > PACKET_MAX_SIZE) {
 8001178:	f897 33fe 	ldrb.w	r3, [r7, #1022]	@ 0x3fe
 800117c:	2b04      	cmp	r3, #4
 800117e:	f240 8190 	bls.w	80014a2 <BusNode_RunLoop+0x3da>
        return;
    }
    
    uint8_t crc = header.packetType * 2 + header.targetAddr * 3 + header.srcAddr * 5;
 8001182:	f897 3400 	ldrb.w	r3, [r7, #1024]	@ 0x400
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	f897 33fc 	ldrb.w	r3, [r7, #1020]	@ 0x3fc
 800118e:	4619      	mov	r1, r3
 8001190:	0049      	lsls	r1, r1, #1
 8001192:	440b      	add	r3, r1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4413      	add	r3, r2
 8001198:	b2da      	uxtb	r2, r3
 800119a:	f897 33fd 	ldrb.w	r3, [r7, #1021]	@ 0x3fd
 800119e:	4619      	mov	r1, r3
 80011a0:	0089      	lsls	r1, r1, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	f887 3403 	strb.w	r3, [r7, #1027]	@ 0x403
    if (crc != header.crc) {
 80011ac:	f897 33ff 	ldrb.w	r3, [r7, #1023]	@ 0x3ff
 80011b0:	f897 2403 	ldrb.w	r2, [r7, #1027]	@ 0x403
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8176 	bne.w	80014a6 <BusNode_RunLoop+0x3de>
        return;
    }
    
    // Now receive the rest of the packet based on the size in the header
    uint8_t data_size = header.packetSize - PACKET_HEADER_SIZE;
 80011ba:	f897 33fe 	ldrb.w	r3, [r7, #1022]	@ 0x3fe
 80011be:	3b05      	subs	r3, #5
 80011c0:	f887 3402 	strb.w	r3, [r7, #1026]	@ 0x402
    uint8_t data_buffer[PACKET_DATA_SIZE] = {0};
 80011c4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80011c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80011cc:	4618      	mov	r0, r3
 80011ce:	23fb      	movs	r3, #251	@ 0xfb
 80011d0:	461a      	mov	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f009 fd64 	bl	800aca0 <memset>
    
    if (data_size > 0) {
 80011d8:	f897 3402 	ldrb.w	r3, [r7, #1026]	@ 0x402
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <BusNode_RunLoop+0x132>
        if (HAL_SPI_Receive(&slave, data_buffer, data_size, 100) != HAL_OK) {
 80011e0:	f897 3402 	ldrb.w	r3, [r7, #1026]	@ 0x402
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 80011ea:	2364      	movs	r3, #100	@ 0x64
 80011ec:	4875      	ldr	r0, [pc, #468]	@ (80013c4 <BusNode_RunLoop+0x2fc>)
 80011ee:	f004 fbc7 	bl	8005980 <HAL_SPI_Receive>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f040 8158 	bne.w	80014aa <BusNode_RunLoop+0x3e2>
            return;
        }
    }
    
    // Reconstruct the full packet
    Packet rx = {0};
 80011fa:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80011fe:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001202:	4618      	mov	r0, r3
 8001204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001208:	461a      	mov	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f009 fd48 	bl	800aca0 <memset>
    rx.header = header;
 8001210:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001214:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001218:	f507 727f 	add.w	r2, r7, #1020	@ 0x3fc
 800121c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001220:	6018      	str	r0, [r3, #0]
 8001222:	3304      	adds	r3, #4
 8001224:	7019      	strb	r1, [r3, #0]
    memcpy(rx.data, data_buffer, data_size);
 8001226:	f897 2402 	ldrb.w	r2, [r7, #1026]	@ 0x402
 800122a:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 800122e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001232:	3305      	adds	r3, #5
 8001234:	4618      	mov	r0, r3
 8001236:	f009 fdbd 	bl	800adb4 <memcpy>

    // Handle ASSIGN_ADDR from master (only when unassigned)
    if (rx.header.packetType == PACKET_TYPE_ASSIGN_ADDR && myAddr == 0xFF) {
 800123a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800123e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10b      	bne.n	8001260 <BusNode_RunLoop+0x198>
 8001248:	4b5f      	ldr	r3, [pc, #380]	@ (80013c8 <BusNode_RunLoop+0x300>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2bff      	cmp	r3, #255	@ 0xff
 800124e:	d107      	bne.n	8001260 <BusNode_RunLoop+0x198>
        myAddr = rx.data[0]; // Assigned address from master
 8001250:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001254:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001258:	795a      	ldrb	r2, [r3, #5]
 800125a:	4b5b      	ldr	r3, [pc, #364]	@ (80013c8 <BusNode_RunLoop+0x300>)
 800125c:	701a      	strb	r2, [r3, #0]
        return;
 800125e:	e125      	b.n	80014ac <BusNode_RunLoop+0x3e4>
    }

    // Handle IDENTIFY query
    if (rx.header.packetType == PACKET_TYPE_IDENTIFY && 
 8001260:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001264:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001268:	791b      	ldrb	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	f040 80b0 	bne.w	80013d0 <BusNode_RunLoop+0x308>
        (rx.header.targetAddr == myAddr || rx.header.targetAddr == broadcast)) {
 8001270:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001274:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <BusNode_RunLoop+0x300>)
 800127c:	781b      	ldrb	r3, [r3, #0]
    if (rx.header.packetType == PACKET_TYPE_IDENTIFY && 
 800127e:	429a      	cmp	r2, r3
 8001280:	d008      	beq.n	8001294 <BusNode_RunLoop+0x1cc>
        (rx.header.targetAddr == myAddr || rx.header.targetAddr == broadcast)) {
 8001282:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001286:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	22ff      	movs	r2, #255	@ 0xff
 800128e:	4293      	cmp	r3, r2
 8001290:	f040 809e 	bne.w	80013d0 <BusNode_RunLoop+0x308>
        
        Packet response = {0};
 8001294:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001298:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800129c:	4618      	mov	r0, r3
 800129e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f009 fcfb 	bl	800aca0 <memset>
        Packet ack = {
 80012aa:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012ae:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80012b2:	4618      	mov	r0, r3
 80012b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b8:	461a      	mov	r2, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	f009 fcf0 	bl	800aca0 <memset>
            .header = {
                .targetAddr = rx.header.srcAddr,
 80012c0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012c4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80012c8:	785a      	ldrb	r2, [r3, #1]
        Packet ack = {
 80012ca:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012ce:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <BusNode_RunLoop+0x300>)
 80012d6:	781a      	ldrb	r2, [r3, #0]
 80012d8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012dc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80012e0:	705a      	strb	r2, [r3, #1]
 80012e2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012e6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80012ea:	2207      	movs	r2, #7
 80012ec:	709a      	strb	r2, [r3, #2]
 80012ee:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012f2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80012f6:	2203      	movs	r2, #3
 80012f8:	711a      	strb	r2, [r3, #4]
                .packetType = PACKET_TYPE_IDENTIFY_ACK
            }
        };
        
        // Calculate CRC for header
        ack.header.crc = ack.header.packetType * 2 + ack.header.targetAddr * 3 + ack.header.srcAddr * 5;
 80012fa:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012fe:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800130c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	0049      	lsls	r1, r1, #1
 8001316:	440b      	add	r3, r1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4413      	add	r3, r2
 800131c:	b2da      	uxtb	r2, r3
 800131e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001322:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001326:	785b      	ldrb	r3, [r3, #1]
 8001328:	4619      	mov	r1, r3
 800132a:	0089      	lsls	r1, r1, #2
 800132c:	440b      	add	r3, r1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b2da      	uxtb	r2, r3
 8001334:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001338:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800133c:	70da      	strb	r2, [r3, #3]

        ack.identifyPack.identifiedDevices = 1;
 800133e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001342:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001346:	2201      	movs	r2, #1
 8001348:	715a      	strb	r2, [r3, #5]
        ack.identifyPack.searchDepth = rx.identifyPack.searchDepth - 1;
 800134a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800134e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001352:	799b      	ldrb	r3, [r3, #6]
 8001354:	3b01      	subs	r3, #1
 8001356:	b2da      	uxtb	r2, r3
 8001358:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800135c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001360:	719a      	strb	r2, [r3, #6]

        downstreamDetected = detect_downstream(&response, rx.identifyPack.searchDepth - 1);
 8001362:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001366:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800136a:	799b      	ldrb	r3, [r3, #6]
 800136c:	3b01      	subs	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	463b      	mov	r3, r7
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fc9d 	bl	8000cb4 <detect_downstream>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <BusNode_RunLoop+0x304>)
 8001380:	701a      	strb	r2, [r3, #0]
        if (downstreamDetected) {
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <BusNode_RunLoop+0x304>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d010      	beq.n	80013ac <BusNode_RunLoop+0x2e4>
            ack.identifyPack.identifiedDevices += response.identifyPack.identifiedDevices;
 800138a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800138e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001392:	795a      	ldrb	r2, [r3, #5]
 8001394:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001398:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	4413      	add	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80013a6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80013aa:	715a      	strb	r2, [r3, #5]
        }

        HAL_SPI_Transmit(&slave, (uint8_t*)&ack, IDENTIFY_WHOLEPACK_SIZE, 200);
 80013ac:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80013b0:	23c8      	movs	r3, #200	@ 0xc8
 80013b2:	2207      	movs	r2, #7
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <BusNode_RunLoop+0x2fc>)
 80013b6:	f004 f99f 	bl	80056f8 <HAL_SPI_Transmit>
 80013ba:	e077      	b.n	80014ac <BusNode_RunLoop+0x3e4>
 80013bc:	20000138 	.word	0x20000138
 80013c0:	200029a8 	.word	0x200029a8
 80013c4:	20000084 	.word	0x20000084
 80013c8:	20000006 	.word	0x20000006
 80013cc:	20000134 	.word	0x20000134
        return;
    }

    // If it's for us, handle it here
    if (rx.header.targetAddr == myAddr && myAddr != broadcast && 
 80013d0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80013d4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <BusNode_RunLoop+0x3ec>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d146      	bne.n	8001470 <BusNode_RunLoop+0x3a8>
 80013e2:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <BusNode_RunLoop+0x3ec>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	22ff      	movs	r2, #255	@ 0xff
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d041      	beq.n	8001470 <BusNode_RunLoop+0x3a8>
        rx.header.packetType == PACKET_TYPE_REQUEST_DATA) {
 80013ec:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80013f0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80013f4:	791b      	ldrb	r3, [r3, #4]
    if (rx.header.targetAddr == myAddr && myAddr != broadcast && 
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d13a      	bne.n	8001470 <BusNode_RunLoop+0x3a8>
        
        switch (rx.requestDataPack.requestDataType) {
 80013fa:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80013fe:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001402:	795b      	ldrb	r3, [r3, #5]
 8001404:	3b01      	subs	r3, #1
 8001406:	2b10      	cmp	r3, #16
 8001408:	d830      	bhi.n	800146c <BusNode_RunLoop+0x3a4>
 800140a:	a201      	add	r2, pc, #4	@ (adr r2, 8001410 <BusNode_RunLoop+0x348>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	0800145b 	.word	0x0800145b
 8001414:	08001461 	.word	0x08001461
 8001418:	08001455 	.word	0x08001455
 800141c:	0800146d 	.word	0x0800146d
 8001420:	0800146d 	.word	0x0800146d
 8001424:	0800146d 	.word	0x0800146d
 8001428:	0800146d 	.word	0x0800146d
 800142c:	0800146d 	.word	0x0800146d
 8001430:	0800146d 	.word	0x0800146d
 8001434:	0800146d 	.word	0x0800146d
 8001438:	0800146d 	.word	0x0800146d
 800143c:	0800146d 	.word	0x0800146d
 8001440:	0800146d 	.word	0x0800146d
 8001444:	0800146d 	.word	0x0800146d
 8001448:	0800146d 	.word	0x0800146d
 800144c:	0800146d 	.word	0x0800146d
 8001450:	08001467 	.word	0x08001467
        case RQP_TYPE_SAY_HI:
            handleSayHiRequest();
 8001454:	f7ff fa90 	bl	8000978 <handleSayHiRequest>
            break;
 8001458:	e009      	b.n	800146e <BusNode_RunLoop+0x3a6>

        case RQP_TYPE_ADC_READINGS:
            handleADCDataRequest();
 800145a:	f7ff f9b9 	bl	80007d0 <handleADCDataRequest>
            break;
 800145e:	e006      	b.n	800146e <BusNode_RunLoop+0x3a6>

        case RQP_TYPE_UART_DATA:
            handleUARTDataRequest();
 8001460:	f7ff fafc 	bl	8000a5c <handleUARTDataRequest>
            break;
 8001464:	e003      	b.n	800146e <BusNode_RunLoop+0x3a6>

        case RQP_TYPE_EXT_ADC_READINGS:
            handleExternalADCDataRequest();
 8001466:	f7ff fa25 	bl	80008b4 <handleExternalADCDataRequest>
            break;
 800146a:	e000      	b.n	800146e <BusNode_RunLoop+0x3a6>

        default:
            break;
 800146c:	bf00      	nop
        }
        return;
 800146e:	e01d      	b.n	80014ac <BusNode_RunLoop+0x3e4>
    } else if (downstreamDetected && myAddr != rx.header.targetAddr) {
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <BusNode_RunLoop+0x3f0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d019      	beq.n	80014ac <BusNode_RunLoop+0x3e4>
 8001478:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800147c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <BusNode_RunLoop+0x3ec>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d010      	beq.n	80014ac <BusNode_RunLoop+0x3e4>
        forward_packet(&rx);
 800148a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fd6e 	bl	8000f70 <forward_packet>
 8001494:	e00a      	b.n	80014ac <BusNode_RunLoop+0x3e4>
            return;
 8001496:	bf00      	nop
 8001498:	e008      	b.n	80014ac <BusNode_RunLoop+0x3e4>
        return; // No valid start byte, return and try again next time
 800149a:	bf00      	nop
 800149c:	e006      	b.n	80014ac <BusNode_RunLoop+0x3e4>
        return;
 800149e:	bf00      	nop
 80014a0:	e004      	b.n	80014ac <BusNode_RunLoop+0x3e4>
        return;
 80014a2:	bf00      	nop
 80014a4:	e002      	b.n	80014ac <BusNode_RunLoop+0x3e4>
        return;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <BusNode_RunLoop+0x3e4>
            return;
 80014aa:	bf00      	nop
    }
}
 80014ac:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000006 	.word	0x20000006
 80014b8:	20000134 	.word	0x20000134

080014bc <mbus_buffer_push>:
} MbusCircularBuffer;

static MbusCircularBuffer mbus_buffers[UART_COUNT] = {0};

// Add data to circular buffer
static void mbus_buffer_push(MbusCircularBuffer *buf, const uint8_t *data, uint16_t len) {
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	4613      	mov	r3, r2
 80014c8:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < len; i++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	82fb      	strh	r3, [r7, #22]
 80014ce:	e038      	b.n	8001542 <mbus_buffer_push+0x86>
        buf->buffer[buf->head] = data[i];
 80014d0:	8afb      	ldrh	r3, [r7, #22]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 80014dc:	7819      	ldrb	r1, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	5499      	strb	r1, [r3, r2]
        buf->head = (buf->head + 1) % MBUS_BUFFER_SIZE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80014e8:	3301      	adds	r3, #1
 80014ea:	425a      	negs	r2, r3
 80014ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014f4:	bf58      	it	pl
 80014f6:	4253      	negpl	r3, r2
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
        
        // If buffer is full, move tail to overwrite oldest data
        if (buf->count >= MBUS_BUFFER_SIZE) {
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150a:	d30f      	bcc.n	800152c <mbus_buffer_push+0x70>
            buf->tail = (buf->tail + 1) % MBUS_BUFFER_SIZE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8001512:	3301      	adds	r3, #1
 8001514:	425a      	negs	r2, r3
 8001516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800151e:	bf58      	it	pl
 8001520:	4253      	negpl	r3, r2
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 800152a:	e007      	b.n	800153c <mbus_buffer_push+0x80>
        } else {
            buf->count++;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001532:	3301      	adds	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
    for (uint16_t i = 0; i < len; i++) {
 800153c:	8afb      	ldrh	r3, [r7, #22]
 800153e:	3301      	adds	r3, #1
 8001540:	82fb      	strh	r3, [r7, #22]
 8001542:	8afa      	ldrh	r2, [r7, #22]
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3c2      	bcc.n	80014d0 <mbus_buffer_push+0x14>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <mbus_find_packet>:

// Find a complete M-Bus packet in the buffer
static int mbus_find_packet(MbusCircularBuffer *buf, uint16_t *start_idx, uint16_t *packet_len) {
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
    if (buf->count < 6) {  // Minimum M-Bus packet size (start + L + L + start + C + stop)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 800156a:	2b05      	cmp	r3, #5
 800156c:	d801      	bhi.n	8001572 <mbus_find_packet+0x1a>
        return 0;
 800156e:	2300      	movs	r3, #0
 8001570:	e06f      	b.n	8001652 <mbus_find_packet+0xfa>
    }
    
    // Search for M-Bus packet pattern: 0x68 L L 0x68 ... 0x16
    for (uint16_t i = 0; i < buf->count - 5; i++) {
 8001572:	2300      	movs	r3, #0
 8001574:	83fb      	strh	r3, [r7, #30]
 8001576:	e064      	b.n	8001642 <mbus_find_packet+0xea>
        uint16_t idx = (buf->tail + i) % MBUS_BUFFER_SIZE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800157e:	8bfb      	ldrh	r3, [r7, #30]
 8001580:	4413      	add	r3, r2
 8001582:	b29b      	uxth	r3, r3
 8001584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001588:	83bb      	strh	r3, [r7, #28]
        
        // Check for start byte
        if (buf->buffer[idx] == MBUS_START_BYTE) {
 800158a:	8bbb      	ldrh	r3, [r7, #28]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	2b68      	cmp	r3, #104	@ 0x68
 8001592:	d153      	bne.n	800163c <mbus_find_packet+0xe4>
            // Get L-field (length)
            uint16_t idx_len1 = (idx + 1) % MBUS_BUFFER_SIZE;
 8001594:	8bbb      	ldrh	r3, [r7, #28]
 8001596:	3301      	adds	r3, #1
 8001598:	425a      	negs	r2, r3
 800159a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800159e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80015a2:	bf58      	it	pl
 80015a4:	4253      	negpl	r3, r2
 80015a6:	837b      	strh	r3, [r7, #26]
            uint16_t idx_len2 = (idx + 2) % MBUS_BUFFER_SIZE;
 80015a8:	8bbb      	ldrh	r3, [r7, #28]
 80015aa:	3302      	adds	r3, #2
 80015ac:	425a      	negs	r2, r3
 80015ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80015b6:	bf58      	it	pl
 80015b8:	4253      	negpl	r3, r2
 80015ba:	833b      	strh	r3, [r7, #24]
            uint16_t idx_2nd_start = (idx + 3) % MBUS_BUFFER_SIZE;
 80015bc:	8bbb      	ldrh	r3, [r7, #28]
 80015be:	3303      	adds	r3, #3
 80015c0:	425a      	negs	r2, r3
 80015c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80015ca:	bf58      	it	pl
 80015cc:	4253      	negpl	r3, r2
 80015ce:	82fb      	strh	r3, [r7, #22]
            
            // Verify second start byte and matching length fields
            if (buf->buffer[idx_2nd_start] == MBUS_START_BYTE && 
 80015d0:	8afb      	ldrh	r3, [r7, #22]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	2b68      	cmp	r3, #104	@ 0x68
 80015d8:	d130      	bne.n	800163c <mbus_find_packet+0xe4>
                buf->buffer[idx_len1] == buf->buffer[idx_len2]) {
 80015da:	8b7b      	ldrh	r3, [r7, #26]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	5cd2      	ldrb	r2, [r2, r3]
 80015e0:	8b3b      	ldrh	r3, [r7, #24]
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	5ccb      	ldrb	r3, [r1, r3]
            if (buf->buffer[idx_2nd_start] == MBUS_START_BYTE && 
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d128      	bne.n	800163c <mbus_find_packet+0xe4>
                
                uint8_t l_field = buf->buffer[idx_len1];
 80015ea:	8b7b      	ldrh	r3, [r7, #26]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	757b      	strb	r3, [r7, #21]
                
                // Total packet length = 4 (start,L,L,start) + L + 2 (checksum,stop)
                uint16_t total_len = 4 + l_field + 2;
 80015f2:	7d7b      	ldrb	r3, [r7, #21]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3306      	adds	r3, #6
 80015f8:	827b      	strh	r3, [r7, #18]
                
                // Check if we have enough bytes for the complete packet
                if (i + total_len <= buf->count) {
 80015fa:	8bfa      	ldrh	r2, [r7, #30]
 80015fc:	8a7b      	ldrh	r3, [r7, #18]
 80015fe:	4413      	add	r3, r2
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	@ 0x404
 8001606:	4293      	cmp	r3, r2
 8001608:	dc18      	bgt.n	800163c <mbus_find_packet+0xe4>
                    // Check for stop byte
                    uint16_t stop_idx = (idx + total_len - 1) % MBUS_BUFFER_SIZE;
 800160a:	8bba      	ldrh	r2, [r7, #28]
 800160c:	8a7b      	ldrh	r3, [r7, #18]
 800160e:	4413      	add	r3, r2
 8001610:	3b01      	subs	r3, #1
 8001612:	425a      	negs	r2, r3
 8001614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001618:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800161c:	bf58      	it	pl
 800161e:	4253      	negpl	r3, r2
 8001620:	823b      	strh	r3, [r7, #16]
                    if (buf->buffer[stop_idx] == MBUS_STOP_BYTE) {
 8001622:	8a3b      	ldrh	r3, [r7, #16]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	2b16      	cmp	r3, #22
 800162a:	d107      	bne.n	800163c <mbus_find_packet+0xe4>
                        *start_idx = idx;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	8bba      	ldrh	r2, [r7, #28]
 8001630:	801a      	strh	r2, [r3, #0]
                        *packet_len = total_len;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	8a7a      	ldrh	r2, [r7, #18]
 8001636:	801a      	strh	r2, [r3, #0]
                        return 1;
 8001638:	2301      	movs	r3, #1
 800163a:	e00a      	b.n	8001652 <mbus_find_packet+0xfa>
    for (uint16_t i = 0; i < buf->count - 5; i++) {
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	3301      	adds	r3, #1
 8001640:	83fb      	strh	r3, [r7, #30]
 8001642:	8bfa      	ldrh	r2, [r7, #30]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 800164a:	3b05      	subs	r3, #5
 800164c:	429a      	cmp	r2, r3
 800164e:	db93      	blt.n	8001578 <mbus_find_packet+0x20>
                }
            }
        }
    }
    
    return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	@ 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <mbus_buffer_pop>:

// Remove bytes from the buffer
static void mbus_buffer_pop(MbusCircularBuffer *buf, uint16_t len) {
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	807b      	strh	r3, [r7, #2]
    if (len > buf->count) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001670:	887a      	ldrh	r2, [r7, #2]
 8001672:	429a      	cmp	r2, r3
 8001674:	d903      	bls.n	800167e <mbus_buffer_pop+0x20>
        len = buf->count;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 800167c:	807b      	strh	r3, [r7, #2]
    }
    
    buf->tail = (buf->tail + len) % MBUS_BUFFER_SIZE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	4413      	add	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
    buf->count -= len;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <mbus_extract_packet>:

// Extract a complete packet from the buffer
static int mbus_extract_packet(MbusCircularBuffer *buf, uint8_t *packet, uint16_t max_len) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	4613      	mov	r3, r2
 80016c0:	80fb      	strh	r3, [r7, #6]
    uint16_t start_idx = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	827b      	strh	r3, [r7, #18]
    uint16_t packet_len = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	823b      	strh	r3, [r7, #16]
    
    if (!mbus_find_packet(buf, &start_idx, &packet_len)) {
 80016ca:	f107 0210 	add.w	r2, r7, #16
 80016ce:	f107 0312 	add.w	r3, r7, #18
 80016d2:	4619      	mov	r1, r3
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7ff ff3f 	bl	8001558 <mbus_find_packet>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <mbus_extract_packet+0x30>
        return 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e02b      	b.n	800173c <mbus_extract_packet+0x88>
    }
    
    // Check if packet fits in the output buffer
    if (packet_len > max_len) {
 80016e4:	8a3b      	ldrh	r3, [r7, #16]
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d201      	bcs.n	80016f0 <mbus_extract_packet+0x3c>
        return 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e025      	b.n	800173c <mbus_extract_packet+0x88>
    }
    
    // Copy packet to output buffer
    for (uint16_t i = 0; i < packet_len; i++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	82fb      	strh	r3, [r7, #22]
 80016f4:	e010      	b.n	8001718 <mbus_extract_packet+0x64>
        uint16_t idx = (start_idx + i) % MBUS_BUFFER_SIZE;
 80016f6:	8a7a      	ldrh	r2, [r7, #18]
 80016f8:	8afb      	ldrh	r3, [r7, #22]
 80016fa:	4413      	add	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001702:	82bb      	strh	r3, [r7, #20]
        packet[i] = buf->buffer[idx];
 8001704:	8aba      	ldrh	r2, [r7, #20]
 8001706:	8afb      	ldrh	r3, [r7, #22]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	440b      	add	r3, r1
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	5c8a      	ldrb	r2, [r1, r2]
 8001710:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < packet_len; i++) {
 8001712:	8afb      	ldrh	r3, [r7, #22]
 8001714:	3301      	adds	r3, #1
 8001716:	82fb      	strh	r3, [r7, #22]
 8001718:	8a3b      	ldrh	r3, [r7, #16]
 800171a:	8afa      	ldrh	r2, [r7, #22]
 800171c:	429a      	cmp	r2, r3
 800171e:	d3ea      	bcc.n	80016f6 <mbus_extract_packet+0x42>
    }
    
    // Remove the packet from the buffer
    mbus_buffer_pop(buf, start_idx - buf->tail + packet_len);
 8001720:	8a7a      	ldrh	r2, [r7, #18]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b29a      	uxth	r2, r3
 800172c:	8a3b      	ldrh	r3, [r7, #16]
 800172e:	4413      	add	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff ff92 	bl	800165e <mbus_buffer_pop>
    
    return packet_len;
 800173a:	8a3b      	ldrh	r3, [r7, #16]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_COUNT; i++) {
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e03d      	b.n	80017ce <HAL_UART_RxCpltCallback+0x8a>
        UART_HandleTypeDef *current = NULL;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
        switch (i) {
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b07      	cmp	r3, #7
 800175a:	d82b      	bhi.n	80017b4 <HAL_UART_RxCpltCallback+0x70>
 800175c:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <HAL_UART_RxCpltCallback+0x20>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001785 	.word	0x08001785
 8001768:	0800178b 	.word	0x0800178b
 800176c:	08001791 	.word	0x08001791
 8001770:	08001797 	.word	0x08001797
 8001774:	0800179d 	.word	0x0800179d
 8001778:	080017a3 	.word	0x080017a3
 800177c:	080017a9 	.word	0x080017a9
 8001780:	080017af 	.word	0x080017af
        case 0:
            current = &huart1;
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <HAL_UART_RxCpltCallback+0xa0>)
 8001786:	60bb      	str	r3, [r7, #8]
            break;
 8001788:	e014      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x70>
        case 1:
            current = &huart2;
 800178a:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_UART_RxCpltCallback+0xa4>)
 800178c:	60bb      	str	r3, [r7, #8]
            break;
 800178e:	e011      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x70>
        case 2:
            current = &huart3;
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_UART_RxCpltCallback+0xa8>)
 8001792:	60bb      	str	r3, [r7, #8]
            break;
 8001794:	e00e      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x70>
        case 3:
            current = &huart4;
 8001796:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <HAL_UART_RxCpltCallback+0xac>)
 8001798:	60bb      	str	r3, [r7, #8]
            break;
 800179a:	e00b      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x70>
        case 4:
            current = &huart5;
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_UART_RxCpltCallback+0xb0>)
 800179e:	60bb      	str	r3, [r7, #8]
            break;
 80017a0:	e008      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x70>
        case 5:
            current = &huart6;
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_UART_RxCpltCallback+0xb4>)
 80017a4:	60bb      	str	r3, [r7, #8]
            break;
 80017a6:	e005      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x70>
        case 6:
            current = &huart7;
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <HAL_UART_RxCpltCallback+0xb8>)
 80017aa:	60bb      	str	r3, [r7, #8]
            break;
 80017ac:	e002      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x70>
        case 7:
            current = &huart8;
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_UART_RxCpltCallback+0xbc>)
 80017b0:	60bb      	str	r3, [r7, #8]
            break;
 80017b2:	bf00      	nop
        }

        if (huart == current) {
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d105      	bne.n	80017c8 <HAL_UART_RxCpltCallback+0x84>
            uart_dma_ready[i] = true;
 80017bc:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <HAL_UART_RxCpltCallback+0xc0>)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4413      	add	r3, r2
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
            break;
 80017c6:	e006      	b.n	80017d6 <HAL_UART_RxCpltCallback+0x92>
    for (int i = 0; i < UART_COUNT; i++) {
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	ddbe      	ble.n	8001752 <HAL_UART_RxCpltCallback+0xe>
        }
    }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20002574 	.word	0x20002574
 80017e8:	200025bc 	.word	0x200025bc
 80017ec:	20002604 	.word	0x20002604
 80017f0:	20002454 	.word	0x20002454
 80017f4:	2000249c 	.word	0x2000249c
 80017f8:	2000264c 	.word	0x2000264c
 80017fc:	200024e4 	.word	0x200024e4
 8001800:	2000252c 	.word	0x2000252c
 8001804:	2000013c 	.word	0x2000013c

08001808 <huartTaskEntry>:

void huartTaskEntry(void *arg) {
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800180e:	af00      	add	r7, sp, #0
 8001810:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001814:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001818:	6018      	str	r0, [r3, #0]
    // Buffer for DMA reception
    static uint8_t uart_rx_buffers[UART_COUNT][16];  // Smaller DMA buffer for faster reception
    
    // Array of UART handles
    UART_HandleTypeDef *huarts[UART_COUNT] = { 
 800181a:	4b58      	ldr	r3, [pc, #352]	@ (800197c <huartTaskEntry+0x174>)
 800181c:	f507 7400 	add.w	r4, r7, #512	@ 0x200
 8001820:	461d      	mov	r5, r3
 8001822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001826:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800182a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        &huart1, &huart2, &huart3, &huart4, 
        &huart5, &huart6, &huart7, &huart8
    };
    
    // Initialize DMA reception for all UARTs
    for (int i = 0; i < UART_COUNT; i++) {
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8001834:	e015      	b.n	8001862 <huartTaskEntry+0x5a>
        HAL_UART_Receive_DMA(huarts[i], uart_rx_buffers[i], 16);
 8001836:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8001840:	443b      	add	r3, r7
 8001842:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8001846:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4a4c      	ldr	r2, [pc, #304]	@ (8001980 <huartTaskEntry+0x178>)
 800184e:	4413      	add	r3, r2
 8001850:	2210      	movs	r2, #16
 8001852:	4619      	mov	r1, r3
 8001854:	f004 ff84 	bl	8006760 <HAL_UART_Receive_DMA>
    for (int i = 0; i < UART_COUNT; i++) {
 8001858:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800185c:	3301      	adds	r3, #1
 800185e:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8001862:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001866:	2b07      	cmp	r3, #7
 8001868:	dde5      	ble.n	8001836 <huartTaskEntry+0x2e>
    // Buffer for extracted M-Bus packets
    uint8_t packet_buffer[UART_DATA_SIZE];
    
    // Main task loop
    while (1) {
        bool data_processed = false;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        
        // Check each UART for received data
        for (int i = 0; i < UART_COUNT; i++) {
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001876:	e072      	b.n	800195e <huartTaskEntry+0x156>
            if (uart_dma_ready[i]) {
 8001878:	4a42      	ldr	r2, [pc, #264]	@ (8001984 <huartTaskEntry+0x17c>)
 800187a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d065      	beq.n	8001954 <huartTaskEntry+0x14c>
                uart_dma_ready[i] = false;
 8001888:	4a3e      	ldr	r2, [pc, #248]	@ (8001984 <huartTaskEntry+0x17c>)
 800188a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800188e:	4413      	add	r3, r2
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
                data_processed = true;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
                
                // Add received data to circular buffer
                mbus_buffer_push(&mbus_buffers[i], uart_rx_buffers[i], 16);
 800189a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800189e:	f240 4206 	movw	r2, #1030	@ 0x406
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4a38      	ldr	r2, [pc, #224]	@ (8001988 <huartTaskEntry+0x180>)
 80018a8:	1898      	adds	r0, r3, r2
 80018aa:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4a33      	ldr	r2, [pc, #204]	@ (8001980 <huartTaskEntry+0x178>)
 80018b2:	4413      	add	r3, r2
 80018b4:	2210      	movs	r2, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff fe00 	bl	80014bc <mbus_buffer_push>
                
                // Restart DMA immediately
                HAL_UART_Receive_DMA(huarts[i], uart_rx_buffers[i], 16);
 80018bc:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80018c6:	443b      	add	r3, r7
 80018c8:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80018cc:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001980 <huartTaskEntry+0x178>)
 80018d4:	4413      	add	r3, r2
 80018d6:	2210      	movs	r2, #16
 80018d8:	4619      	mov	r1, r3
 80018da:	f004 ff41 	bl	8006760 <HAL_UART_Receive_DMA>
                
                // Extract and forward complete M-Bus packets
                int packet_len;
                while ((packet_len = mbus_extract_packet(&mbus_buffers[i], packet_buffer, UART_DATA_SIZE)) > 0) {
 80018de:	e025      	b.n	800192c <huartTaskEntry+0x124>
                    // Create UART packet
                    UartPacket uart_packet = {0};
 80018e0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80018e4:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80018e8:	4618      	mov	r0, r3
 80018ea:	23fb      	movs	r3, #251	@ 0xfb
 80018ec:	461a      	mov	r2, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	f009 f9d6 	bl	800aca0 <memset>
                    uart_packet.uart_id = i + 1;  // UART ID (1-based)
 80018f4:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001902:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8001906:	701a      	strb	r2, [r3, #0]
                    
                    // Copy M-Bus packet data
                    memcpy(uart_packet.data, packet_buffer, packet_len);
 8001908:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 800190c:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	3301      	adds	r3, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f009 fa4c 	bl	800adb4 <memcpy>
                    
                    // Put packet in queue for transmission to ESP32
                    osMessageQueuePut(uartQueueHandle, &uart_packet, 0, 0);
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <huartTaskEntry+0x184>)
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	f107 0108 	add.w	r1, r7, #8
 8001924:	2300      	movs	r3, #0
 8001926:	2200      	movs	r2, #0
 8001928:	f005 ff5e 	bl	80077e8 <osMessageQueuePut>
                while ((packet_len = mbus_extract_packet(&mbus_buffers[i], packet_buffer, UART_DATA_SIZE)) > 0) {
 800192c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8001930:	f240 4206 	movw	r2, #1030	@ 0x406
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	4a13      	ldr	r2, [pc, #76]	@ (8001988 <huartTaskEntry+0x180>)
 800193a:	4413      	add	r3, r2
 800193c:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8001940:	22fa      	movs	r2, #250	@ 0xfa
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff feb6 	bl	80016b4 <mbus_extract_packet>
 8001948:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
 800194c:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8001950:	2b00      	cmp	r3, #0
 8001952:	dcc5      	bgt.n	80018e0 <huartTaskEntry+0xd8>
        for (int i = 0; i < UART_COUNT; i++) {
 8001954:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8001958:	3301      	adds	r3, #1
 800195a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 800195e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8001962:	2b07      	cmp	r3, #7
 8001964:	dd88      	ble.n	8001878 <huartTaskEntry+0x70>
                }
            }
        }
        
        // Yield to other tasks
        osDelay(data_processed ? 2 : 5);
 8001966:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <huartTaskEntry+0x16a>
 800196e:	2302      	movs	r3, #2
 8001970:	e000      	b.n	8001974 <huartTaskEntry+0x16c>
 8001972:	2305      	movs	r3, #5
 8001974:	4618      	mov	r0, r3
 8001976:	f005 fd12 	bl	800739e <osDelay>
    while (1) {
 800197a:	e776      	b.n	800186a <huartTaskEntry+0x62>
 800197c:	0800ae9c 	.word	0x0800ae9c
 8001980:	20002174 	.word	0x20002174
 8001984:	2000013c 	.word	0x2000013c
 8001988:	20000144 	.word	0x20000144
 800198c:	200029a8 	.word	0x200029a8

08001990 <HAL_ADC_ConvCpltCallback>:

uint16_t adcReadings[12] = { 0 };
uint16_t externalADCReadings[11] = { 0 };
volatile int isADCFinished = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	isADCFinished = 1;
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200029e4 	.word	0x200029e4

080019b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b4:	f001 fe02 	bl	80035bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b8:	f000 f88e 	bl	8001ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019bc:	f000 fca8 	bl	8002310 <MX_GPIO_Init>
  MX_DMA_Init();
 80019c0:	f000 fc38 	bl	8002234 <MX_DMA_Init>
  MX_SPI1_Init();
 80019c4:	f000 f9e0 	bl	8001d88 <MX_SPI1_Init>
  MX_UART4_Init();
 80019c8:	f000 fae4 	bl	8001f94 <MX_UART4_Init>
  MX_UART5_Init();
 80019cc:	f000 fb0c 	bl	8001fe8 <MX_UART5_Init>
  MX_UART7_Init();
 80019d0:	f000 fb34 	bl	800203c <MX_UART7_Init>
  MX_UART8_Init();
 80019d4:	f000 fb5c 	bl	8002090 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80019d8:	f000 fb84 	bl	80020e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019dc:	f000 fbac 	bl	8002138 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80019e0:	f000 fbd4 	bl	800218c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80019e4:	f000 fbfc 	bl	80021e0 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 80019e8:	f000 fa36 	bl	8001e58 <MX_SPI3_Init>
  MX_SPI4_Init();
 80019ec:	f000 fa66 	bl	8001ebc <MX_SPI4_Init>
  MX_SPI5_Init();
 80019f0:	f000 fa9a 	bl	8001f28 <MX_SPI5_Init>
  MX_ADC1_Init();
 80019f4:	f000 f8dc 	bl	8001bb0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80019f8:	f000 f9f8 	bl	8001dec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019fc:	f005 fbde 	bl	80071bc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of adcBufReadMutex */
  adcBufReadMutexHandle = osMutexNew(&adcBufReadMutex_attributes);
 8001a00:	4820      	ldr	r0, [pc, #128]	@ (8001a84 <main+0xd4>)
 8001a02:	f005 fce7 	bl	80073d4 <osMutexNew>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <main+0xd8>)
 8001a0a:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of spi_rx */
  spi_rxHandle = osSemaphoreNew(1, 0, &spi_rx_attributes);
 8001a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a8c <main+0xdc>)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2001      	movs	r0, #1
 8001a12:	f005 fded 	bl	80075f0 <osSemaphoreNew>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a1d      	ldr	r2, [pc, #116]	@ (8001a90 <main+0xe0>)
 8001a1a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (20, 17, &uartQueue_attributes);
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a94 <main+0xe4>)
 8001a1e:	2111      	movs	r1, #17
 8001a20:	2014      	movs	r0, #20
 8001a22:	f005 fe6e 	bl	8007702 <osMessageQueueNew>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a1b      	ldr	r2, [pc, #108]	@ (8001a98 <main+0xe8>)
 8001a2a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a9c <main+0xec>)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	481b      	ldr	r0, [pc, #108]	@ (8001aa0 <main+0xf0>)
 8001a32:	f005 fc22 	bl	800727a <osThreadNew>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa4 <main+0xf4>)
 8001a3a:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(logTaskEntry, NULL, &logTask_attributes);
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa8 <main+0xf8>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	481a      	ldr	r0, [pc, #104]	@ (8001aac <main+0xfc>)
 8001a42:	f005 fc1a 	bl	800727a <osThreadNew>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <main+0x100>)
 8001a4a:	6013      	str	r3, [r2, #0]

  /* creation of adcReadTask */
  adcReadTaskHandle = osThreadNew(adcReadTaskEntry, NULL, &adcReadTask_attributes);
 8001a4c:	4a19      	ldr	r2, [pc, #100]	@ (8001ab4 <main+0x104>)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4819      	ldr	r0, [pc, #100]	@ (8001ab8 <main+0x108>)
 8001a52:	f005 fc12 	bl	800727a <osThreadNew>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a18      	ldr	r2, [pc, #96]	@ (8001abc <main+0x10c>)
 8001a5a:	6013      	str	r3, [r2, #0]

  /* creation of huartTask */
  huartTaskHandle = osThreadNew(huartTaskEntry, NULL, &huartTask_attributes);
 8001a5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ac0 <main+0x110>)
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4818      	ldr	r0, [pc, #96]	@ (8001ac4 <main+0x114>)
 8001a62:	f005 fc0a 	bl	800727a <osThreadNew>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <main+0x118>)
 8001a6a:	6013      	str	r3, [r2, #0]

  /* creation of adsReadTask */
  adsReadTaskHandle = osThreadNew(adsTaskEntry, NULL, &adsReadTask_attributes);
 8001a6c:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <main+0x11c>)
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4817      	ldr	r0, [pc, #92]	@ (8001ad0 <main+0x120>)
 8001a72:	f005 fc02 	bl	800727a <osThreadNew>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a16      	ldr	r2, [pc, #88]	@ (8001ad4 <main+0x124>)
 8001a7a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a7c:	f005 fbc2 	bl	8007204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <main+0xd0>
 8001a84:	0800b008 	.word	0x0800b008
 8001a88:	200029ac 	.word	0x200029ac
 8001a8c:	0800b018 	.word	0x0800b018
 8001a90:	200029b0 	.word	0x200029b0
 8001a94:	0800aff0 	.word	0x0800aff0
 8001a98:	200029a8 	.word	0x200029a8
 8001a9c:	0800af3c 	.word	0x0800af3c
 8001aa0:	08002545 	.word	0x08002545
 8001aa4:	20002994 	.word	0x20002994
 8001aa8:	0800af60 	.word	0x0800af60
 8001aac:	08002559 	.word	0x08002559
 8001ab0:	20002998 	.word	0x20002998
 8001ab4:	0800af84 	.word	0x0800af84
 8001ab8:	08002585 	.word	0x08002585
 8001abc:	2000299c 	.word	0x2000299c
 8001ac0:	0800afa8 	.word	0x0800afa8
 8001ac4:	08001809 	.word	0x08001809
 8001ac8:	200029a0 	.word	0x200029a0
 8001acc:	0800afcc 	.word	0x0800afcc
 8001ad0:	08002639 	.word	0x08002639
 8001ad4:	200029a4 	.word	0x200029a4

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b094      	sub	sp, #80	@ 0x50
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	f107 0320 	add.w	r3, r7, #32
 8001ae2:	2230      	movs	r2, #48	@ 0x30
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f009 f8da 	bl	800aca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <SystemClock_Config+0xd0>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	4a28      	ldr	r2, [pc, #160]	@ (8001ba8 <SystemClock_Config+0xd0>)
 8001b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <SystemClock_Config+0xd0>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <SystemClock_Config+0xd4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <SystemClock_Config+0xd4>)
 8001b22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <SystemClock_Config+0xd4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b34:	2301      	movs	r3, #1
 8001b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001b48:	230d      	movs	r3, #13
 8001b4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b4c:	23a8      	movs	r3, #168	@ 0xa8
 8001b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b54:	2307      	movs	r3, #7
 8001b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	f107 0320 	add.w	r3, r7, #32
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 f891 	bl	8004c84 <HAL_RCC_OscConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b68:	f000 fdce 	bl	8002708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b70:	2302      	movs	r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001b78:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	2105      	movs	r1, #5
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 faf2 	bl	8005174 <HAL_RCC_ClockConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b96:	f000 fdb7 	bl	8002708 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001b9a:	f003 fbd1 	bl	8005340 <HAL_RCC_EnableCSS>
}
 8001b9e:	bf00      	nop
 8001ba0:	3750      	adds	r7, #80	@ 0x50
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000

08001bb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8001d80 <MX_ADC1_Init+0x1d0>)
 8001bc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bd6:	4b69      	ldr	r3, [pc, #420]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bdc:	4b67      	ldr	r3, [pc, #412]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001be2:	4b66      	ldr	r3, [pc, #408]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bea:	4b64      	ldr	r3, [pc, #400]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf0:	4b62      	ldr	r3, [pc, #392]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bf2:	4a64      	ldr	r2, [pc, #400]	@ (8001d84 <MX_ADC1_Init+0x1d4>)
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf6:	4b61      	ldr	r3, [pc, #388]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001bfc:	4b5f      	ldr	r3, [pc, #380]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c02:	4b5e      	ldr	r3, [pc, #376]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c10:	485a      	ldr	r0, [pc, #360]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001c12:	f001 fd39 	bl	8003688 <HAL_ADC_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c1c:	f000 fd74 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4852      	ldr	r0, [pc, #328]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001c32:	f001 feef 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c3c:	f000 fd64 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	484b      	ldr	r0, [pc, #300]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001c4e:	f001 fee1 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c58:	f000 fd56 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c60:	2303      	movs	r3, #3
 8001c62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	4619      	mov	r1, r3
 8001c68:	4844      	ldr	r0, [pc, #272]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001c6a:	f001 fed3 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001c74:	f000 fd48 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c80:	463b      	mov	r3, r7
 8001c82:	4619      	mov	r1, r3
 8001c84:	483d      	ldr	r0, [pc, #244]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001c86:	f001 fec5 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001c90:	f000 fd3a 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001c94:	2308      	movs	r3, #8
 8001c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001c98:	2305      	movs	r3, #5
 8001c9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4836      	ldr	r0, [pc, #216]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001ca2:	f001 feb7 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001cac:	f000 fd2c 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001cb0:	2309      	movs	r3, #9
 8001cb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001cb4:	2306      	movs	r3, #6
 8001cb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4619      	mov	r1, r3
 8001cbc:	482f      	ldr	r0, [pc, #188]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001cbe:	f001 fea9 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001cc8:	f000 fd1e 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ccc:	230a      	movs	r3, #10
 8001cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4828      	ldr	r0, [pc, #160]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001cda:	f001 fe9b 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001ce4:	f000 fd10 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001ce8:	230b      	movs	r3, #11
 8001cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001cec:	2308      	movs	r3, #8
 8001cee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4821      	ldr	r0, [pc, #132]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001cf6:	f001 fe8d 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001d00:	f000 fd02 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d04:	230c      	movs	r3, #12
 8001d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001d08:	2309      	movs	r3, #9
 8001d0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4619      	mov	r1, r3
 8001d10:	481a      	ldr	r0, [pc, #104]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001d12:	f001 fe7f 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001d1c:	f000 fcf4 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001d20:	230d      	movs	r3, #13
 8001d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001d24:	230a      	movs	r3, #10
 8001d26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001d2e:	f001 fe71 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001d38:	f000 fce6 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001d3c:	230e      	movs	r3, #14
 8001d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001d40:	230b      	movs	r3, #11
 8001d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001d4a:	f001 fe63 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001d54:	f000 fcd8 	bl	8002708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d60:	463b      	mov	r3, r7
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <MX_ADC1_Init+0x1cc>)
 8001d66:	f001 fe55 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001d70:	f000 fcca 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200021f4 	.word	0x200021f4
 8001d80:	40012000 	.word	0x40012000
 8001d84:	0f000001 	.word	0x0f000001

08001d88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001d8e:	4a16      	ldr	r2, [pc, #88]	@ (8001de8 <MX_SPI1_Init+0x60>)
 8001d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001d92:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001dca:	220a      	movs	r2, #10
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <MX_SPI1_Init+0x5c>)
 8001dd0:	f003 fc09 	bl	80055e6 <HAL_SPI_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8001dda:	f000 fc95 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000229c 	.word	0x2000229c
 8001de8:	40013000 	.word	0x40013000

08001dec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001df2:	4a18      	ldr	r2, [pc, #96]	@ (8001e54 <MX_SPI2_Init+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001df8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfe:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e20:	2220      	movs	r2, #32
 8001e22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e24:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e2a:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e30:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e38:	220a      	movs	r2, #10
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <MX_SPI2_Init+0x64>)
 8001e3e:	f003 fbd2 	bl	80055e6 <HAL_SPI_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e48:	f000 fc5e 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200022f4 	.word	0x200022f4
 8001e54:	40003800 	.word	0x40003800

08001e58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e5e:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <MX_SPI3_Init+0x60>)
 8001e60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e92:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001e9a:	220a      	movs	r2, #10
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e9e:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <MX_SPI3_Init+0x5c>)
 8001ea0:	f003 fba1 	bl	80055e6 <HAL_SPI_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 8001eaa:	f000 fc2d 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000234c 	.word	0x2000234c
 8001eb8:	40003c00 	.word	0x40003c00

08001ebc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001ec2:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <MX_SPI4_Init+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001ec8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ecc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001ef0:	2238      	movs	r2, #56	@ 0x38
 8001ef2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001f08:	220a      	movs	r2, #10
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <MX_SPI4_Init+0x64>)
 8001f0e:	f003 fb6a 	bl	80055e6 <HAL_SPI_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001f18:	f000 fbf6 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200023a4 	.word	0x200023a4
 8001f24:	40013400 	.word	0x40013400

08001f28 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f2e:	4a18      	ldr	r2, [pc, #96]	@ (8001f90 <MX_SPI5_Init+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f38:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f58:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f66:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f74:	220a      	movs	r2, #10
 8001f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <MX_SPI5_Init+0x64>)
 8001f7a:	f003 fb34 	bl	80055e6 <HAL_SPI_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001f84:	f000 fbc0 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200023fc 	.word	0x200023fc
 8001f90:	40015000 	.word	0x40015000

08001f94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <MX_UART4_Init+0x50>)
 8001f9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = mbus_uart_baud;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001fa0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001fa4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <MX_UART4_Init+0x4c>)
 8001fcc:	f004 fb78 	bl	80066c0 <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001fd6:	f000 fb97 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20002454 	.word	0x20002454
 8001fe4:	40004c00 	.word	0x40004c00

08001fe8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <MX_UART5_Init+0x4c>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <MX_UART5_Init+0x50>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = mbus_uart_baud;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <MX_UART5_Init+0x4c>)
 8001ff4:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001ff8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <MX_UART5_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <MX_UART5_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <MX_UART5_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <MX_UART5_Init+0x4c>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <MX_UART5_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <MX_UART5_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_UART5_Init+0x4c>)
 8002020:	f004 fb4e 	bl	80066c0 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800202a:	f000 fb6d 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000249c 	.word	0x2000249c
 8002038:	40005000 	.word	0x40005000

0800203c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <MX_UART7_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <MX_UART7_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = mbus_uart_baud;
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <MX_UART7_Init+0x4c>)
 8002048:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800204c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <MX_UART7_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <MX_UART7_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <MX_UART7_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <MX_UART7_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <MX_UART7_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <MX_UART7_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <MX_UART7_Init+0x4c>)
 8002074:	f004 fb24 	bl	80066c0 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800207e:	f000 fb43 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200024e4 	.word	0x200024e4
 800208c:	40007800 	.word	0x40007800

08002090 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <MX_UART8_Init+0x4c>)
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <MX_UART8_Init+0x50>)
 8002098:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = mbus_uart_baud;
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_UART8_Init+0x4c>)
 800209c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80020a0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <MX_UART8_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <MX_UART8_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <MX_UART8_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <MX_UART8_Init+0x4c>)
 80020b6:	220c      	movs	r2, #12
 80020b8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <MX_UART8_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <MX_UART8_Init+0x4c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	@ (80020dc <MX_UART8_Init+0x4c>)
 80020c8:	f004 fafa 	bl	80066c0 <HAL_UART_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80020d2:	f000 fb19 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000252c 	.word	0x2000252c
 80020e0:	40007c00 	.word	0x40007c00

080020e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <MX_USART1_UART_Init+0x50>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = mbus_uart_baud;
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 80020f0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80020f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800211a:	4805      	ldr	r0, [pc, #20]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 800211c:	f004 fad0 	bl	80066c0 <HAL_UART_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002126:	f000 faef 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20002574 	.word	0x20002574
 8002134:	40011000 	.word	0x40011000

08002138 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <MX_USART2_UART_Init+0x50>)
 8002140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = mbus_uart_baud;
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 8002144:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <MX_USART2_UART_Init+0x4c>)
 8002170:	f004 faa6 	bl	80066c0 <HAL_UART_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800217a:	f000 fac5 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200025bc 	.word	0x200025bc
 8002188:	40004400 	.word	0x40004400

0800218c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <MX_USART3_UART_Init+0x50>)
 8002194:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = mbus_uart_baud;
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 8002198:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800219c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <MX_USART3_UART_Init+0x4c>)
 80021c4:	f004 fa7c 	bl	80066c0 <HAL_UART_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021ce:	f000 fa9b 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20002604 	.word	0x20002604
 80021dc:	40004800 	.word	0x40004800

080021e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <MX_USART6_UART_Init+0x50>)
 80021e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = mbus_uart_baud;
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 80021ec:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80021f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 8002206:	220c      	movs	r2, #12
 8002208:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002216:	4805      	ldr	r0, [pc, #20]	@ (800222c <MX_USART6_UART_Init+0x4c>)
 8002218:	f004 fa52 	bl	80066c0 <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002222:	f000 fa71 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000264c 	.word	0x2000264c
 8002230:	40011400 	.word	0x40011400

08002234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b33      	ldr	r3, [pc, #204]	@ (800230c <MX_DMA_Init+0xd8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	4a32      	ldr	r2, [pc, #200]	@ (800230c <MX_DMA_Init+0xd8>)
 8002244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002248:	6313      	str	r3, [r2, #48]	@ 0x30
 800224a:	4b30      	ldr	r3, [pc, #192]	@ (800230c <MX_DMA_Init+0xd8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4b2c      	ldr	r3, [pc, #176]	@ (800230c <MX_DMA_Init+0xd8>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a2b      	ldr	r2, [pc, #172]	@ (800230c <MX_DMA_Init+0xd8>)
 8002260:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b29      	ldr	r3, [pc, #164]	@ (800230c <MX_DMA_Init+0xd8>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2105      	movs	r1, #5
 8002276:	200b      	movs	r0, #11
 8002278:	f001 ff34 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800227c:	200b      	movs	r0, #11
 800227e:	f001 ff4d 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2105      	movs	r1, #5
 8002286:	200c      	movs	r0, #12
 8002288:	f001 ff2c 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800228c:	200c      	movs	r0, #12
 800228e:	f001 ff45 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2105      	movs	r1, #5
 8002296:	200d      	movs	r0, #13
 8002298:	f001 ff24 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800229c:	200d      	movs	r0, #13
 800229e:	f001 ff3d 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2105      	movs	r1, #5
 80022a6:	200e      	movs	r0, #14
 80022a8:	f001 ff1c 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80022ac:	200e      	movs	r0, #14
 80022ae:	f001 ff35 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2105      	movs	r1, #5
 80022b6:	2010      	movs	r0, #16
 80022b8:	f001 ff14 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022bc:	2010      	movs	r0, #16
 80022be:	f001 ff2d 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2105      	movs	r1, #5
 80022c6:	2011      	movs	r0, #17
 80022c8:	f001 ff0c 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022cc:	2011      	movs	r0, #17
 80022ce:	f001 ff25 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2105      	movs	r1, #5
 80022d6:	2038      	movs	r0, #56	@ 0x38
 80022d8:	f001 ff04 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022dc:	2038      	movs	r0, #56	@ 0x38
 80022de:	f001 ff1d 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2105      	movs	r1, #5
 80022e6:	2039      	movs	r0, #57	@ 0x39
 80022e8:	f001 fefc 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022ec:	2039      	movs	r0, #57	@ 0x39
 80022ee:	f001 ff15 	bl	800411c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2105      	movs	r1, #5
 80022f6:	203a      	movs	r0, #58	@ 0x3a
 80022f8:	f001 fef4 	bl	80040e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80022fc:	203a      	movs	r0, #58	@ 0x3a
 80022fe:	f001 ff0d 	bl	800411c <HAL_NVIC_EnableIRQ>

}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800

08002310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08e      	sub	sp, #56	@ 0x38
 8002314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
 800232a:	4b7f      	ldr	r3, [pc, #508]	@ (8002528 <MX_GPIO_Init+0x218>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a7e      	ldr	r2, [pc, #504]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002330:	f043 0310 	orr.w	r3, r3, #16
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b7c      	ldr	r3, [pc, #496]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	4b78      	ldr	r3, [pc, #480]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a77      	ldr	r2, [pc, #476]	@ (8002528 <MX_GPIO_Init+0x218>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b75      	ldr	r3, [pc, #468]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	4b71      	ldr	r3, [pc, #452]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a70      	ldr	r2, [pc, #448]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002368:	f043 0320 	orr.w	r3, r3, #32
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b6e      	ldr	r3, [pc, #440]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	4b6a      	ldr	r3, [pc, #424]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a69      	ldr	r2, [pc, #420]	@ (8002528 <MX_GPIO_Init+0x218>)
 8002384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b67      	ldr	r3, [pc, #412]	@ (8002528 <MX_GPIO_Init+0x218>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b63      	ldr	r3, [pc, #396]	@ (8002528 <MX_GPIO_Init+0x218>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a62      	ldr	r2, [pc, #392]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b60      	ldr	r3, [pc, #384]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b55      	ldr	r3, [pc, #340]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a54      	ldr	r2, [pc, #336]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023d8:	f043 0308 	orr.w	r3, r3, #8
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b52      	ldr	r3, [pc, #328]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002528 <MX_GPIO_Init+0x218>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|SPI4_SoftNSS_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	2118      	movs	r1, #24
 800240a:	4848      	ldr	r0, [pc, #288]	@ (800252c <MX_GPIO_Init+0x21c>)
 800240c:	f002 fc20 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002416:	4846      	ldr	r0, [pc, #280]	@ (8002530 <MX_GPIO_Init+0x220>)
 8002418:	f002 fc1a 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800241c:	2200      	movs	r2, #0
 800241e:	f240 413b 	movw	r1, #1083	@ 0x43b
 8002422:	4844      	ldr	r0, [pc, #272]	@ (8002534 <MX_GPIO_Init+0x224>)
 8002424:	f002 fc14 	bl	8004c50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_SoftNSS_Pin|LED_ONBOARD_Pin, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800242e:	4842      	ldr	r0, [pc, #264]	@ (8002538 <MX_GPIO_Init+0x228>)
 8002430:	f002 fc0e 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ADS_RESET_Pin|ADS_START_Pin, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	2114      	movs	r1, #20
 8002438:	4840      	ldr	r0, [pc, #256]	@ (800253c <MX_GPIO_Init+0x22c>)
 800243a:	f002 fc09 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_15, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002444:	483d      	ldr	r0, [pc, #244]	@ (800253c <MX_GPIO_Init+0x22c>)
 8002446:	f002 fc03 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8002450:	483b      	ldr	r0, [pc, #236]	@ (8002540 <MX_GPIO_Init+0x230>)
 8002452:	f002 fbfd 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 SPI4_SoftNSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPI4_SoftNSS_Pin;
 8002456:	2318      	movs	r3, #24
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245a:	2301      	movs	r3, #1
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800246a:	4619      	mov	r1, r3
 800246c:	482f      	ldr	r0, [pc, #188]	@ (800252c <MX_GPIO_Init+0x21c>)
 800246e:	f002 fa43 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002472:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002478:	2301      	movs	r3, #1
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002488:	4619      	mov	r1, r3
 800248a:	4829      	ldr	r0, [pc, #164]	@ (8002530 <MX_GPIO_Init+0x220>)
 800248c:	f002 fa34 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF3 PF4
                           PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002490:	f240 433b 	movw	r3, #1083	@ 0x43b
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a6:	4619      	mov	r1, r3
 80024a8:	4822      	ldr	r0, [pc, #136]	@ (8002534 <MX_GPIO_Init+0x224>)
 80024aa:	f002 fa25 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SoftNSS_Pin LED_ONBOARD_Pin */
  GPIO_InitStruct.Pin = SPI2_SoftNSS_Pin|LED_ONBOARD_Pin;
 80024ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c4:	4619      	mov	r1, r3
 80024c6:	481c      	ldr	r0, [pc, #112]	@ (8002538 <MX_GPIO_Init+0x228>)
 80024c8:	f002 fa16 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADS_RESET_Pin ADS_START_Pin PG7 PG15 */
  GPIO_InitStruct.Pin = ADS_RESET_Pin|ADS_START_Pin|GPIO_PIN_7|GPIO_PIN_15;
 80024cc:	f248 0394 	movw	r3, #32916	@ 0x8094
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d2:	2301      	movs	r3, #1
 80024d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e2:	4619      	mov	r1, r3
 80024e4:	4815      	ldr	r0, [pc, #84]	@ (800253c <MX_GPIO_Init+0x22c>)
 80024e6:	f002 fa07 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024ea:	2308      	movs	r3, #8
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024fa:	4619      	mov	r1, r3
 80024fc:	480f      	ldr	r0, [pc, #60]	@ (800253c <MX_GPIO_Init+0x22c>)
 80024fe:	f002 f9fb 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002502:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2301      	movs	r3, #1
 800250a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	4809      	ldr	r0, [pc, #36]	@ (8002540 <MX_GPIO_Init+0x230>)
 800251c:	f002 f9ec 	bl	80048f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002520:	bf00      	nop
 8002522:	3738      	adds	r7, #56	@ 0x38
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	40021000 	.word	0x40021000
 8002530:	40020800 	.word	0x40020800
 8002534:	40021400 	.word	0x40021400
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021800 	.word	0x40021800
 8002540:	40020400 	.word	0x40020400

08002544 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(osWaitForever);
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f004 ff25 	bl	800739e <osDelay>
 8002554:	e7fa      	b.n	800254c <StartDefaultTask+0x8>
	...

08002558 <logTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_logTaskEntry */
void logTaskEntry(void *argument)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN logTaskEntry */

	BusNode_Init();
 8002560:	f7fe fce0 	bl	8000f24 <BusNode_Init>

	HAL_GPIO_WritePin(SPI2_SoftNSS_GPIO_Port, SPI2_SoftNSS_Pin, GPIO_PIN_SET);
 8002564:	2201      	movs	r2, #1
 8002566:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800256a:	4805      	ldr	r0, [pc, #20]	@ (8002580 <logTaskEntry+0x28>)
 800256c:	f002 fb70 	bl	8004c50 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {
		BusNode_RunLoop();
 8002570:	f7fe fdaa 	bl	80010c8 <BusNode_RunLoop>
		osDelay(1);
 8002574:	2001      	movs	r0, #1
 8002576:	f004 ff12 	bl	800739e <osDelay>
		BusNode_RunLoop();
 800257a:	bf00      	nop
 800257c:	e7f8      	b.n	8002570 <logTaskEntry+0x18>
 800257e:	bf00      	nop
 8002580:	40020c00 	.word	0x40020c00

08002584 <adcReadTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_adcReadTaskEntry */
void adcReadTaskEntry(void *argument)
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adcReadTaskEntry */
	/* Infinite loop */

	// Initialize ADC readings array
	memset(adcReadings, 0, sizeof(adcReadings));
 800258c:	2218      	movs	r2, #24
 800258e:	2100      	movs	r1, #0
 8002590:	4824      	ldr	r0, [pc, #144]	@ (8002624 <adcReadTaskEntry+0xa0>)
 8002592:	f008 fb85 	bl	800aca0 <memset>
	
	// Use static buffer to avoid stack issues
	static uint16_t adcBuf[12] = { 0 };
	
	// Start ADC with DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 8002596:	220c      	movs	r2, #12
 8002598:	4923      	ldr	r1, [pc, #140]	@ (8002628 <adcReadTaskEntry+0xa4>)
 800259a:	4824      	ldr	r0, [pc, #144]	@ (800262c <adcReadTaskEntry+0xa8>)
 800259c:	f001 f8b8 	bl	8003710 <HAL_ADC_Start_DMA>
	
	// Variables for timing
	uint32_t last_adc_update = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
	const uint32_t ADC_UPDATE_INTERVAL = 500; // 500ms interval for ADC updates
 80025a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80025a8:	613b      	str	r3, [r7, #16]
	
	for (;;) {
		uint32_t current_tick = osKernelGetTickCount();
 80025aa:	f004 fe51 	bl	8007250 <osKernelGetTickCount>
 80025ae:	60f8      	str	r0, [r7, #12]
		
		// Check if ADC conversion is complete
		if (isADCFinished == 1) {
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <adcReadTaskEntry+0xac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d121      	bne.n	80025fc <adcReadTaskEntry+0x78>
			isADCFinished = 0;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <adcReadTaskEntry+0xac>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
			
			// Acquire mutex before updating shared data
			if (osMutexAcquire(adcBufReadMutexHandle, 100) == osOK) {
 80025be:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <adcReadTaskEntry+0xb0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2164      	movs	r1, #100	@ 0x64
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 ff8b 	bl	80074e0 <osMutexAcquire>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d110      	bne.n	80025f2 <adcReadTaskEntry+0x6e>
				// Copy ADC readings to shared buffer
				memcpy(adcReadings, adcBuf, sizeof(adcReadings));
 80025d0:	4a14      	ldr	r2, [pc, #80]	@ (8002624 <adcReadTaskEntry+0xa0>)
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <adcReadTaskEntry+0xa4>)
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025e0:	e884 0003 	stmia.w	r4, {r0, r1}
				osMutexRelease(adcBufReadMutexHandle);
 80025e4:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <adcReadTaskEntry+0xb0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f004 ffc4 	bl	8007576 <osMutexRelease>
				
				// Update timestamp
				last_adc_update = current_tick;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	617b      	str	r3, [r7, #20]
			}
			
			// Restart ADC conversion
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 80025f2:	220c      	movs	r2, #12
 80025f4:	490c      	ldr	r1, [pc, #48]	@ (8002628 <adcReadTaskEntry+0xa4>)
 80025f6:	480d      	ldr	r0, [pc, #52]	@ (800262c <adcReadTaskEntry+0xa8>)
 80025f8:	f001 f88a 	bl	8003710 <HAL_ADC_Start_DMA>
		}
		
		// If it's been too long since the last update, force a new conversion
		if (current_tick - last_adc_update > ADC_UPDATE_INTERVAL) {
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d209      	bcs.n	800261c <adcReadTaskEntry+0x98>
			// Stop any ongoing conversion
			HAL_ADC_Stop_DMA(&hadc1);
 8002608:	4808      	ldr	r0, [pc, #32]	@ (800262c <adcReadTaskEntry+0xa8>)
 800260a:	f001 f995 	bl	8003938 <HAL_ADC_Stop_DMA>
			
			// Restart ADC conversion
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 800260e:	220c      	movs	r2, #12
 8002610:	4905      	ldr	r1, [pc, #20]	@ (8002628 <adcReadTaskEntry+0xa4>)
 8002612:	4806      	ldr	r0, [pc, #24]	@ (800262c <adcReadTaskEntry+0xa8>)
 8002614:	f001 f87c 	bl	8003710 <HAL_ADC_Start_DMA>
			
			// Update timestamp to prevent multiple forced conversions
			last_adc_update = current_tick;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	617b      	str	r3, [r7, #20]
		}
		
		// Short delay to yield to other tasks
		osDelay(20);
 800261c:	2014      	movs	r0, #20
 800261e:	f004 febe 	bl	800739e <osDelay>
	for (;;) {
 8002622:	e7c2      	b.n	80025aa <adcReadTaskEntry+0x26>
 8002624:	200029b4 	.word	0x200029b4
 8002628:	200029e8 	.word	0x200029e8
 800262c:	200021f4 	.word	0x200021f4
 8002630:	200029e4 	.word	0x200029e4
 8002634:	200029ac 	.word	0x200029ac

08002638 <adsTaskEntry>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
/* USER CODE END Header_adsTaskEntry */
void adsTaskEntry(void *argument)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	@ 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adsTaskEntry */
	/* Infinite loop */
	
	// Initialize the external ADC
	ADS124S08 adc = { .hspi = &hspi4, .nss_pin = SPI4_SoftNSS_Pin, .nss_port = GPIOE};
 8002640:	4a26      	ldr	r2, [pc, #152]	@ (80026dc <adsTaskEntry+0xa4>)
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	ca07      	ldmia	r2, {r0, r1, r2}
 8002648:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ADS124S08_Init(&adc);
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ff6b 	bl	800052c <ADS124S08_Init>
	
	// Set initial channel
	ADS124S08_SetInputChannel(&adc, 0, 13);
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	220d      	movs	r2, #13
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe f822 	bl	80006a8 <ADS124S08_SetInputChannel>
	
	// Start conversion
	ADS124S08_StartConversion(&adc);
 8002664:	f107 0308 	add.w	r3, r7, #8
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ffbc 	bl	80005e6 <ADS124S08_StartConversion>
	
	// Variables for timing
	uint32_t last_update = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
	const uint32_t UPDATE_INTERVAL = 500; // 500ms interval for updates
 8002672:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002676:	61fb      	str	r3, [r7, #28]
	
	for (;;) {
		uint32_t current_tick = osKernelGetTickCount();
 8002678:	f004 fdea 	bl	8007250 <osKernelGetTickCount>
 800267c:	61b8      	str	r0, [r7, #24]
		
		// Only update readings at the specified interval
		if (current_tick - last_update >= UPDATE_INTERVAL) {
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	429a      	cmp	r2, r3
 8002688:	d823      	bhi.n	80026d2 <adsTaskEntry+0x9a>
			// Read all channels
			for (size_t i = 0; i < 11; i++) {
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	e01b      	b.n	80026c8 <adsTaskEntry+0x90>
				// Set channel
				ADS124S08_SetInputChannel(&adc, i, 12);
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	b2d9      	uxtb	r1, r3
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	220c      	movs	r2, #12
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe f804 	bl	80006a8 <ADS124S08_SetInputChannel>
				
				// Read data and shift right by 8 bits (to get 16-bit value)
				int32_t reading = ADS124S08_ReadData(&adc) >> 8;
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe f843 	bl	8000730 <ADS124S08_ReadData>
 80026aa:	4603      	mov	r3, r0
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	617b      	str	r3, [r7, #20]
				
				// Store reading
				externalADCReadings[i] = reading;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	b299      	uxth	r1, r3
 80026b4:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <adsTaskEntry+0xa8>)
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				
				// Small delay between channel readings to avoid SPI conflicts
				osDelay(5);
 80026bc:	2005      	movs	r0, #5
 80026be:	f004 fe6e 	bl	800739e <osDelay>
			for (size_t i = 0; i < 11; i++) {
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	3301      	adds	r3, #1
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2b0a      	cmp	r3, #10
 80026cc:	d9e0      	bls.n	8002690 <adsTaskEntry+0x58>
			}
			
			// Update timestamp
			last_update = current_tick;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		
		// Yield to other tasks
		osDelay(20);
 80026d2:	2014      	movs	r0, #20
 80026d4:	f004 fe63 	bl	800739e <osDelay>
	for (;;) {
 80026d8:	e7ce      	b.n	8002678 <adsTaskEntry+0x40>
 80026da:	bf00      	nop
 80026dc:	0800af18 	.word	0x0800af18
 80026e0:	200029cc 	.word	0x200029cc

080026e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80026f6:	f000 ff83 	bl	8003600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40001000 	.word	0x40001000

08002708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800270c:	b672      	cpsid	i
}
 800270e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <Error_Handler+0x8>

08002714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <HAL_MspInit+0x54>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	4a11      	ldr	r2, [pc, #68]	@ (8002768 <HAL_MspInit+0x54>)
 8002724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002728:	6453      	str	r3, [r2, #68]	@ 0x44
 800272a:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_MspInit+0x54>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_MspInit+0x54>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <HAL_MspInit+0x54>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	@ 0x40
 8002746:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_MspInit+0x54>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	210f      	movs	r1, #15
 8002756:	f06f 0001 	mvn.w	r0, #1
 800275a:	f001 fcc3 	bl	80040e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	@ 0x30
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a49      	ldr	r2, [pc, #292]	@ (80028b0 <HAL_ADC_MspInit+0x144>)
 800278a:	4293      	cmp	r3, r2
 800278c:	f040 808b 	bne.w	80028a6 <HAL_ADC_MspInit+0x13a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	4b47      	ldr	r3, [pc, #284]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	4a46      	ldr	r2, [pc, #280]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279e:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a0:	4b44      	ldr	r3, [pc, #272]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	4b40      	ldr	r3, [pc, #256]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	4a3f      	ldr	r2, [pc, #252]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80027bc:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	4a38      	ldr	r2, [pc, #224]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	4b32      	ldr	r3, [pc, #200]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	4a31      	ldr	r2, [pc, #196]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f4:	4b2f      	ldr	r3, [pc, #188]	@ (80028b4 <HAL_ADC_MspInit+0x148>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002800:	233f      	movs	r3, #63	@ 0x3f
 8002802:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002804:	2303      	movs	r3, #3
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	4619      	mov	r1, r3
 8002812:	4829      	ldr	r0, [pc, #164]	@ (80028b8 <HAL_ADC_MspInit+0x14c>)
 8002814:	f002 f870 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002818:	230f      	movs	r3, #15
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281c:	2303      	movs	r3, #3
 800281e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	4824      	ldr	r0, [pc, #144]	@ (80028bc <HAL_ADC_MspInit+0x150>)
 800282c:	f002 f864 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002830:	2303      	movs	r3, #3
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002834:	2303      	movs	r3, #3
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	4619      	mov	r1, r3
 8002842:	481f      	ldr	r0, [pc, #124]	@ (80028c0 <HAL_ADC_MspInit+0x154>)
 8002844:	f002 f858 	bl	80048f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002848:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 800284a:	4a1f      	ldr	r2, [pc, #124]	@ (80028c8 <HAL_ADC_MspInit+0x15c>)
 800284c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800284e:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 8002850:	2200      	movs	r2, #0
 8002852:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800285a:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 800285c:	2200      	movs	r2, #0
 800285e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002860:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 8002862:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002866:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 800286a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800286e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 8002872:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002876:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 8002886:	2200      	movs	r2, #0
 8002888:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800288a:	480e      	ldr	r0, [pc, #56]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 800288c:	f001 fc54 	bl	8004138 <HAL_DMA_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8002896:	f7ff ff37 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 800289e:	639a      	str	r2, [r3, #56]	@ 0x38
 80028a0:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <HAL_ADC_MspInit+0x158>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028a6:	bf00      	nop
 80028a8:	3730      	adds	r7, #48	@ 0x30
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40012000 	.word	0x40012000
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020000 	.word	0x40020000
 80028c0:	40020400 	.word	0x40020400
 80028c4:	2000223c 	.word	0x2000223c
 80028c8:	40026410 	.word	0x40026410

080028cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b092      	sub	sp, #72	@ 0x48
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a8d      	ldr	r2, [pc, #564]	@ (8002b20 <HAL_SPI_MspInit+0x254>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d12c      	bne.n	8002948 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a8b      	ldr	r2, [pc, #556]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80028f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fe:	4b89      	ldr	r3, [pc, #548]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002906:	633b      	str	r3, [r7, #48]	@ 0x30
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800290e:	4b85      	ldr	r3, [pc, #532]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a84      	ldr	r2, [pc, #528]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002926:	23f0      	movs	r3, #240	@ 0xf0
 8002928:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002936:	2305      	movs	r3, #5
 8002938:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800293e:	4619      	mov	r1, r3
 8002940:	4879      	ldr	r0, [pc, #484]	@ (8002b28 <HAL_SPI_MspInit+0x25c>)
 8002942:	f001 ffd9 	bl	80048f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002946:	e0e7      	b.n	8002b18 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a77      	ldr	r2, [pc, #476]	@ (8002b2c <HAL_SPI_MspInit+0x260>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d12d      	bne.n	80029ae <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002956:	4b73      	ldr	r3, [pc, #460]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	4a72      	ldr	r2, [pc, #456]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002960:	6413      	str	r3, [r2, #64]	@ 0x40
 8002962:	4b70      	ldr	r3, [pc, #448]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
 8002972:	4b6c      	ldr	r3, [pc, #432]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	4a6b      	ldr	r2, [pc, #428]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	6313      	str	r3, [r2, #48]	@ 0x30
 800297e:	4b69      	ldr	r3, [pc, #420]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800298a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800298e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002998:	2303      	movs	r3, #3
 800299a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800299c:	2305      	movs	r3, #5
 800299e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029a4:	4619      	mov	r1, r3
 80029a6:	4862      	ldr	r0, [pc, #392]	@ (8002b30 <HAL_SPI_MspInit+0x264>)
 80029a8:	f001 ffa6 	bl	80048f8 <HAL_GPIO_Init>
}
 80029ac:	e0b4      	b.n	8002b18 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI3)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a60      	ldr	r2, [pc, #384]	@ (8002b34 <HAL_SPI_MspInit+0x268>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d14b      	bne.n	8002a50 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	4b59      	ldr	r3, [pc, #356]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	4a58      	ldr	r2, [pc, #352]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c8:	4b56      	ldr	r3, [pc, #344]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	4b52      	ldr	r3, [pc, #328]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	4a51      	ldr	r2, [pc, #324]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a00:	4b48      	ldr	r3, [pc, #288]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a1e:	2306      	movs	r3, #6
 8002a20:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a26:	4619      	mov	r1, r3
 8002a28:	483f      	ldr	r0, [pc, #252]	@ (8002b28 <HAL_SPI_MspInit+0x25c>)
 8002a2a:	f001 ff65 	bl	80048f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a2e:	2338      	movs	r3, #56	@ 0x38
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a3e:	2306      	movs	r3, #6
 8002a40:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a46:	4619      	mov	r1, r3
 8002a48:	4839      	ldr	r0, [pc, #228]	@ (8002b30 <HAL_SPI_MspInit+0x264>)
 8002a4a:	f001 ff55 	bl	80048f8 <HAL_GPIO_Init>
}
 8002a4e:	e063      	b.n	8002b18 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI4)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a38      	ldr	r2, [pc, #224]	@ (8002b38 <HAL_SPI_MspInit+0x26c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d12c      	bne.n	8002ab4 <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	4a30      	ldr	r2, [pc, #192]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002a64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a29      	ldr	r2, [pc, #164]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002a80:	f043 0310 	orr.w	r3, r3, #16
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002a92:	2364      	movs	r3, #100	@ 0x64
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4823      	ldr	r0, [pc, #140]	@ (8002b3c <HAL_SPI_MspInit+0x270>)
 8002aae:	f001 ff23 	bl	80048f8 <HAL_GPIO_Init>
}
 8002ab2:	e031      	b.n	8002b18 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI5)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a21      	ldr	r2, [pc, #132]	@ (8002b40 <HAL_SPI_MspInit+0x274>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d12c      	bne.n	8002b18 <HAL_SPI_MspInit+0x24c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	4a17      	ldr	r2, [pc, #92]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	4a10      	ldr	r2, [pc, #64]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002ae4:	f043 0320 	orr.w	r3, r3, #32
 8002ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aea:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <HAL_SPI_MspInit+0x258>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002af6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002b08:	2305      	movs	r3, #5
 8002b0a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b10:	4619      	mov	r1, r3
 8002b12:	480c      	ldr	r0, [pc, #48]	@ (8002b44 <HAL_SPI_MspInit+0x278>)
 8002b14:	f001 fef0 	bl	80048f8 <HAL_GPIO_Init>
}
 8002b18:	bf00      	nop
 8002b1a:	3748      	adds	r7, #72	@ 0x48
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40013000 	.word	0x40013000
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40003800 	.word	0x40003800
 8002b30:	40020400 	.word	0x40020400
 8002b34:	40003c00 	.word	0x40003c00
 8002b38:	40013400 	.word	0x40013400
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40015000 	.word	0x40015000
 8002b44:	40021400 	.word	0x40021400

08002b48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b098      	sub	sp, #96	@ 0x60
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6f      	ldr	r2, [pc, #444]	@ (8002d24 <HAL_UART_MspInit+0x1dc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d15b      	bne.n	8002c22 <HAL_UART_MspInit+0xda>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	4a6d      	ldr	r2, [pc, #436]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002b74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b8a:	4b67      	ldr	r3, [pc, #412]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a66      	ldr	r2, [pc, #408]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b64      	ldr	r3, [pc, #400]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ba2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	485b      	ldr	r0, [pc, #364]	@ (8002d2c <HAL_UART_MspInit+0x1e4>)
 8002bc0:	f001 fe9a 	bl	80048f8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d34 <HAL_UART_MspInit+0x1ec>)
 8002bc8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002bca:	4b59      	ldr	r3, [pc, #356]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002bcc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bd0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bd2:	4b57      	ldr	r3, [pc, #348]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd8:	4b55      	ldr	r3, [pc, #340]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bde:	4b54      	ldr	r3, [pc, #336]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002be0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002be4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be6:	4b52      	ldr	r3, [pc, #328]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bec:	4b50      	ldr	r3, [pc, #320]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002c04:	484a      	ldr	r0, [pc, #296]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002c06:	f001 fa97 	bl	8004138 <HAL_DMA_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002c10:	f7ff fd7a 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a46      	ldr	r2, [pc, #280]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002c18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c1a:	4a45      	ldr	r2, [pc, #276]	@ (8002d30 <HAL_UART_MspInit+0x1e8>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c20:	e2ec      	b.n	80031fc <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==UART5)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a44      	ldr	r2, [pc, #272]	@ (8002d38 <HAL_UART_MspInit+0x1f0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	f040 808d 	bne.w	8002d48 <HAL_UART_MspInit+0x200>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c32:	4b3d      	ldr	r3, [pc, #244]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	4a3c      	ldr	r2, [pc, #240]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c4e:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	4a35      	ldr	r2, [pc, #212]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5a:	4b33      	ldr	r3, [pc, #204]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c70:	f043 0308 	orr.w	r3, r3, #8
 8002c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c76:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <HAL_UART_MspInit+0x1e0>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c94:	2308      	movs	r3, #8
 8002c96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4823      	ldr	r0, [pc, #140]	@ (8002d2c <HAL_UART_MspInit+0x1e4>)
 8002ca0:	f001 fe2a 	bl	80048f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	481f      	ldr	r0, [pc, #124]	@ (8002d3c <HAL_UART_MspInit+0x1f4>)
 8002cc0:	f001 fe1a 	bl	80048f8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d44 <HAL_UART_MspInit+0x1fc>)
 8002cc8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002cca:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002ccc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cd0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cde:	4b18      	ldr	r3, [pc, #96]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002ce0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ce4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cec:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002d04:	480e      	ldr	r0, [pc, #56]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002d06:	f001 fa17 	bl	8004138 <HAL_DMA_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8002d10:	f7ff fcfa 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002d18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d1a:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_UART_MspInit+0x1f8>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d20:	e26c      	b.n	80031fc <HAL_UART_MspInit+0x6b4>
 8002d22:	bf00      	nop
 8002d24:	40004c00 	.word	0x40004c00
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	20002694 	.word	0x20002694
 8002d34:	40026040 	.word	0x40026040
 8002d38:	40005000 	.word	0x40005000
 8002d3c:	40020c00 	.word	0x40020c00
 8002d40:	200026f4 	.word	0x200026f4
 8002d44:	40026010 	.word	0x40026010
  else if(huart->Instance==UART7)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a8f      	ldr	r2, [pc, #572]	@ (8002f8c <HAL_UART_MspInit+0x444>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d15b      	bne.n	8002e0a <HAL_UART_MspInit+0x2c2>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d56:	4b8e      	ldr	r3, [pc, #568]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	4a8d      	ldr	r2, [pc, #564]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002d5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d62:	4b8b      	ldr	r3, [pc, #556]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d72:	4b87      	ldr	r3, [pc, #540]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	4a86      	ldr	r2, [pc, #536]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002d78:	f043 0310 	orr.w	r3, r3, #16
 8002d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7e:	4b84      	ldr	r3, [pc, #528]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002d8a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002da0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002da4:	4619      	mov	r1, r3
 8002da6:	487b      	ldr	r0, [pc, #492]	@ (8002f94 <HAL_UART_MspInit+0x44c>)
 8002da8:	f001 fda6 	bl	80048f8 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002dac:	4b7a      	ldr	r3, [pc, #488]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002dae:	4a7b      	ldr	r2, [pc, #492]	@ (8002f9c <HAL_UART_MspInit+0x454>)
 8002db0:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8002db2:	4b79      	ldr	r3, [pc, #484]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002db4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002db8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dba:	4b77      	ldr	r3, [pc, #476]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc0:	4b75      	ldr	r3, [pc, #468]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc6:	4b74      	ldr	r3, [pc, #464]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dcc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dce:	4b72      	ldr	r3, [pc, #456]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd4:	4b70      	ldr	r3, [pc, #448]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8002dda:	4b6f      	ldr	r3, [pc, #444]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002de0:	4b6d      	ldr	r3, [pc, #436]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de6:	4b6c      	ldr	r3, [pc, #432]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002dec:	486a      	ldr	r0, [pc, #424]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002dee:	f001 f9a3 	bl	8004138 <HAL_DMA_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8002df8:	f7ff fc86 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a66      	ldr	r2, [pc, #408]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002e00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e02:	4a65      	ldr	r2, [pc, #404]	@ (8002f98 <HAL_UART_MspInit+0x450>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002e08:	e1f8      	b.n	80031fc <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==UART8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a64      	ldr	r2, [pc, #400]	@ (8002fa0 <HAL_UART_MspInit+0x458>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d15a      	bne.n	8002eca <HAL_UART_MspInit+0x382>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002e14:	2300      	movs	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e18:	4b5d      	ldr	r3, [pc, #372]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002e1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e24:	4b5a      	ldr	r3, [pc, #360]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e30:	2300      	movs	r3, #0
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e34:	4b56      	ldr	r3, [pc, #344]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e38:	4a55      	ldr	r2, [pc, #340]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002e3a:	f043 0310 	orr.w	r3, r3, #16
 8002e3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e40:	4b53      	ldr	r3, [pc, #332]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e64:	4619      	mov	r1, r3
 8002e66:	484b      	ldr	r0, [pc, #300]	@ (8002f94 <HAL_UART_MspInit+0x44c>)
 8002e68:	f001 fd46 	bl	80048f8 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002e6e:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa8 <HAL_UART_MspInit+0x460>)
 8002e70:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8002e72:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002e74:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002e78:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e80:	4b48      	ldr	r3, [pc, #288]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e86:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002e88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e8c:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8e:	4b45      	ldr	r3, [pc, #276]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e94:	4b43      	ldr	r3, [pc, #268]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002e9a:	4b42      	ldr	r3, [pc, #264]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea0:	4b40      	ldr	r3, [pc, #256]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002eac:	483d      	ldr	r0, [pc, #244]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002eae:	f001 f943 	bl	8004138 <HAL_DMA_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_UART_MspInit+0x374>
      Error_Handler();
 8002eb8:	f7ff fc26 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a39      	ldr	r2, [pc, #228]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ec2:	4a38      	ldr	r2, [pc, #224]	@ (8002fa4 <HAL_UART_MspInit+0x45c>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ec8:	e198      	b.n	80031fc <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a37      	ldr	r2, [pc, #220]	@ (8002fac <HAL_UART_MspInit+0x464>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d173      	bne.n	8002fbc <HAL_UART_MspInit+0x474>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	4a2c      	ldr	r2, [pc, #176]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002ede:	f043 0310 	orr.w	r3, r3, #16
 8002ee2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	623b      	str	r3, [r7, #32]
 8002ef4:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	4a25      	ldr	r2, [pc, #148]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f00:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_UART_MspInit+0x448>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	623b      	str	r3, [r7, #32]
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f0c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f1e:	2307      	movs	r3, #7
 8002f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f26:	4619      	mov	r1, r3
 8002f28:	4821      	ldr	r0, [pc, #132]	@ (8002fb0 <HAL_UART_MspInit+0x468>)
 8002f2a:	f001 fce5 	bl	80048f8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f30:	4a21      	ldr	r2, [pc, #132]	@ (8002fb8 <HAL_UART_MspInit+0x470>)
 8002f32:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002f34:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f42:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f48:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f50:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f56:	4b17      	ldr	r3, [pc, #92]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f5c:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f62:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f68:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f6e:	4811      	ldr	r0, [pc, #68]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f70:	f001 f8e2 	bl	8004138 <HAL_DMA_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_UART_MspInit+0x436>
      Error_Handler();
 8002f7a:	f7ff fbc5 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f84:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <HAL_UART_MspInit+0x46c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002f8a:	e137      	b.n	80031fc <HAL_UART_MspInit+0x6b4>
 8002f8c:	40007800 	.word	0x40007800
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40021000 	.word	0x40021000
 8002f98:	20002754 	.word	0x20002754
 8002f9c:	40026058 	.word	0x40026058
 8002fa0:	40007c00 	.word	0x40007c00
 8002fa4:	200027b4 	.word	0x200027b4
 8002fa8:	400260a0 	.word	0x400260a0
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	20002814 	.word	0x20002814
 8002fb8:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a90      	ldr	r2, [pc, #576]	@ (8003204 <HAL_UART_MspInit+0x6bc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d15a      	bne.n	800307c <HAL_UART_MspInit+0x534>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	4b8f      	ldr	r3, [pc, #572]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	4a8e      	ldr	r2, [pc, #568]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8002fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd6:	4b8c      	ldr	r3, [pc, #560]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	4b88      	ldr	r3, [pc, #544]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	4a87      	ldr	r2, [pc, #540]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff2:	4b85      	ldr	r3, [pc, #532]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002ffe:	2360      	movs	r3, #96	@ 0x60
 8003000:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800300e:	2307      	movs	r3, #7
 8003010:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003012:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003016:	4619      	mov	r1, r3
 8003018:	487c      	ldr	r0, [pc, #496]	@ (800320c <HAL_UART_MspInit+0x6c4>)
 800301a:	f001 fc6d 	bl	80048f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800301e:	4b7c      	ldr	r3, [pc, #496]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003020:	4a7c      	ldr	r2, [pc, #496]	@ (8003214 <HAL_UART_MspInit+0x6cc>)
 8003022:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003024:	4b7a      	ldr	r3, [pc, #488]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003026:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800302a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800302c:	4b78      	ldr	r3, [pc, #480]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003032:	4b77      	ldr	r3, [pc, #476]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003034:	2200      	movs	r2, #0
 8003036:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003038:	4b75      	ldr	r3, [pc, #468]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 800303a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800303e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003040:	4b73      	ldr	r3, [pc, #460]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003046:	4b72      	ldr	r3, [pc, #456]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800304c:	4b70      	ldr	r3, [pc, #448]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003052:	4b6f      	ldr	r3, [pc, #444]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003054:	2200      	movs	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003058:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800305e:	486c      	ldr	r0, [pc, #432]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003060:	f001 f86a 	bl	8004138 <HAL_DMA_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_UART_MspInit+0x526>
      Error_Handler();
 800306a:	f7ff fb4d 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a67      	ldr	r2, [pc, #412]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003072:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003074:	4a66      	ldr	r2, [pc, #408]	@ (8003210 <HAL_UART_MspInit+0x6c8>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800307a:	e0bf      	b.n	80031fc <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a65      	ldr	r2, [pc, #404]	@ (8003218 <HAL_UART_MspInit+0x6d0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d15b      	bne.n	800313e <HAL_UART_MspInit+0x5f6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	4b5f      	ldr	r3, [pc, #380]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	4a5e      	ldr	r2, [pc, #376]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003094:	6413      	str	r3, [r2, #64]	@ 0x40
 8003096:	4b5c      	ldr	r3, [pc, #368]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b58      	ldr	r3, [pc, #352]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	4a57      	ldr	r2, [pc, #348]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b2:	4b55      	ldr	r3, [pc, #340]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80030c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030d0:	2307      	movs	r3, #7
 80030d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80030d8:	4619      	mov	r1, r3
 80030da:	4850      	ldr	r0, [pc, #320]	@ (800321c <HAL_UART_MspInit+0x6d4>)
 80030dc:	f001 fc0c 	bl	80048f8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80030e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 80030e2:	4a50      	ldr	r2, [pc, #320]	@ (8003224 <HAL_UART_MspInit+0x6dc>)
 80030e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80030e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 80030e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030fa:	4b49      	ldr	r3, [pc, #292]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 80030fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003100:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003102:	4b47      	ldr	r3, [pc, #284]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 8003104:	2200      	movs	r2, #0
 8003106:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003108:	4b45      	ldr	r3, [pc, #276]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 800310a:	2200      	movs	r2, #0
 800310c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800310e:	4b44      	ldr	r3, [pc, #272]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 8003110:	2200      	movs	r2, #0
 8003112:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003114:	4b42      	ldr	r3, [pc, #264]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 8003116:	2200      	movs	r2, #0
 8003118:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311a:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 800311c:	2200      	movs	r2, #0
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003120:	483f      	ldr	r0, [pc, #252]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 8003122:	f001 f809 	bl	8004138 <HAL_DMA_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_MspInit+0x5e8>
      Error_Handler();
 800312c:	f7ff faec 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a3b      	ldr	r2, [pc, #236]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 8003134:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003136:	4a3a      	ldr	r2, [pc, #232]	@ (8003220 <HAL_UART_MspInit+0x6d8>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800313c:	e05e      	b.n	80031fc <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART6)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a39      	ldr	r2, [pc, #228]	@ (8003228 <HAL_UART_MspInit+0x6e0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d159      	bne.n	80031fc <HAL_UART_MspInit+0x6b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	4b2e      	ldr	r3, [pc, #184]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 800314e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003150:	4a2d      	ldr	r2, [pc, #180]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8003152:	f043 0320 	orr.w	r3, r3, #32
 8003156:	6453      	str	r3, [r2, #68]	@ 0x44
 8003158:	4b2b      	ldr	r3, [pc, #172]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 800315a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	4b27      	ldr	r3, [pc, #156]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	4a26      	ldr	r2, [pc, #152]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	6313      	str	r3, [r2, #48]	@ 0x30
 8003174:	4b24      	ldr	r3, [pc, #144]	@ (8003208 <HAL_UART_MspInit+0x6c0>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003180:	23c0      	movs	r3, #192	@ 0xc0
 8003182:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318c:	2303      	movs	r3, #3
 800318e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003190:	2308      	movs	r3, #8
 8003192:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003194:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003198:	4619      	mov	r1, r3
 800319a:	4824      	ldr	r0, [pc, #144]	@ (800322c <HAL_UART_MspInit+0x6e4>)
 800319c:	f001 fbac 	bl	80048f8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80031a0:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031a2:	4a24      	ldr	r2, [pc, #144]	@ (8003234 <HAL_UART_MspInit+0x6ec>)
 80031a4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80031a6:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031a8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80031ac:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ae:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031c0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031c8:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80031ce:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031d4:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031da:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031dc:	2200      	movs	r2, #0
 80031de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80031e0:	4813      	ldr	r0, [pc, #76]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031e2:	f000 ffa9 	bl	8004138 <HAL_DMA_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_UART_MspInit+0x6a8>
      Error_Handler();
 80031ec:	f7ff fa8c 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003230 <HAL_UART_MspInit+0x6e8>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80031fc:	bf00      	nop
 80031fe:	3760      	adds	r7, #96	@ 0x60
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40004400 	.word	0x40004400
 8003208:	40023800 	.word	0x40023800
 800320c:	40020c00 	.word	0x40020c00
 8003210:	20002874 	.word	0x20002874
 8003214:	40026088 	.word	0x40026088
 8003218:	40004800 	.word	0x40004800
 800321c:	40020400 	.word	0x40020400
 8003220:	200028d4 	.word	0x200028d4
 8003224:	40026028 	.word	0x40026028
 8003228:	40011400 	.word	0x40011400
 800322c:	40020800 	.word	0x40020800
 8003230:	20002934 	.word	0x20002934
 8003234:	40026428 	.word	0x40026428

08003238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08e      	sub	sp, #56	@ 0x38
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4b33      	ldr	r3, [pc, #204]	@ (800331c <HAL_InitTick+0xe4>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	4a32      	ldr	r2, [pc, #200]	@ (800331c <HAL_InitTick+0xe4>)
 8003252:	f043 0310 	orr.w	r3, r3, #16
 8003256:	6413      	str	r3, [r2, #64]	@ 0x40
 8003258:	4b30      	ldr	r3, [pc, #192]	@ (800331c <HAL_InitTick+0xe4>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003264:	f107 0210 	add.w	r2, r7, #16
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f002 f96c 	bl	800554c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800327e:	f002 f93d 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8003282:	6378      	str	r0, [r7, #52]	@ 0x34
 8003284:	e004      	b.n	8003290 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003286:	f002 f939 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 800328a:	4603      	mov	r3, r0
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003292:	4a23      	ldr	r2, [pc, #140]	@ (8003320 <HAL_InitTick+0xe8>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	3b01      	subs	r3, #1
 800329c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800329e:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <HAL_InitTick+0xec>)
 80032a0:	4a21      	ldr	r2, [pc, #132]	@ (8003328 <HAL_InitTick+0xf0>)
 80032a2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <HAL_InitTick+0xec>)
 80032a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003324 <HAL_InitTick+0xec>)
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003324 <HAL_InitTick+0xec>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <HAL_InitTick+0xec>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032be:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <HAL_InitTick+0xec>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80032c4:	4817      	ldr	r0, [pc, #92]	@ (8003324 <HAL_InitTick+0xec>)
 80032c6:	f002 ff5f 	bl	8006188 <HAL_TIM_Base_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80032d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11b      	bne.n	8003310 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80032d8:	4812      	ldr	r0, [pc, #72]	@ (8003324 <HAL_InitTick+0xec>)
 80032da:	f002 ffaf 	bl	800623c <HAL_TIM_Base_Start_IT>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80032e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032ec:	2036      	movs	r0, #54	@ 0x36
 80032ee:	f000 ff15 	bl	800411c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d808      	bhi.n	800330a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80032f8:	2200      	movs	r2, #0
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	2036      	movs	r0, #54	@ 0x36
 80032fe:	f000 fef1 	bl	80040e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <HAL_InitTick+0xf4>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	e002      	b.n	8003310 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003314:	4618      	mov	r0, r3
 8003316:	3738      	adds	r7, #56	@ 0x38
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	431bde83 	.word	0x431bde83
 8003324:	20002a00 	.word	0x20002a00
 8003328:	40001000 	.word	0x40001000
 800332c:	2000000c 	.word	0x2000000c

08003330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003334:	f002 f93c 	bl	80055b0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <NMI_Handler+0x8>

0800333c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <HardFault_Handler+0x4>

08003344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <MemManage_Handler+0x4>

0800334c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <BusFault_Handler+0x4>

08003354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <UsageFault_Handler+0x4>

0800335c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <DMA1_Stream0_IRQHandler+0x10>)
 8003372:	f001 f857 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200026f4 	.word	0x200026f4

08003380 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <DMA1_Stream1_IRQHandler+0x10>)
 8003386:	f001 f84d 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200028d4 	.word	0x200028d4

08003394 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <DMA1_Stream2_IRQHandler+0x10>)
 800339a:	f001 f843 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20002694 	.word	0x20002694

080033a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <DMA1_Stream3_IRQHandler+0x10>)
 80033ae:	f001 f839 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20002754 	.word	0x20002754

080033bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <DMA1_Stream5_IRQHandler+0x10>)
 80033c2:	f001 f82f 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20002874 	.word	0x20002874

080033d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <DMA1_Stream6_IRQHandler+0x10>)
 80033d6:	f001 f825 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200027b4 	.word	0x200027b4

080033e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <TIM6_DAC_IRQHandler+0x10>)
 80033ea:	f002 ff97 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20002a00 	.word	0x20002a00

080033f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033fc:	4802      	ldr	r0, [pc, #8]	@ (8003408 <DMA2_Stream0_IRQHandler+0x10>)
 80033fe:	f001 f811 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2000223c 	.word	0x2000223c

0800340c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003410:	4802      	ldr	r0, [pc, #8]	@ (800341c <DMA2_Stream1_IRQHandler+0x10>)
 8003412:	f001 f807 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20002934 	.word	0x20002934

08003420 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003424:	4802      	ldr	r0, [pc, #8]	@ (8003430 <DMA2_Stream2_IRQHandler+0x10>)
 8003426:	f000 fffd 	bl	8004424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20002814 	.word	0x20002814

08003434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003438:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <SystemInit+0x20>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	4a05      	ldr	r2, [pc, #20]	@ (8003454 <SystemInit+0x20>)
 8003440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003490 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800345c:	f7ff ffea 	bl	8003434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003460:	480c      	ldr	r0, [pc, #48]	@ (8003494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003462:	490d      	ldr	r1, [pc, #52]	@ (8003498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003464:	4a0d      	ldr	r2, [pc, #52]	@ (800349c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003468:	e002      	b.n	8003470 <LoopCopyDataInit>

0800346a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800346a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800346c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346e:	3304      	adds	r3, #4

08003470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003474:	d3f9      	bcc.n	800346a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003476:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003478:	4c0a      	ldr	r4, [pc, #40]	@ (80034a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800347c:	e001      	b.n	8003482 <LoopFillZerobss>

0800347e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003480:	3204      	adds	r2, #4

08003482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003484:	d3fb      	bcc.n	800347e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003486:	f007 fc71 	bl	800ad6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800348a:	f7fe fa91 	bl	80019b0 <main>
  bx  lr    
 800348e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003490:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003498:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800349c:	0800b058 	.word	0x0800b058
  ldr r2, =_sbss
 80034a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80034a4:	2000757c 	.word	0x2000757c

080034a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034a8:	e7fe      	b.n	80034a8 <ADC_IRQHandler>

080034aa <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80034b8:	b672      	cpsid	i
}
 80034ba:	bf00      	nop
 80034bc:	f7ff f924 	bl	8002708 <Error_Handler>
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7a1b      	ldrb	r3, [r3, #8]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d905      	bls.n	80034d8 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80034cc:	b672      	cpsid	i
}
 80034ce:	bf00      	nop
 80034d0:	f7ff f91a 	bl	8002708 <Error_Handler>
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7a1b      	ldrb	r3, [r3, #8]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	b2d1      	uxtb	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	7211      	strb	r1, [r2, #8]
 80034e4:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034e6:	f3ef 8211 	mrs	r2, BASEPRI
 80034ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60fa      	str	r2, [r7, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800351c:	b672      	cpsid	i
}
 800351e:	bf00      	nop
 8003520:	f7ff f8f2 	bl	8002708 <Error_Handler>
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7a1b      	ldrb	r3, [r3, #8]
 800352c:	3b01      	subs	r3, #1
 800352e:	b2da      	uxtb	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7a1b      	ldrb	r3, [r3, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d905      	bls.n	8003548 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 800353c:	b672      	cpsid	i
}
 800353e:	bf00      	nop
 8003540:	f7ff f8e2 	bl	8002708 <Error_Handler>
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	7a1b      	ldrb	r3, [r3, #8]
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003554:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800355c:	bf00      	nop
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003574:	b672      	cpsid	i
}
 8003576:	bf00      	nop
 8003578:	f7ff f8c6 	bl	8002708 <Error_Handler>
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff91 	bl	80034aa <stm32_lock_acquire>
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800359e:	b672      	cpsid	i
}
 80035a0:	bf00      	nop
 80035a2:	f7ff f8b1 	bl	8002708 <Error_Handler>
 80035a6:	bf00      	nop
 80035a8:	e7fd      	b.n	80035a6 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ffae 	bl	800350e <stm32_lock_release>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035c0:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0d      	ldr	r2, [pc, #52]	@ (80035fc <HAL_Init+0x40>)
 80035c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <HAL_Init+0x40>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	@ (80035fc <HAL_Init+0x40>)
 80035d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d8:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <HAL_Init+0x40>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a07      	ldr	r2, [pc, #28]	@ (80035fc <HAL_Init+0x40>)
 80035de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e4:	2003      	movs	r0, #3
 80035e6:	f000 fd72 	bl	80040ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ea:	200f      	movs	r0, #15
 80035ec:	f7ff fe24 	bl	8003238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035f0:	f7ff f890 	bl	8002714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023c00 	.word	0x40023c00

08003600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_IncTick+0x20>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_IncTick+0x24>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4413      	add	r3, r2
 8003610:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <HAL_IncTick+0x24>)
 8003612:	6013      	str	r3, [r2, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000010 	.word	0x20000010
 8003624:	20002a54 	.word	0x20002a54

08003628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return uwTick;
 800362c:	4b03      	ldr	r3, [pc, #12]	@ (800363c <HAL_GetTick+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20002a54 	.word	0x20002a54

08003640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7ff ffee 	bl	8003628 <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d005      	beq.n	8003666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800365a:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <HAL_Delay+0x44>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003666:	bf00      	nop
 8003668:	f7ff ffde 	bl	8003628 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	429a      	cmp	r2, r3
 8003676:	d8f7      	bhi.n	8003668 <HAL_Delay+0x28>
  {
  }
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000010 	.word	0x20000010

08003688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e033      	b.n	8003706 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff f860 	bl	800276c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036ce:	f023 0302 	bic.w	r3, r3, #2
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 facc 	bl	8003c78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80036f6:	e001      	b.n	80036fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_ADC_Start_DMA+0x22>
 800372e:	2302      	movs	r3, #2
 8003730:	e0eb      	b.n	800390a <HAL_ADC_Start_DMA+0x1fa>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d018      	beq.n	800377a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003758:	4b6e      	ldr	r3, [pc, #440]	@ (8003914 <HAL_ADC_Start_DMA+0x204>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6e      	ldr	r2, [pc, #440]	@ (8003918 <HAL_ADC_Start_DMA+0x208>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9a      	lsrs	r2, r3, #18
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800376c:	e002      	b.n	8003774 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3b01      	subs	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f9      	bne.n	800376e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003788:	d107      	bne.n	800379a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003798:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	f040 80a3 	bne.w	80038f0 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e8:	d106      	bne.n	80037f8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f023 0206 	bic.w	r2, r3, #6
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80037f6:	e002      	b.n	80037fe <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003806:	4b45      	ldr	r3, [pc, #276]	@ (800391c <HAL_ADC_Start_DMA+0x20c>)
 8003808:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	4a44      	ldr	r2, [pc, #272]	@ (8003920 <HAL_ADC_Start_DMA+0x210>)
 8003810:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	4a43      	ldr	r2, [pc, #268]	@ (8003924 <HAL_ADC_Start_DMA+0x214>)
 8003818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381e:	4a42      	ldr	r2, [pc, #264]	@ (8003928 <HAL_ADC_Start_DMA+0x218>)
 8003820:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800382a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800383a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800384a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	334c      	adds	r3, #76	@ 0x4c
 8003856:	4619      	mov	r1, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f000 fd1a 	bl	8004294 <HAL_DMA_Start_IT>
 8003860:	4603      	mov	r3, r0
 8003862:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2b00      	cmp	r3, #0
 800386e:	d12a      	bne.n	80038c6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2d      	ldr	r2, [pc, #180]	@ (800392c <HAL_ADC_Start_DMA+0x21c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d015      	beq.n	80038a6 <HAL_ADC_Start_DMA+0x196>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2c      	ldr	r2, [pc, #176]	@ (8003930 <HAL_ADC_Start_DMA+0x220>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d105      	bne.n	8003890 <HAL_ADC_Start_DMA+0x180>
 8003884:	4b25      	ldr	r3, [pc, #148]	@ (800391c <HAL_ADC_Start_DMA+0x20c>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a27      	ldr	r2, [pc, #156]	@ (8003934 <HAL_ADC_Start_DMA+0x224>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d136      	bne.n	8003908 <HAL_ADC_Start_DMA+0x1f8>
 800389a:	4b20      	ldr	r3, [pc, #128]	@ (800391c <HAL_ADC_Start_DMA+0x20c>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d130      	bne.n	8003908 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d129      	bne.n	8003908 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	e020      	b.n	8003908 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	@ (800392c <HAL_ADC_Start_DMA+0x21c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d11b      	bne.n	8003908 <HAL_ADC_Start_DMA+0x1f8>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d114      	bne.n	8003908 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	e00b      	b.n	8003908 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	f043 0210 	orr.w	r2, r3, #16
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003908:	7ffb      	ldrb	r3, [r7, #31]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000008 	.word	0x20000008
 8003918:	431bde83 	.word	0x431bde83
 800391c:	40012300 	.word	0x40012300
 8003920:	08003e71 	.word	0x08003e71
 8003924:	08003f2b 	.word	0x08003f2b
 8003928:	08003f47 	.word	0x08003f47
 800392c:	40012000 	.word	0x40012000
 8003930:	40012100 	.word	0x40012100
 8003934:	40012200 	.word	0x40012200

08003938 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_ADC_Stop_DMA+0x1a>
 800394e:	2302      	movs	r3, #2
 8003950:	e048      	b.n	80039e4 <HAL_ADC_Stop_DMA+0xac>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d130      	bne.n	80039da <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003986:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d10f      	bne.n	80039b6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fcd2 	bl	8004344 <HAL_DMA_Abort>
 80039a0:	4603      	mov	r3, r0
 80039a2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80039c4:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x1c>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e113      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x244>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b09      	cmp	r3, #9
 8003a3e:	d925      	bls.n	8003a8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68d9      	ldr	r1, [r3, #12]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	3b1e      	subs	r3, #30
 8003a56:	2207      	movs	r2, #7
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	400a      	ands	r2, r1
 8003a64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68d9      	ldr	r1, [r3, #12]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	4603      	mov	r3, r0
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4403      	add	r3, r0
 8003a7e:	3b1e      	subs	r3, #30
 8003a80:	409a      	lsls	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	e022      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6919      	ldr	r1, [r3, #16]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	400a      	ands	r2, r1
 8003aae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6919      	ldr	r1, [r3, #16]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4403      	add	r3, r0
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d824      	bhi.n	8003b24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	3b05      	subs	r3, #5
 8003aec:	221f      	movs	r2, #31
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43da      	mvns	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	400a      	ands	r2, r1
 8003afa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4618      	mov	r0, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	3b05      	subs	r3, #5
 8003b16:	fa00 f203 	lsl.w	r2, r0, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b22:	e04c      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b0c      	cmp	r3, #12
 8003b2a:	d824      	bhi.n	8003b76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3b23      	subs	r3, #35	@ 0x23
 8003b3e:	221f      	movs	r2, #31
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43da      	mvns	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	3b23      	subs	r3, #35	@ 0x23
 8003b68:	fa00 f203 	lsl.w	r2, r0, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b74:	e023      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	3b41      	subs	r3, #65	@ 0x41
 8003b88:	221f      	movs	r2, #31
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	400a      	ands	r2, r1
 8003b96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	3b41      	subs	r3, #65	@ 0x41
 8003bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bbe:	4b29      	ldr	r3, [pc, #164]	@ (8003c64 <HAL_ADC_ConfigChannel+0x250>)
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a28      	ldr	r2, [pc, #160]	@ (8003c68 <HAL_ADC_ConfigChannel+0x254>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10f      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x1d8>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b12      	cmp	r3, #18
 8003bd2:	d10b      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c68 <HAL_ADC_ConfigChannel+0x254>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d12b      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x23a>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8003c6c <HAL_ADC_ConfigChannel+0x258>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x1f4>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b11      	cmp	r3, #17
 8003c06:	d122      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a11      	ldr	r2, [pc, #68]	@ (8003c6c <HAL_ADC_ConfigChannel+0x258>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d111      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c2a:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <HAL_ADC_ConfigChannel+0x25c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a11      	ldr	r2, [pc, #68]	@ (8003c74 <HAL_ADC_ConfigChannel+0x260>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	0c9a      	lsrs	r2, r3, #18
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c40:	e002      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f9      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40012300 	.word	0x40012300
 8003c68:	40012000 	.word	0x40012000
 8003c6c:	10000012 	.word	0x10000012
 8003c70:	20000008 	.word	0x20000008
 8003c74:	431bde83 	.word	0x431bde83

08003c78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c80:	4b79      	ldr	r3, [pc, #484]	@ (8003e68 <ADC_Init+0x1f0>)
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	021a      	lsls	r2, r3, #8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	4a58      	ldr	r2, [pc, #352]	@ (8003e6c <ADC_Init+0x1f4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d022      	beq.n	8003d56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6899      	ldr	r1, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	e00f      	b.n	8003d76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d74:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0202 	bic.w	r2, r2, #2
 8003d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6899      	ldr	r1, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7e1b      	ldrb	r3, [r3, #24]
 8003d90:	005a      	lsls	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01b      	beq.n	8003ddc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003dc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	035a      	lsls	r2, r3, #13
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	e007      	b.n	8003dec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	051a      	lsls	r2, r3, #20
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e2e:	025a      	lsls	r2, r3, #9
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6899      	ldr	r1, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	029a      	lsls	r2, r3, #10
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40012300 	.word	0x40012300
 8003e6c:	0f000001 	.word	0x0f000001

08003e70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d13c      	bne.n	8003f04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d12b      	bne.n	8003efc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d127      	bne.n	8003efc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d119      	bne.n	8003efc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0220 	bic.w	r2, r2, #32
 8003ed6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7fd fd47 	bl	8001990 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f02:	e00e      	b.n	8003f22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff fd75 	bl	8003a00 <HAL_ADC_ErrorCallback>
}
 8003f16:	e004      	b.n	8003f22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fd57 	bl	80039ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2240      	movs	r2, #64	@ 0x40
 8003f58:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f043 0204 	orr.w	r2, r3, #4
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fd4a 	bl	8003a00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f84:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f90:	4013      	ands	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fa6:	4a04      	ldr	r2, [pc, #16]	@ (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	60d3      	str	r3, [r2, #12]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc0:	4b04      	ldr	r3, [pc, #16]	@ (8003fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 0307 	and.w	r3, r3, #7
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	db0b      	blt.n	8004002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	4907      	ldr	r1, [pc, #28]	@ (8004010 <__NVIC_EnableIRQ+0x38>)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8003ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	e000e100 	.word	0xe000e100

08004014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004024:	2b00      	cmp	r3, #0
 8004026:	db0a      	blt.n	800403e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	490c      	ldr	r1, [pc, #48]	@ (8004060 <__NVIC_SetPriority+0x4c>)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	0112      	lsls	r2, r2, #4
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	440b      	add	r3, r1
 8004038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800403c:	e00a      	b.n	8004054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4908      	ldr	r1, [pc, #32]	@ (8004064 <__NVIC_SetPriority+0x50>)
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	3b04      	subs	r3, #4
 800404c:	0112      	lsls	r2, r2, #4
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	440b      	add	r3, r1
 8004052:	761a      	strb	r2, [r3, #24]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000e100 	.word	0xe000e100
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	@ 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f1c3 0307 	rsb	r3, r3, #7
 8004082:	2b04      	cmp	r3, #4
 8004084:	bf28      	it	cs
 8004086:	2304      	movcs	r3, #4
 8004088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3304      	adds	r3, #4
 800408e:	2b06      	cmp	r3, #6
 8004090:	d902      	bls.n	8004098 <NVIC_EncodePriority+0x30>
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3b03      	subs	r3, #3
 8004096:	e000      	b.n	800409a <NVIC_EncodePriority+0x32>
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800409c:	f04f 32ff 	mov.w	r2, #4294967295
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	401a      	ands	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b0:	f04f 31ff 	mov.w	r1, #4294967295
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	43d9      	mvns	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	4313      	orrs	r3, r2
         );
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3724      	adds	r7, #36	@ 0x24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ff4c 	bl	8003f74 <__NVIC_SetPriorityGrouping>
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040f6:	f7ff ff61 	bl	8003fbc <__NVIC_GetPriorityGrouping>
 80040fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f7ff ffb1 	bl	8004068 <NVIC_EncodePriority>
 8004106:	4602      	mov	r2, r0
 8004108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ff80 	bl	8004014 <__NVIC_SetPriority>
}
 8004114:	bf00      	nop
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff54 	bl	8003fd8 <__NVIC_EnableIRQ>
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7ff fa70 	bl	8003628 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e099      	b.n	8004288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004174:	e00f      	b.n	8004196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004176:	f7ff fa57 	bl	8003628 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b05      	cmp	r3, #5
 8004182:	d908      	bls.n	8004196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e078      	b.n	8004288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e8      	bne.n	8004176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4b38      	ldr	r3, [pc, #224]	@ (8004290 <HAL_DMA_Init+0x158>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d107      	bne.n	8004200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	4313      	orrs	r3, r2
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	2b04      	cmp	r3, #4
 8004228:	d117      	bne.n	800425a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fadf 	bl	8004800 <DMA_CheckFifoParam>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2240      	movs	r2, #64	@ 0x40
 800424c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004256:	2301      	movs	r3, #1
 8004258:	e016      	b.n	8004288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa96 	bl	8004794 <DMA_CalcBaseAndBitshift>
 8004268:	4603      	mov	r3, r0
 800426a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	223f      	movs	r2, #63	@ 0x3f
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	f010803f 	.word	0xf010803f

08004294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_DMA_Start_IT+0x26>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e040      	b.n	800433c <HAL_DMA_Start_IT+0xa8>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d12f      	bne.n	800432e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fa28 	bl	8004738 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	223f      	movs	r2, #63	@ 0x3f
 80042ee:	409a      	lsls	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0216 	orr.w	r2, r2, #22
 8004302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0208 	orr.w	r2, r2, #8
 800431a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e005      	b.n	800433a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004352:	f7ff f969 	bl	8003628 <HAL_GetTick>
 8004356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d008      	beq.n	8004376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2280      	movs	r2, #128	@ 0x80
 8004368:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e052      	b.n	800441c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0216 	bic.w	r2, r2, #22
 8004384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <HAL_DMA_Abort+0x62>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0208 	bic.w	r2, r2, #8
 80043b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c6:	e013      	b.n	80043f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043c8:	f7ff f92e 	bl	8003628 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d90c      	bls.n	80043f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2203      	movs	r2, #3
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e015      	b.n	800441c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e4      	bne.n	80043c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004402:	223f      	movs	r2, #63	@ 0x3f
 8004404:	409a      	lsls	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004430:	4b8e      	ldr	r3, [pc, #568]	@ (800466c <HAL_DMA_IRQHandler+0x248>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a8e      	ldr	r2, [pc, #568]	@ (8004670 <HAL_DMA_IRQHandler+0x24c>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0a9b      	lsrs	r3, r3, #10
 800443c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	2208      	movs	r2, #8
 8004450:	409a      	lsls	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01a      	beq.n	8004490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0204 	bic.w	r2, r2, #4
 8004476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447c:	2208      	movs	r2, #8
 800447e:	409a      	lsls	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	f043 0201 	orr.w	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	2201      	movs	r2, #1
 8004496:	409a      	lsls	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d012      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b2:	2201      	movs	r2, #1
 80044b4:	409a      	lsls	r2, r3
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	f043 0202 	orr.w	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ca:	2204      	movs	r2, #4
 80044cc:	409a      	lsls	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d012      	beq.n	80044fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e8:	2204      	movs	r2, #4
 80044ea:	409a      	lsls	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f4:	f043 0204 	orr.w	r2, r3, #4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004500:	2210      	movs	r2, #16
 8004502:	409a      	lsls	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d043      	beq.n	8004594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d03c      	beq.n	8004594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451e:	2210      	movs	r2, #16
 8004520:	409a      	lsls	r2, r3
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d018      	beq.n	8004566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d024      	beq.n	8004594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
 8004552:	e01f      	b.n	8004594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01b      	beq.n	8004594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
 8004564:	e016      	b.n	8004594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d107      	bne.n	8004584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0208 	bic.w	r2, r2, #8
 8004582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004598:	2220      	movs	r2, #32
 800459a:	409a      	lsls	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 808f 	beq.w	80046c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8087 	beq.w	80046c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ba:	2220      	movs	r2, #32
 80045bc:	409a      	lsls	r2, r3
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d136      	bne.n	800463c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0216 	bic.w	r2, r2, #22
 80045dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_DMA_IRQHandler+0x1da>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0208 	bic.w	r2, r2, #8
 800460c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004612:	223f      	movs	r2, #63	@ 0x3f
 8004614:	409a      	lsls	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462e:	2b00      	cmp	r3, #0
 8004630:	d07e      	beq.n	8004730 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
        }
        return;
 800463a:	e079      	b.n	8004730 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10d      	bne.n	8004674 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465c:	2b00      	cmp	r3, #0
 800465e:	d031      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
 8004668:	e02c      	b.n	80046c4 <HAL_DMA_IRQHandler+0x2a0>
 800466a:	bf00      	nop
 800466c:	20000008 	.word	0x20000008
 8004670:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d023      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
 8004684:	e01e      	b.n	80046c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10f      	bne.n	80046b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0210 	bic.w	r2, r2, #16
 80046a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d032      	beq.n	8004732 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d022      	beq.n	800471e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2205      	movs	r2, #5
 80046dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d307      	bcc.n	800470c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f2      	bne.n	80046f0 <HAL_DMA_IRQHandler+0x2cc>
 800470a:	e000      	b.n	800470e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800470c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
 800472e:	e000      	b.n	8004732 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004730:	bf00      	nop
    }
  }
}
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004754:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d108      	bne.n	8004778 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004776:	e007      	b.n	8004788 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3b10      	subs	r3, #16
 80047a4:	4a14      	ldr	r2, [pc, #80]	@ (80047f8 <DMA_CalcBaseAndBitshift+0x64>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047ae:	4a13      	ldr	r2, [pc, #76]	@ (80047fc <DMA_CalcBaseAndBitshift+0x68>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d909      	bls.n	80047d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047ca:	f023 0303 	bic.w	r3, r3, #3
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80047d4:	e007      	b.n	80047e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	aaaaaaab 	.word	0xaaaaaaab
 80047fc:	0800b040 	.word	0x0800b040

08004800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d11f      	bne.n	800485a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d856      	bhi.n	80048ce <DMA_CheckFifoParam+0xce>
 8004820:	a201      	add	r2, pc, #4	@ (adr r2, 8004828 <DMA_CheckFifoParam+0x28>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	08004839 	.word	0x08004839
 800482c:	0800484b 	.word	0x0800484b
 8004830:	08004839 	.word	0x08004839
 8004834:	080048cf 	.word	0x080048cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d046      	beq.n	80048d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004848:	e043      	b.n	80048d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004852:	d140      	bne.n	80048d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004858:	e03d      	b.n	80048d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004862:	d121      	bne.n	80048a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d837      	bhi.n	80048da <DMA_CheckFifoParam+0xda>
 800486a:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <DMA_CheckFifoParam+0x70>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004881 	.word	0x08004881
 8004874:	08004887 	.word	0x08004887
 8004878:	08004881 	.word	0x08004881
 800487c:	08004899 	.word	0x08004899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e030      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d025      	beq.n	80048de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004896:	e022      	b.n	80048de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048a0:	d11f      	bne.n	80048e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048a6:	e01c      	b.n	80048e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d903      	bls.n	80048b6 <DMA_CheckFifoParam+0xb6>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d003      	beq.n	80048bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048b4:	e018      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
      break;
 80048ba:	e015      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00e      	beq.n	80048e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      break;
 80048cc:	e00b      	b.n	80048e6 <DMA_CheckFifoParam+0xe6>
      break;
 80048ce:	bf00      	nop
 80048d0:	e00a      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048d2:	bf00      	nop
 80048d4:	e008      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048d6:	bf00      	nop
 80048d8:	e006      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048da:	bf00      	nop
 80048dc:	e004      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <DMA_CheckFifoParam+0xe8>
      break;
 80048e6:	bf00      	nop
    }
  } 
  
  return status; 
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop

080048f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	@ 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e177      	b.n	8004c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004914:	2201      	movs	r2, #1
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	429a      	cmp	r2, r3
 800492e:	f040 8166 	bne.w	8004bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b01      	cmp	r3, #1
 800493c:	d005      	beq.n	800494a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004946:	2b02      	cmp	r3, #2
 8004948:	d130      	bne.n	80049ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	2203      	movs	r2, #3
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004980:	2201      	movs	r2, #1
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 0201 	and.w	r2, r3, #1
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d017      	beq.n	80049e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	2203      	movs	r2, #3
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d123      	bne.n	8004a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	08da      	lsrs	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3208      	adds	r2, #8
 80049fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	220f      	movs	r2, #15
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	08da      	lsrs	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	69b9      	ldr	r1, [r7, #24]
 8004a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	2203      	movs	r2, #3
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0203 	and.w	r2, r3, #3
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80c0 	beq.w	8004bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	4b66      	ldr	r3, [pc, #408]	@ (8004c1c <HAL_GPIO_Init+0x324>)
 8004a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a86:	4a65      	ldr	r2, [pc, #404]	@ (8004c1c <HAL_GPIO_Init+0x324>)
 8004a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a8e:	4b63      	ldr	r3, [pc, #396]	@ (8004c1c <HAL_GPIO_Init+0x324>)
 8004a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a9a:	4a61      	ldr	r2, [pc, #388]	@ (8004c20 <HAL_GPIO_Init+0x328>)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	089b      	lsrs	r3, r3, #2
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	220f      	movs	r2, #15
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a58      	ldr	r2, [pc, #352]	@ (8004c24 <HAL_GPIO_Init+0x32c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d037      	beq.n	8004b36 <HAL_GPIO_Init+0x23e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a57      	ldr	r2, [pc, #348]	@ (8004c28 <HAL_GPIO_Init+0x330>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d031      	beq.n	8004b32 <HAL_GPIO_Init+0x23a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a56      	ldr	r2, [pc, #344]	@ (8004c2c <HAL_GPIO_Init+0x334>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d02b      	beq.n	8004b2e <HAL_GPIO_Init+0x236>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a55      	ldr	r2, [pc, #340]	@ (8004c30 <HAL_GPIO_Init+0x338>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d025      	beq.n	8004b2a <HAL_GPIO_Init+0x232>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a54      	ldr	r2, [pc, #336]	@ (8004c34 <HAL_GPIO_Init+0x33c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <HAL_GPIO_Init+0x22e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a53      	ldr	r2, [pc, #332]	@ (8004c38 <HAL_GPIO_Init+0x340>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d019      	beq.n	8004b22 <HAL_GPIO_Init+0x22a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a52      	ldr	r2, [pc, #328]	@ (8004c3c <HAL_GPIO_Init+0x344>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_GPIO_Init+0x226>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a51      	ldr	r2, [pc, #324]	@ (8004c40 <HAL_GPIO_Init+0x348>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00d      	beq.n	8004b1a <HAL_GPIO_Init+0x222>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a50      	ldr	r2, [pc, #320]	@ (8004c44 <HAL_GPIO_Init+0x34c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d007      	beq.n	8004b16 <HAL_GPIO_Init+0x21e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a4f      	ldr	r2, [pc, #316]	@ (8004c48 <HAL_GPIO_Init+0x350>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <HAL_GPIO_Init+0x21a>
 8004b0e:	2309      	movs	r3, #9
 8004b10:	e012      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b12:	230a      	movs	r3, #10
 8004b14:	e010      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b16:	2308      	movs	r3, #8
 8004b18:	e00e      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b1a:	2307      	movs	r3, #7
 8004b1c:	e00c      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b1e:	2306      	movs	r3, #6
 8004b20:	e00a      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b22:	2305      	movs	r3, #5
 8004b24:	e008      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b26:	2304      	movs	r3, #4
 8004b28:	e006      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e004      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e002      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <HAL_GPIO_Init+0x240>
 8004b36:	2300      	movs	r3, #0
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	f002 0203 	and.w	r2, r2, #3
 8004b3e:	0092      	lsls	r2, r2, #2
 8004b40:	4093      	lsls	r3, r2
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b48:	4935      	ldr	r1, [pc, #212]	@ (8004c20 <HAL_GPIO_Init+0x328>)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	089b      	lsrs	r3, r3, #2
 8004b4e:	3302      	adds	r3, #2
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b56:	4b3d      	ldr	r3, [pc, #244]	@ (8004c4c <HAL_GPIO_Init+0x354>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b7a:	4a34      	ldr	r2, [pc, #208]	@ (8004c4c <HAL_GPIO_Init+0x354>)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b80:	4b32      	ldr	r3, [pc, #200]	@ (8004c4c <HAL_GPIO_Init+0x354>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ba4:	4a29      	ldr	r2, [pc, #164]	@ (8004c4c <HAL_GPIO_Init+0x354>)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004baa:	4b28      	ldr	r3, [pc, #160]	@ (8004c4c <HAL_GPIO_Init+0x354>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bce:	4a1f      	ldr	r2, [pc, #124]	@ (8004c4c <HAL_GPIO_Init+0x354>)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c4c <HAL_GPIO_Init+0x354>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf8:	4a14      	ldr	r2, [pc, #80]	@ (8004c4c <HAL_GPIO_Init+0x354>)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3301      	adds	r3, #1
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	f67f ae84 	bls.w	8004914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	3724      	adds	r7, #36	@ 0x24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	40013800 	.word	0x40013800
 8004c24:	40020000 	.word	0x40020000
 8004c28:	40020400 	.word	0x40020400
 8004c2c:	40020800 	.word	0x40020800
 8004c30:	40020c00 	.word	0x40020c00
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40021400 	.word	0x40021400
 8004c3c:	40021800 	.word	0x40021800
 8004c40:	40021c00 	.word	0x40021c00
 8004c44:	40022000 	.word	0x40022000
 8004c48:	40022400 	.word	0x40022400
 8004c4c:	40013c00 	.word	0x40013c00

08004c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c60:	787b      	ldrb	r3, [r7, #1]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c6c:	e003      	b.n	8004c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c6e:	887b      	ldrh	r3, [r7, #2]
 8004c70:	041a      	lsls	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	619a      	str	r2, [r3, #24]
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e267      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d075      	beq.n	8004d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ca2:	4b88      	ldr	r3, [pc, #544]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d00c      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cae:	4b85      	ldr	r3, [pc, #532]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d112      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cba:	4b82      	ldr	r3, [pc, #520]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d05b      	beq.n	8004d8c <HAL_RCC_OscConfig+0x108>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d157      	bne.n	8004d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e242      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce8:	d106      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x74>
 8004cea:	4b76      	ldr	r3, [pc, #472]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a75      	ldr	r2, [pc, #468]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e01d      	b.n	8004d34 <HAL_RCC_OscConfig+0xb0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x98>
 8004d02:	4b70      	ldr	r3, [pc, #448]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6f      	ldr	r2, [pc, #444]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a6c      	ldr	r2, [pc, #432]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0xb0>
 8004d1c:	4b69      	ldr	r3, [pc, #420]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a68      	ldr	r2, [pc, #416]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b66      	ldr	r3, [pc, #408]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a65      	ldr	r2, [pc, #404]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fe fc74 	bl	8003628 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fe fc70 	bl	8003628 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	@ 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e207      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b5b      	ldr	r3, [pc, #364]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0xc0>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fe fc60 	bl	8003628 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fe fc5c 	bl	8003628 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	@ 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e1f3      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7e:	4b51      	ldr	r3, [pc, #324]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0xe8>
 8004d8a:	e000      	b.n	8004d8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d063      	beq.n	8004e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004da6:	4b47      	ldr	r3, [pc, #284]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d11c      	bne.n	8004dec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db2:	4b44      	ldr	r3, [pc, #272]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d116      	bne.n	8004dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dbe:	4b41      	ldr	r3, [pc, #260]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x152>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e1c7      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4937      	ldr	r1, [pc, #220]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dea:	e03a      	b.n	8004e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d020      	beq.n	8004e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df4:	4b34      	ldr	r3, [pc, #208]	@ (8004ec8 <HAL_RCC_OscConfig+0x244>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfa:	f7fe fc15 	bl	8003628 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e02:	f7fe fc11 	bl	8003628 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e1a8      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e14:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f0      	beq.n	8004e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e20:	4b28      	ldr	r3, [pc, #160]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4925      	ldr	r1, [pc, #148]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	600b      	str	r3, [r1, #0]
 8004e34:	e015      	b.n	8004e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e36:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <HAL_RCC_OscConfig+0x244>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fe fbf4 	bl	8003628 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e44:	f7fe fbf0 	bl	8003628 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e187      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e56:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d036      	beq.n	8004edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d016      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e76:	4b15      	ldr	r3, [pc, #84]	@ (8004ecc <HAL_RCC_OscConfig+0x248>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fe fbd4 	bl	8003628 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e84:	f7fe fbd0 	bl	8003628 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e167      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <HAL_RCC_OscConfig+0x240>)
 8004e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x200>
 8004ea2:	e01b      	b.n	8004edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea4:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <HAL_RCC_OscConfig+0x248>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eaa:	f7fe fbbd 	bl	8003628 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	e00e      	b.n	8004ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb2:	f7fe fbb9 	bl	8003628 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d907      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e150      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	42470000 	.word	0x42470000
 8004ecc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed0:	4b88      	ldr	r3, [pc, #544]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ea      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8097 	beq.w	8005018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eea:	2300      	movs	r3, #0
 8004eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eee:	4b81      	ldr	r3, [pc, #516]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10f      	bne.n	8004f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	4b7d      	ldr	r3, [pc, #500]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	4a7c      	ldr	r2, [pc, #496]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f16:	2301      	movs	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1a:	4b77      	ldr	r3, [pc, #476]	@ (80050f8 <HAL_RCC_OscConfig+0x474>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d118      	bne.n	8004f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f26:	4b74      	ldr	r3, [pc, #464]	@ (80050f8 <HAL_RCC_OscConfig+0x474>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a73      	ldr	r2, [pc, #460]	@ (80050f8 <HAL_RCC_OscConfig+0x474>)
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f32:	f7fe fb79 	bl	8003628 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3a:	f7fe fb75 	bl	8003628 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e10c      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80050f8 <HAL_RCC_OscConfig+0x474>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d106      	bne.n	8004f6e <HAL_RCC_OscConfig+0x2ea>
 8004f60:	4b64      	ldr	r3, [pc, #400]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f64:	4a63      	ldr	r2, [pc, #396]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6c:	e01c      	b.n	8004fa8 <HAL_RCC_OscConfig+0x324>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x30c>
 8004f76:	4b5f      	ldr	r3, [pc, #380]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	f043 0304 	orr.w	r3, r3, #4
 8004f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f82:	4b5c      	ldr	r3, [pc, #368]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f86:	4a5b      	ldr	r2, [pc, #364]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8e:	e00b      	b.n	8004fa8 <HAL_RCC_OscConfig+0x324>
 8004f90:	4b58      	ldr	r3, [pc, #352]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	4a57      	ldr	r2, [pc, #348]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f9c:	4b55      	ldr	r3, [pc, #340]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa0:	4a54      	ldr	r2, [pc, #336]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	f023 0304 	bic.w	r3, r3, #4
 8004fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d015      	beq.n	8004fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fe fb3a 	bl	8003628 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb8:	f7fe fb36 	bl	8003628 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e0cb      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fce:	4b49      	ldr	r3, [pc, #292]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0ee      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x334>
 8004fda:	e014      	b.n	8005006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fdc:	f7fe fb24 	bl	8003628 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe4:	f7fe fb20 	bl	8003628 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0b5      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1ee      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005006:	7dfb      	ldrb	r3, [r7, #23]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d105      	bne.n	8005018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800500c:	4b39      	ldr	r3, [pc, #228]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	4a38      	ldr	r2, [pc, #224]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8005012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80a1 	beq.w	8005164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005022:	4b34      	ldr	r3, [pc, #208]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	2b08      	cmp	r3, #8
 800502c:	d05c      	beq.n	80050e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d141      	bne.n	80050ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005036:	4b31      	ldr	r3, [pc, #196]	@ (80050fc <HAL_RCC_OscConfig+0x478>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7fe faf4 	bl	8003628 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fe faf0 	bl	8003628 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e087      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005056:	4b27      	ldr	r3, [pc, #156]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69da      	ldr	r2, [r3, #28]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	085b      	lsrs	r3, r3, #1
 800507a:	3b01      	subs	r3, #1
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	491b      	ldr	r1, [pc, #108]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508c:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x478>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005092:	f7fe fac9 	bl	8003628 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fe fac5 	bl	8003628 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e05c      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ac:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x416>
 80050b8:	e054      	b.n	8005164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <HAL_RCC_OscConfig+0x478>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fe fab2 	bl	8003628 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fe faae 	bl	8003628 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e045      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCC_OscConfig+0x470>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x444>
 80050e6:	e03d      	b.n	8005164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e038      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40007000 	.word	0x40007000
 80050fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005100:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <HAL_RCC_OscConfig+0x4ec>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d028      	beq.n	8005160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d121      	bne.n	8005160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d11a      	bne.n	8005160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005130:	4013      	ands	r3, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005138:	4293      	cmp	r3, r2
 800513a:	d111      	bne.n	8005160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	3b01      	subs	r3, #1
 800514a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d107      	bne.n	8005160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023800 	.word	0x40023800

08005174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0cc      	b.n	8005322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005188:	4b68      	ldr	r3, [pc, #416]	@ (800532c <HAL_RCC_ClockConfig+0x1b8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d90c      	bls.n	80051b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005196:	4b65      	ldr	r3, [pc, #404]	@ (800532c <HAL_RCC_ClockConfig+0x1b8>)
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	4b63      	ldr	r3, [pc, #396]	@ (800532c <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0b8      	b.n	8005322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d020      	beq.n	80051fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051c8:	4b59      	ldr	r3, [pc, #356]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4a58      	ldr	r2, [pc, #352]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e0:	4b53      	ldr	r3, [pc, #332]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	4a52      	ldr	r2, [pc, #328]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ec:	4b50      	ldr	r3, [pc, #320]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	494d      	ldr	r1, [pc, #308]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d044      	beq.n	8005294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d107      	bne.n	8005222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005212:	4b47      	ldr	r3, [pc, #284]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d119      	bne.n	8005252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e07f      	b.n	8005322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d003      	beq.n	8005232 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522e:	2b03      	cmp	r3, #3
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005232:	4b3f      	ldr	r3, [pc, #252]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e06f      	b.n	8005322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005242:	4b3b      	ldr	r3, [pc, #236]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e067      	b.n	8005322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005252:	4b37      	ldr	r3, [pc, #220]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f023 0203 	bic.w	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4934      	ldr	r1, [pc, #208]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	4313      	orrs	r3, r2
 8005262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005264:	f7fe f9e0 	bl	8003628 <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	e00a      	b.n	8005282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800526c:	f7fe f9dc 	bl	8003628 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e04f      	b.n	8005322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005282:	4b2b      	ldr	r3, [pc, #172]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 020c 	and.w	r2, r3, #12
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	429a      	cmp	r2, r3
 8005292:	d1eb      	bne.n	800526c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005294:	4b25      	ldr	r3, [pc, #148]	@ (800532c <HAL_RCC_ClockConfig+0x1b8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d20c      	bcs.n	80052bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a2:	4b22      	ldr	r3, [pc, #136]	@ (800532c <HAL_RCC_ClockConfig+0x1b8>)
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052aa:	4b20      	ldr	r3, [pc, #128]	@ (800532c <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d001      	beq.n	80052bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e032      	b.n	8005322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c8:	4b19      	ldr	r3, [pc, #100]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	4916      	ldr	r1, [pc, #88]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052e6:	4b12      	ldr	r3, [pc, #72]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	490e      	ldr	r1, [pc, #56]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052fa:	f000 f82d 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 80052fe:	4602      	mov	r2, r0
 8005300:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	490a      	ldr	r1, [pc, #40]	@ (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 800530c:	5ccb      	ldrb	r3, [r1, r3]
 800530e:	fa22 f303 	lsr.w	r3, r2, r3
 8005312:	4a09      	ldr	r2, [pc, #36]	@ (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005316:	4b09      	ldr	r3, [pc, #36]	@ (800533c <HAL_RCC_ClockConfig+0x1c8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fd ff8c 	bl	8003238 <HAL_InitTick>

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40023c00 	.word	0x40023c00
 8005330:	40023800 	.word	0x40023800
 8005334:	0800b028 	.word	0x0800b028
 8005338:	20000008 	.word	0x20000008
 800533c:	2000000c 	.word	0x2000000c

08005340 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005344:	4b03      	ldr	r3, [pc, #12]	@ (8005354 <HAL_RCC_EnableCSS+0x14>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]
}
 800534a:	bf00      	nop
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	4247004c 	.word	0x4247004c

08005358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800535c:	b090      	sub	sp, #64	@ 0x40
 800535e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005370:	4b59      	ldr	r3, [pc, #356]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	2b08      	cmp	r3, #8
 800537a:	d00d      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x40>
 800537c:	2b08      	cmp	r3, #8
 800537e:	f200 80a1 	bhi.w	80054c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_RCC_GetSysClockFreq+0x34>
 8005386:	2b04      	cmp	r3, #4
 8005388:	d003      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0x3a>
 800538a:	e09b      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b53      	ldr	r3, [pc, #332]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x184>)
 800538e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005390:	e09b      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005392:	4b53      	ldr	r3, [pc, #332]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005394:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005396:	e098      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005398:	4b4f      	ldr	r3, [pc, #316]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053a2:	4b4d      	ldr	r3, [pc, #308]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d028      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ae:	4b4a      	ldr	r3, [pc, #296]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	099b      	lsrs	r3, r3, #6
 80053b4:	2200      	movs	r2, #0
 80053b6:	623b      	str	r3, [r7, #32]
 80053b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053c0:	2100      	movs	r1, #0
 80053c2:	4b47      	ldr	r3, [pc, #284]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053c4:	fb03 f201 	mul.w	r2, r3, r1
 80053c8:	2300      	movs	r3, #0
 80053ca:	fb00 f303 	mul.w	r3, r0, r3
 80053ce:	4413      	add	r3, r2
 80053d0:	4a43      	ldr	r2, [pc, #268]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053d2:	fba0 1202 	umull	r1, r2, r0, r2
 80053d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053d8:	460a      	mov	r2, r1
 80053da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053de:	4413      	add	r3, r2
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	2200      	movs	r2, #0
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	61fa      	str	r2, [r7, #28]
 80053ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053f2:	f7fa ff05 	bl	8000200 <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4613      	mov	r3, r2
 80053fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053fe:	e053      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005400:	4b35      	ldr	r3, [pc, #212]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	099b      	lsrs	r3, r3, #6
 8005406:	2200      	movs	r2, #0
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	617a      	str	r2, [r7, #20]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005412:	f04f 0b00 	mov.w	fp, #0
 8005416:	4652      	mov	r2, sl
 8005418:	465b      	mov	r3, fp
 800541a:	f04f 0000 	mov.w	r0, #0
 800541e:	f04f 0100 	mov.w	r1, #0
 8005422:	0159      	lsls	r1, r3, #5
 8005424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005428:	0150      	lsls	r0, r2, #5
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	ebb2 080a 	subs.w	r8, r2, sl
 8005432:	eb63 090b 	sbc.w	r9, r3, fp
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800544a:	ebb2 0408 	subs.w	r4, r2, r8
 800544e:	eb63 0509 	sbc.w	r5, r3, r9
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	00eb      	lsls	r3, r5, #3
 800545c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005460:	00e2      	lsls	r2, r4, #3
 8005462:	4614      	mov	r4, r2
 8005464:	461d      	mov	r5, r3
 8005466:	eb14 030a 	adds.w	r3, r4, sl
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	eb45 030b 	adc.w	r3, r5, fp
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800547e:	4629      	mov	r1, r5
 8005480:	028b      	lsls	r3, r1, #10
 8005482:	4621      	mov	r1, r4
 8005484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005488:	4621      	mov	r1, r4
 800548a:	028a      	lsls	r2, r1, #10
 800548c:	4610      	mov	r0, r2
 800548e:	4619      	mov	r1, r3
 8005490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005492:	2200      	movs	r2, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	60fa      	str	r2, [r7, #12]
 8005498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800549c:	f7fa feb0 	bl	8000200 <__aeabi_uldivmod>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4613      	mov	r3, r2
 80054a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054a8:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80054b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054c2:	e002      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b05      	ldr	r3, [pc, #20]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x184>)
 80054c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3740      	adds	r7, #64	@ 0x40
 80054d0:	46bd      	mov	sp, r7
 80054d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800
 80054dc:	00f42400 	.word	0x00f42400
 80054e0:	018cba80 	.word	0x018cba80

080054e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e8:	4b03      	ldr	r3, [pc, #12]	@ (80054f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000008 	.word	0x20000008

080054fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005500:	f7ff fff0 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b05      	ldr	r3, [pc, #20]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	0a9b      	lsrs	r3, r3, #10
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4903      	ldr	r1, [pc, #12]	@ (8005520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40023800 	.word	0x40023800
 8005520:	0800b038 	.word	0x0800b038

08005524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005528:	f7ff ffdc 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	0b5b      	lsrs	r3, r3, #13
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4903      	ldr	r1, [pc, #12]	@ (8005548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40023800 	.word	0x40023800
 8005548:	0800b038 	.word	0x0800b038

0800554c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	220f      	movs	r2, #15
 800555a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800555c:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <HAL_RCC_GetClockConfig+0x5c>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0203 	and.w	r2, r3, #3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005568:	4b0f      	ldr	r3, [pc, #60]	@ (80055a8 <HAL_RCC_GetClockConfig+0x5c>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005574:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005580:	4b09      	ldr	r3, [pc, #36]	@ (80055a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	08db      	lsrs	r3, r3, #3
 8005586:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800558e:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <HAL_RCC_GetClockConfig+0x60>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 020f 	and.w	r2, r3, #15
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	601a      	str	r2, [r3, #0]
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40023c00 	.word	0x40023c00

080055b0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80055b4:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055bc:	2b80      	cmp	r3, #128	@ 0x80
 80055be:	d104      	bne.n	80055ca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80055c0:	f000 f80a 	bl	80055d8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80055c4:	4b03      	ldr	r3, [pc, #12]	@ (80055d4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80055c6:	2280      	movs	r2, #128	@ 0x80
 80055c8:	701a      	strb	r2, [r3, #0]
  }
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800
 80055d4:	4002380e 	.word	0x4002380e

080055d8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e07b      	b.n	80056f0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d108      	bne.n	8005612 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005608:	d009      	beq.n	800561e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	61da      	str	r2, [r3, #28]
 8005610:	e005      	b.n	800561e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fd f947 	bl	80028cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005654:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a2:	ea42 0103 	orr.w	r1, r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	f003 0104 	and.w	r1, r3, #4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	f003 0210 	and.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005708:	f7fd ff8e 	bl	8003628 <HAL_GetTick>
 800570c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800571e:	2302      	movs	r3, #2
 8005720:	e12a      	b.n	8005978 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_SPI_Transmit+0x36>
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e122      	b.n	8005978 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_SPI_Transmit+0x48>
 800573c:	2302      	movs	r3, #2
 800573e:	e11b      	b.n	8005978 <HAL_SPI_Transmit+0x280>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2203      	movs	r2, #3
 800574c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	88fa      	ldrh	r2, [r7, #6]
 8005766:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800578e:	d10f      	bne.n	80057b0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800579e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ba:	2b40      	cmp	r3, #64	@ 0x40
 80057bc:	d007      	beq.n	80057ce <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057d6:	d152      	bne.n	800587e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_SPI_Transmit+0xee>
 80057e0:	8b7b      	ldrh	r3, [r7, #26]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d145      	bne.n	8005872 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800580a:	e032      	b.n	8005872 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b02      	cmp	r3, #2
 8005818:	d112      	bne.n	8005840 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	881a      	ldrh	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	1c9a      	adds	r2, r3, #2
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800583e:	e018      	b.n	8005872 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005840:	f7fd fef2 	bl	8003628 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d803      	bhi.n	8005858 <HAL_SPI_Transmit+0x160>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d102      	bne.n	800585e <HAL_SPI_Transmit+0x166>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e082      	b.n	8005978 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1c7      	bne.n	800580c <HAL_SPI_Transmit+0x114>
 800587c:	e053      	b.n	8005926 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_SPI_Transmit+0x194>
 8005886:	8b7b      	ldrh	r3, [r7, #26]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d147      	bne.n	800591c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058b2:	e033      	b.n	800591c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d113      	bne.n	80058ea <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058e8:	e018      	b.n	800591c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ea:	f7fd fe9d 	bl	8003628 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d803      	bhi.n	8005902 <HAL_SPI_Transmit+0x20a>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d102      	bne.n	8005908 <HAL_SPI_Transmit+0x210>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e02d      	b.n	8005978 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1c6      	bne.n	80058b4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fbd8 	bl	80060e0 <SPI_EndRxTxTransaction>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005976:	2300      	movs	r3, #0
  }
}
 8005978:	4618      	mov	r0, r3
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d001      	beq.n	80059a0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
 800599e:	e104      	b.n	8005baa <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_SPI_Receive+0x2c>
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0fc      	b.n	8005baa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059b8:	d112      	bne.n	80059e0 <HAL_SPI_Receive+0x60>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10e      	bne.n	80059e0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2204      	movs	r2, #4
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f8eb 	bl	8005bb2 <HAL_SPI_TransmitReceive>
 80059dc:	4603      	mov	r3, r0
 80059de:	e0e4      	b.n	8005baa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059e0:	f7fd fe22 	bl	8003628 <HAL_GetTick>
 80059e4:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_SPI_Receive+0x74>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e0da      	b.n	8005baa <HAL_SPI_Receive+0x22a>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2204      	movs	r2, #4
 8005a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	88fa      	ldrh	r2, [r7, #6]
 8005a1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a42:	d10f      	bne.n	8005a64 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6e:	2b40      	cmp	r3, #64	@ 0x40
 8005a70:	d007      	beq.n	8005a82 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d170      	bne.n	8005b6c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a8a:	e035      	b.n	8005af8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d115      	bne.n	8005ac6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f103 020c 	add.w	r2, r3, #12
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	7812      	ldrb	r2, [r2, #0]
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ac4:	e018      	b.n	8005af8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac6:	f7fd fdaf 	bl	8003628 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d803      	bhi.n	8005ade <HAL_SPI_Receive+0x15e>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d102      	bne.n	8005ae4 <HAL_SPI_Receive+0x164>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e058      	b.n	8005baa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1c4      	bne.n	8005a8c <HAL_SPI_Receive+0x10c>
 8005b02:	e038      	b.n	8005b76 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d113      	bne.n	8005b3a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b24:	1c9a      	adds	r2, r3, #2
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b38:	e018      	b.n	8005b6c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b3a:	f7fd fd75 	bl	8003628 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d803      	bhi.n	8005b52 <HAL_SPI_Receive+0x1d2>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d102      	bne.n	8005b58 <HAL_SPI_Receive+0x1d8>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e01e      	b.n	8005baa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1c6      	bne.n	8005b04 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fa4a 	bl	8006014 <SPI_EndRxTransaction>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b08a      	sub	sp, #40	@ 0x28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc4:	f7fd fd30 	bl	8003628 <HAL_GetTick>
 8005bc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005bd8:	887b      	ldrh	r3, [r7, #2]
 8005bda:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bdc:	7ffb      	ldrb	r3, [r7, #31]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d00c      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x4a>
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be8:	d106      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x46>
 8005bf2:	7ffb      	ldrb	r3, [r7, #31]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d001      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e17f      	b.n	8005efc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x5c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x5c>
 8005c08:	887b      	ldrh	r3, [r7, #2]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e174      	b.n	8005efc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x6e>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e16d      	b.n	8005efc <HAL_SPI_TransmitReceive+0x34a>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d003      	beq.n	8005c3c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2205      	movs	r2, #5
 8005c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	887a      	ldrh	r2, [r7, #2]
 8005c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	887a      	ldrh	r2, [r7, #2]
 8005c52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7c:	2b40      	cmp	r3, #64	@ 0x40
 8005c7e:	d007      	beq.n	8005c90 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c98:	d17e      	bne.n	8005d98 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0xf6>
 8005ca2:	8afb      	ldrh	r3, [r7, #22]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d16c      	bne.n	8005d82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cac:	881a      	ldrh	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ccc:	e059      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d11b      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x162>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <HAL_SPI_TransmitReceive+0x162>
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d113      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf0:	881a      	ldrh	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfc:	1c9a      	adds	r2, r3, #2
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d119      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x1a4>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d014      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d36:	b292      	uxth	r2, r2
 8005d38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d52:	2301      	movs	r3, #1
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d56:	f7fd fc67 	bl	8003628 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d80d      	bhi.n	8005d82 <HAL_SPI_TransmitReceive+0x1d0>
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d009      	beq.n	8005d82 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e0bc      	b.n	8005efc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1a0      	bne.n	8005cce <HAL_SPI_TransmitReceive+0x11c>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d19b      	bne.n	8005cce <HAL_SPI_TransmitReceive+0x11c>
 8005d96:	e082      	b.n	8005e9e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x1f4>
 8005da0:	8afb      	ldrh	r3, [r7, #22]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d171      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dcc:	e05d      	b.n	8005e8a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d11c      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x264>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d017      	beq.n	8005e16 <HAL_SPI_TransmitReceive+0x264>
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d114      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d119      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x2a6>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d014      	beq.n	8005e58 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e54:	2301      	movs	r3, #1
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e58:	f7fd fbe6 	bl	8003628 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d803      	bhi.n	8005e70 <HAL_SPI_TransmitReceive+0x2be>
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d102      	bne.n	8005e76 <HAL_SPI_TransmitReceive+0x2c4>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e038      	b.n	8005efc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d19c      	bne.n	8005dce <HAL_SPI_TransmitReceive+0x21c>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d197      	bne.n	8005dce <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e9e:	6a3a      	ldr	r2, [r7, #32]
 8005ea0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f91c 	bl	80060e0 <SPI_EndRxTxTransaction>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e01d      	b.n	8005efc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005efa:	2300      	movs	r3, #0
  }
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3728      	adds	r7, #40	@ 0x28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f14:	f7fd fb88 	bl	8003628 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	4413      	add	r3, r2
 8005f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f24:	f7fd fb80 	bl	8003628 <HAL_GetTick>
 8005f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f2a:	4b39      	ldr	r3, [pc, #228]	@ (8006010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	015b      	lsls	r3, r3, #5
 8005f30:	0d1b      	lsrs	r3, r3, #20
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	fb02 f303 	mul.w	r3, r2, r3
 8005f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f3a:	e055      	b.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d051      	beq.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f44:	f7fd fb70 	bl	8003628 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d902      	bls.n	8005f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d13d      	bne.n	8005fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f72:	d111      	bne.n	8005f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f7c:	d004      	beq.n	8005f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f86:	d107      	bne.n	8005f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fa0:	d10f      	bne.n	8005fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e018      	b.n	8006008 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e002      	b.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2301      	moveq	r3, #1
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	429a      	cmp	r2, r3
 8006004:	d19a      	bne.n	8005f3c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000008 	.word	0x20000008

08006014 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006028:	d111      	bne.n	800604e <SPI_EndRxTransaction+0x3a>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006032:	d004      	beq.n	800603e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800603c:	d107      	bne.n	800604e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800604c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006056:	d12a      	bne.n	80060ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006060:	d012      	beq.n	8006088 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2200      	movs	r2, #0
 800606a:	2180      	movs	r1, #128	@ 0x80
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff ff49 	bl	8005f04 <SPI_WaitFlagStateUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d02d      	beq.n	80060d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607c:	f043 0220 	orr.w	r2, r3, #32
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e026      	b.n	80060d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	2101      	movs	r1, #1
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff ff36 	bl	8005f04 <SPI_WaitFlagStateUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01a      	beq.n	80060d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e013      	b.n	80060d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	2101      	movs	r1, #1
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ff23 	bl	8005f04 <SPI_WaitFlagStateUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c8:	f043 0220 	orr.w	r2, r3, #32
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e000      	b.n	80060d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2201      	movs	r2, #1
 80060f4:	2102      	movs	r1, #2
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff ff04 	bl	8005f04 <SPI_WaitFlagStateUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006106:	f043 0220 	orr.w	r2, r3, #32
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e032      	b.n	8006178 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006112:	4b1b      	ldr	r3, [pc, #108]	@ (8006180 <SPI_EndRxTxTransaction+0xa0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1b      	ldr	r2, [pc, #108]	@ (8006184 <SPI_EndRxTxTransaction+0xa4>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	0d5b      	lsrs	r3, r3, #21
 800611e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006130:	d112      	bne.n	8006158 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	2180      	movs	r1, #128	@ 0x80
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fee1 	bl	8005f04 <SPI_WaitFlagStateUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d016      	beq.n	8006176 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614c:	f043 0220 	orr.w	r2, r3, #32
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e00f      	b.n	8006178 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	3b01      	subs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800616e:	2b80      	cmp	r3, #128	@ 0x80
 8006170:	d0f2      	beq.n	8006158 <SPI_EndRxTxTransaction+0x78>
 8006172:	e000      	b.n	8006176 <SPI_EndRxTxTransaction+0x96>
        break;
 8006174:	bf00      	nop
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000008 	.word	0x20000008
 8006184:	165e9f81 	.word	0x165e9f81

08006188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e041      	b.n	800621e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f839 	bl	8006226 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f000 f9c0 	bl	800654c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
	...

0800623c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b01      	cmp	r3, #1
 800624e:	d001      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e04e      	b.n	80062f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a23      	ldr	r2, [pc, #140]	@ (8006300 <HAL_TIM_Base_Start_IT+0xc4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d022      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x80>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627e:	d01d      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x80>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1f      	ldr	r2, [pc, #124]	@ (8006304 <HAL_TIM_Base_Start_IT+0xc8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d018      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x80>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1e      	ldr	r2, [pc, #120]	@ (8006308 <HAL_TIM_Base_Start_IT+0xcc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x80>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1c      	ldr	r2, [pc, #112]	@ (800630c <HAL_TIM_Base_Start_IT+0xd0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00e      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x80>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006310 <HAL_TIM_Base_Start_IT+0xd4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x80>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <HAL_TIM_Base_Start_IT+0xd8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x80>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a18      	ldr	r2, [pc, #96]	@ (8006318 <HAL_TIM_Base_Start_IT+0xdc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d111      	bne.n	80062e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b06      	cmp	r3, #6
 80062cc:	d010      	beq.n	80062f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	e007      	b.n	80062f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40010400 	.word	0x40010400
 8006314:	40014000 	.word	0x40014000
 8006318:	40001800 	.word	0x40001800

0800631c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d020      	beq.n	8006380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0202 	mvn.w	r2, #2
 8006350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8d2 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f8c4 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f8d5 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d020      	beq.n	80063cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01b      	beq.n	80063cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0204 	mvn.w	r2, #4
 800639c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8ac 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f89e 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f8af 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d020      	beq.n	8006418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01b      	beq.n	8006418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0208 	mvn.w	r2, #8
 80063e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2204      	movs	r2, #4
 80063ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f886 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 8006404:	e005      	b.n	8006412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f878 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f889 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b00      	cmp	r3, #0
 8006420:	d020      	beq.n	8006464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01b      	beq.n	8006464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0210 	mvn.w	r2, #16
 8006434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2208      	movs	r2, #8
 800643a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f860 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 8006450:	e005      	b.n	800645e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f852 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f863 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0201 	mvn.w	r2, #1
 8006480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fc f92e 	bl	80026e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00c      	beq.n	80064ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f900 	bl	80066ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00c      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f834 	bl	8006538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00c      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0220 	mvn.w	r2, #32
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8d2 	bl	8006698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064f4:	bf00      	nop
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a43      	ldr	r2, [pc, #268]	@ (800666c <TIM_Base_SetConfig+0x120>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656a:	d00f      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a40      	ldr	r2, [pc, #256]	@ (8006670 <TIM_Base_SetConfig+0x124>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3f      	ldr	r2, [pc, #252]	@ (8006674 <TIM_Base_SetConfig+0x128>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a3e      	ldr	r2, [pc, #248]	@ (8006678 <TIM_Base_SetConfig+0x12c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a3d      	ldr	r2, [pc, #244]	@ (800667c <TIM_Base_SetConfig+0x130>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d108      	bne.n	800659e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a32      	ldr	r2, [pc, #200]	@ (800666c <TIM_Base_SetConfig+0x120>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ac:	d027      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006670 <TIM_Base_SetConfig+0x124>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d023      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006674 <TIM_Base_SetConfig+0x128>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01f      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006678 <TIM_Base_SetConfig+0x12c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a2c      	ldr	r2, [pc, #176]	@ (800667c <TIM_Base_SetConfig+0x130>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d017      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006680 <TIM_Base_SetConfig+0x134>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006684 <TIM_Base_SetConfig+0x138>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00f      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a29      	ldr	r2, [pc, #164]	@ (8006688 <TIM_Base_SetConfig+0x13c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a28      	ldr	r2, [pc, #160]	@ (800668c <TIM_Base_SetConfig+0x140>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d007      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a27      	ldr	r2, [pc, #156]	@ (8006690 <TIM_Base_SetConfig+0x144>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a26      	ldr	r2, [pc, #152]	@ (8006694 <TIM_Base_SetConfig+0x148>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d108      	bne.n	8006610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a0e      	ldr	r2, [pc, #56]	@ (800666c <TIM_Base_SetConfig+0x120>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_Base_SetConfig+0xf2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a10      	ldr	r2, [pc, #64]	@ (800667c <TIM_Base_SetConfig+0x130>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d103      	bne.n	8006646 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f043 0204 	orr.w	r2, r3, #4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	601a      	str	r2, [r3, #0]
}
 800665e:	bf00      	nop
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40010000 	.word	0x40010000
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800
 8006678:	40000c00 	.word	0x40000c00
 800667c:	40010400 	.word	0x40010400
 8006680:	40014000 	.word	0x40014000
 8006684:	40014400 	.word	0x40014400
 8006688:	40014800 	.word	0x40014800
 800668c:	40001800 	.word	0x40001800
 8006690:	40001c00 	.word	0x40001c00
 8006694:	40002000 	.word	0x40002000

08006698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e042      	b.n	8006758 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fc fa2e 	bl	8002b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2224      	movs	r2, #36	@ 0x24
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 faa1 	bl	8006c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b20      	cmp	r3, #32
 8006778:	d112      	bne.n	80067a0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_UART_Receive_DMA+0x26>
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e00b      	b.n	80067a2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	461a      	mov	r2, r3
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 f926 	bl	80069e8 <UART_Start_Receive_DMA>
 800679c:	4603      	mov	r3, r0
 800679e:	e000      	b.n	80067a2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80067a0:	2302      	movs	r3, #2
  }
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b09c      	sub	sp, #112	@ 0x70
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006802:	2b00      	cmp	r3, #0
 8006804:	d172      	bne.n	80068ec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006808:	2200      	movs	r2, #0
 800680a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800680c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800681c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800681e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006822:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800682c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800682e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006832:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800683a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	667b      	str	r3, [r7, #100]	@ 0x64
 8006858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006860:	647a      	str	r2, [r7, #68]	@ 0x44
 8006862:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800686e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3314      	adds	r3, #20
 800687a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	623b      	str	r3, [r7, #32]
   return(result);
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800688a:	663b      	str	r3, [r7, #96]	@ 0x60
 800688c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3314      	adds	r3, #20
 8006892:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006894:	633a      	str	r2, [r7, #48]	@ 0x30
 8006896:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800689a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e5      	bne.n	8006874 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d119      	bne.n	80068ec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0310 	bic.w	r3, r3, #16
 80068ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80068d8:	61fa      	str	r2, [r7, #28]
 80068da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	69b9      	ldr	r1, [r7, #24]
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	617b      	str	r3, [r7, #20]
   return(result);
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e5      	bne.n	80068b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ee:	2200      	movs	r2, #0
 80068f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d106      	bne.n	8006908 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068fe:	4619      	mov	r1, r3
 8006900:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006902:	f7ff ff66 	bl	80067d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006906:	e002      	b.n	800690e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006908:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800690a:	f7fa ff1b 	bl	8001744 <HAL_UART_RxCpltCallback>
}
 800690e:	bf00      	nop
 8006910:	3770      	adds	r7, #112	@ 0x70
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006922:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692e:	2b01      	cmp	r3, #1
 8006930:	d108      	bne.n	8006944 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	b29b      	uxth	r3, r3
 800693a:	4619      	mov	r1, r3
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff ff48 	bl	80067d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006942:	e002      	b.n	800694a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f7ff ff30 	bl	80067aa <HAL_UART_RxHalfCpltCallback>
}
 800694a:	bf00      	nop
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006962:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696e:	2b80      	cmp	r3, #128	@ 0x80
 8006970:	bf0c      	ite	eq
 8006972:	2301      	moveq	r3, #1
 8006974:	2300      	movne	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b21      	cmp	r3, #33	@ 0x21
 8006984:	d108      	bne.n	8006998 <UART_DMAError+0x46>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2200      	movs	r2, #0
 8006990:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006992:	68b8      	ldr	r0, [r7, #8]
 8006994:	f000 f8ce 	bl	8006b34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a2:	2b40      	cmp	r3, #64	@ 0x40
 80069a4:	bf0c      	ite	eq
 80069a6:	2301      	moveq	r3, #1
 80069a8:	2300      	movne	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b22      	cmp	r3, #34	@ 0x22
 80069b8:	d108      	bne.n	80069cc <UART_DMAError+0x7a>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80069c6:	68b8      	ldr	r0, [r7, #8]
 80069c8:	f000 f8dc 	bl	8006b84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d0:	f043 0210 	orr.w	r2, r3, #16
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069d8:	68b8      	ldr	r0, [r7, #8]
 80069da:	f7ff fef0 	bl	80067be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069de:	bf00      	nop
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b098      	sub	sp, #96	@ 0x60
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2222      	movs	r2, #34	@ 0x22
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a14:	4a44      	ldr	r2, [pc, #272]	@ (8006b28 <UART_Start_Receive_DMA+0x140>)
 8006a16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1c:	4a43      	ldr	r2, [pc, #268]	@ (8006b2c <UART_Start_Receive_DMA+0x144>)
 8006a1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a24:	4a42      	ldr	r2, [pc, #264]	@ (8006b30 <UART_Start_Receive_DMA+0x148>)
 8006a26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a30:	f107 0308 	add.w	r3, r7, #8
 8006a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	f7fd fc24 	bl	8004294 <HAL_DMA_Start_IT>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d008      	beq.n	8006a64 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2210      	movs	r2, #16
 8006a56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e05d      	b.n	8006b20 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d019      	beq.n	8006ab6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	330c      	adds	r3, #12
 8006a88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	330c      	adds	r3, #12
 8006aa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aa2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006aa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3314      	adds	r3, #20
 8006abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac8:	f043 0301 	orr.w	r3, r3, #1
 8006acc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3314      	adds	r3, #20
 8006ad4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ad6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006adc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3314      	adds	r3, #20
 8006af0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	617b      	str	r3, [r7, #20]
   return(result);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b00:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3314      	adds	r3, #20
 8006b08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6a39      	ldr	r1, [r7, #32]
 8006b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e5      	bne.n	8006aea <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3760      	adds	r7, #96	@ 0x60
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	080067eb 	.word	0x080067eb
 8006b2c:	08006917 	.word	0x08006917
 8006b30:	08006953 	.word	0x08006953

08006b34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b089      	sub	sp, #36	@ 0x24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	61ba      	str	r2, [r7, #24]
 8006b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6979      	ldr	r1, [r7, #20]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e5      	bne.n	8006b3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006b78:	bf00      	nop
 8006b7a:	3724      	adds	r7, #36	@ 0x24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b095      	sub	sp, #84	@ 0x54
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bac:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3314      	adds	r3, #20
 8006bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f023 0301 	bic.w	r3, r3, #1
 8006bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e5      	bne.n	8006bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d119      	bne.n	8006c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c1c:	61ba      	str	r2, [r7, #24]
 8006c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6979      	ldr	r1, [r7, #20]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e5      	bne.n	8006bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c3e:	bf00      	nop
 8006c40:	3754      	adds	r7, #84	@ 0x54
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
	...

08006c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c50:	b0c0      	sub	sp, #256	@ 0x100
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	68d9      	ldr	r1, [r3, #12]
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	ea40 0301 	orr.w	r3, r0, r1
 8006c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ca4:	f021 010c 	bic.w	r1, r1, #12
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc6:	6999      	ldr	r1, [r3, #24]
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	ea40 0301 	orr.w	r3, r0, r1
 8006cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b8f      	ldr	r3, [pc, #572]	@ (8006f18 <UART_SetConfig+0x2cc>)
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d005      	beq.n	8006cec <UART_SetConfig+0xa0>
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8006f1c <UART_SetConfig+0x2d0>)
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d104      	bne.n	8006cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cec:	f7fe fc1a 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 8006cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cf4:	e003      	b.n	8006cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cf6:	f7fe fc01 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8006cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d08:	f040 810c 	bne.w	8006f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d1e:	4622      	mov	r2, r4
 8006d20:	462b      	mov	r3, r5
 8006d22:	1891      	adds	r1, r2, r2
 8006d24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d26:	415b      	adcs	r3, r3
 8006d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d2e:	4621      	mov	r1, r4
 8006d30:	eb12 0801 	adds.w	r8, r2, r1
 8006d34:	4629      	mov	r1, r5
 8006d36:	eb43 0901 	adc.w	r9, r3, r1
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d4e:	4690      	mov	r8, r2
 8006d50:	4699      	mov	r9, r3
 8006d52:	4623      	mov	r3, r4
 8006d54:	eb18 0303 	adds.w	r3, r8, r3
 8006d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d5c:	462b      	mov	r3, r5
 8006d5e:	eb49 0303 	adc.w	r3, r9, r3
 8006d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	18db      	adds	r3, r3, r3
 8006d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d80:	4613      	mov	r3, r2
 8006d82:	eb42 0303 	adc.w	r3, r2, r3
 8006d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d90:	f7f9 fa36 	bl	8000200 <__aeabi_uldivmod>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4b61      	ldr	r3, [pc, #388]	@ (8006f20 <UART_SetConfig+0x2d4>)
 8006d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	011c      	lsls	r4, r3, #4
 8006da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006db4:	4642      	mov	r2, r8
 8006db6:	464b      	mov	r3, r9
 8006db8:	1891      	adds	r1, r2, r2
 8006dba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006dbc:	415b      	adcs	r3, r3
 8006dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006dc4:	4641      	mov	r1, r8
 8006dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8006dca:	4649      	mov	r1, r9
 8006dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006de4:	4692      	mov	sl, r2
 8006de6:	469b      	mov	fp, r3
 8006de8:	4643      	mov	r3, r8
 8006dea:	eb1a 0303 	adds.w	r3, sl, r3
 8006dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006df2:	464b      	mov	r3, r9
 8006df4:	eb4b 0303 	adc.w	r3, fp, r3
 8006df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e10:	460b      	mov	r3, r1
 8006e12:	18db      	adds	r3, r3, r3
 8006e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e16:	4613      	mov	r3, r2
 8006e18:	eb42 0303 	adc.w	r3, r2, r3
 8006e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e26:	f7f9 f9eb 	bl	8000200 <__aeabi_uldivmod>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4b3b      	ldr	r3, [pc, #236]	@ (8006f20 <UART_SetConfig+0x2d4>)
 8006e32:	fba3 2301 	umull	r2, r3, r3, r1
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	2264      	movs	r2, #100	@ 0x64
 8006e3a:	fb02 f303 	mul.w	r3, r2, r3
 8006e3e:	1acb      	subs	r3, r1, r3
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e46:	4b36      	ldr	r3, [pc, #216]	@ (8006f20 <UART_SetConfig+0x2d4>)
 8006e48:	fba3 2302 	umull	r2, r3, r3, r2
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e54:	441c      	add	r4, r3
 8006e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e68:	4642      	mov	r2, r8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	1891      	adds	r1, r2, r2
 8006e6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e70:	415b      	adcs	r3, r3
 8006e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e78:	4641      	mov	r1, r8
 8006e7a:	1851      	adds	r1, r2, r1
 8006e7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e7e:	4649      	mov	r1, r9
 8006e80:	414b      	adcs	r3, r1
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e90:	4659      	mov	r1, fp
 8006e92:	00cb      	lsls	r3, r1, #3
 8006e94:	4651      	mov	r1, sl
 8006e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e9a:	4651      	mov	r1, sl
 8006e9c:	00ca      	lsls	r2, r1, #3
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	189b      	adds	r3, r3, r2
 8006ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eac:	464b      	mov	r3, r9
 8006eae:	460a      	mov	r2, r1
 8006eb0:	eb42 0303 	adc.w	r3, r2, r3
 8006eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ecc:	460b      	mov	r3, r1
 8006ece:	18db      	adds	r3, r3, r3
 8006ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	eb42 0303 	adc.w	r3, r2, r3
 8006ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ee2:	f7f9 f98d 	bl	8000200 <__aeabi_uldivmod>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	4b0d      	ldr	r3, [pc, #52]	@ (8006f20 <UART_SetConfig+0x2d4>)
 8006eec:	fba3 1302 	umull	r1, r3, r3, r2
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	2164      	movs	r1, #100	@ 0x64
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	3332      	adds	r3, #50	@ 0x32
 8006efe:	4a08      	ldr	r2, [pc, #32]	@ (8006f20 <UART_SetConfig+0x2d4>)
 8006f00:	fba2 2303 	umull	r2, r3, r2, r3
 8006f04:	095b      	lsrs	r3, r3, #5
 8006f06:	f003 0207 	and.w	r2, r3, #7
 8006f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4422      	add	r2, r4
 8006f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f14:	e106      	b.n	8007124 <UART_SetConfig+0x4d8>
 8006f16:	bf00      	nop
 8006f18:	40011000 	.word	0x40011000
 8006f1c:	40011400 	.word	0x40011400
 8006f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f36:	4642      	mov	r2, r8
 8006f38:	464b      	mov	r3, r9
 8006f3a:	1891      	adds	r1, r2, r2
 8006f3c:	6239      	str	r1, [r7, #32]
 8006f3e:	415b      	adcs	r3, r3
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f46:	4641      	mov	r1, r8
 8006f48:	1854      	adds	r4, r2, r1
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	eb43 0501 	adc.w	r5, r3, r1
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	00eb      	lsls	r3, r5, #3
 8006f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f5e:	00e2      	lsls	r2, r4, #3
 8006f60:	4614      	mov	r4, r2
 8006f62:	461d      	mov	r5, r3
 8006f64:	4643      	mov	r3, r8
 8006f66:	18e3      	adds	r3, r4, r3
 8006f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	eb45 0303 	adc.w	r3, r5, r3
 8006f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f92:	4629      	mov	r1, r5
 8006f94:	008b      	lsls	r3, r1, #2
 8006f96:	4621      	mov	r1, r4
 8006f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	008a      	lsls	r2, r1, #2
 8006fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fa4:	f7f9 f92c 	bl	8000200 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4b60      	ldr	r3, [pc, #384]	@ (8007130 <UART_SetConfig+0x4e4>)
 8006fae:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	011c      	lsls	r4, r3, #4
 8006fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006fc8:	4642      	mov	r2, r8
 8006fca:	464b      	mov	r3, r9
 8006fcc:	1891      	adds	r1, r2, r2
 8006fce:	61b9      	str	r1, [r7, #24]
 8006fd0:	415b      	adcs	r3, r3
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fd8:	4641      	mov	r1, r8
 8006fda:	1851      	adds	r1, r2, r1
 8006fdc:	6139      	str	r1, [r7, #16]
 8006fde:	4649      	mov	r1, r9
 8006fe0:	414b      	adcs	r3, r1
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ff0:	4659      	mov	r1, fp
 8006ff2:	00cb      	lsls	r3, r1, #3
 8006ff4:	4651      	mov	r1, sl
 8006ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	00ca      	lsls	r2, r1, #3
 8006ffe:	4610      	mov	r0, r2
 8007000:	4619      	mov	r1, r3
 8007002:	4603      	mov	r3, r0
 8007004:	4642      	mov	r2, r8
 8007006:	189b      	adds	r3, r3, r2
 8007008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800700c:	464b      	mov	r3, r9
 800700e:	460a      	mov	r2, r1
 8007010:	eb42 0303 	adc.w	r3, r2, r3
 8007014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007022:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007030:	4649      	mov	r1, r9
 8007032:	008b      	lsls	r3, r1, #2
 8007034:	4641      	mov	r1, r8
 8007036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800703a:	4641      	mov	r1, r8
 800703c:	008a      	lsls	r2, r1, #2
 800703e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007042:	f7f9 f8dd 	bl	8000200 <__aeabi_uldivmod>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4611      	mov	r1, r2
 800704c:	4b38      	ldr	r3, [pc, #224]	@ (8007130 <UART_SetConfig+0x4e4>)
 800704e:	fba3 2301 	umull	r2, r3, r3, r1
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	2264      	movs	r2, #100	@ 0x64
 8007056:	fb02 f303 	mul.w	r3, r2, r3
 800705a:	1acb      	subs	r3, r1, r3
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	3332      	adds	r3, #50	@ 0x32
 8007060:	4a33      	ldr	r2, [pc, #204]	@ (8007130 <UART_SetConfig+0x4e4>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800706c:	441c      	add	r4, r3
 800706e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007072:	2200      	movs	r2, #0
 8007074:	673b      	str	r3, [r7, #112]	@ 0x70
 8007076:	677a      	str	r2, [r7, #116]	@ 0x74
 8007078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	1891      	adds	r1, r2, r2
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	415b      	adcs	r3, r3
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800708c:	4641      	mov	r1, r8
 800708e:	1851      	adds	r1, r2, r1
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	4649      	mov	r1, r9
 8007094:	414b      	adcs	r3, r1
 8007096:	607b      	str	r3, [r7, #4]
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070a4:	4659      	mov	r1, fp
 80070a6:	00cb      	lsls	r3, r1, #3
 80070a8:	4651      	mov	r1, sl
 80070aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ae:	4651      	mov	r1, sl
 80070b0:	00ca      	lsls	r2, r1, #3
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	4603      	mov	r3, r0
 80070b8:	4642      	mov	r2, r8
 80070ba:	189b      	adds	r3, r3, r2
 80070bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070be:	464b      	mov	r3, r9
 80070c0:	460a      	mov	r2, r1
 80070c2:	eb42 0303 	adc.w	r3, r2, r3
 80070c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80070d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070e0:	4649      	mov	r1, r9
 80070e2:	008b      	lsls	r3, r1, #2
 80070e4:	4641      	mov	r1, r8
 80070e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070ea:	4641      	mov	r1, r8
 80070ec:	008a      	lsls	r2, r1, #2
 80070ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070f2:	f7f9 f885 	bl	8000200 <__aeabi_uldivmod>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007130 <UART_SetConfig+0x4e4>)
 80070fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	2164      	movs	r1, #100	@ 0x64
 8007104:	fb01 f303 	mul.w	r3, r1, r3
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	3332      	adds	r3, #50	@ 0x32
 800710e:	4a08      	ldr	r2, [pc, #32]	@ (8007130 <UART_SetConfig+0x4e4>)
 8007110:	fba2 2303 	umull	r2, r3, r2, r3
 8007114:	095b      	lsrs	r3, r3, #5
 8007116:	f003 020f 	and.w	r2, r3, #15
 800711a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4422      	add	r2, r4
 8007122:	609a      	str	r2, [r3, #8]
}
 8007124:	bf00      	nop
 8007126:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800712a:	46bd      	mov	sp, r7
 800712c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007130:	51eb851f 	.word	0x51eb851f

08007134 <__NVIC_SetPriority>:
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	6039      	str	r1, [r7, #0]
 800713e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007144:	2b00      	cmp	r3, #0
 8007146:	db0a      	blt.n	800715e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	490c      	ldr	r1, [pc, #48]	@ (8007180 <__NVIC_SetPriority+0x4c>)
 800714e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007152:	0112      	lsls	r2, r2, #4
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	440b      	add	r3, r1
 8007158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800715c:	e00a      	b.n	8007174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	b2da      	uxtb	r2, r3
 8007162:	4908      	ldr	r1, [pc, #32]	@ (8007184 <__NVIC_SetPriority+0x50>)
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	3b04      	subs	r3, #4
 800716c:	0112      	lsls	r2, r2, #4
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	440b      	add	r3, r1
 8007172:	761a      	strb	r2, [r3, #24]
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	e000e100 	.word	0xe000e100
 8007184:	e000ed00 	.word	0xe000ed00

08007188 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800718c:	4b05      	ldr	r3, [pc, #20]	@ (80071a4 <SysTick_Handler+0x1c>)
 800718e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007190:	f002 fbfc 	bl	800998c <xTaskGetSchedulerState>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d001      	beq.n	800719e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800719a:	f003 faf5 	bl	800a788 <xPortSysTickHandler>
  }
}
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	e000e010 	.word	0xe000e010

080071a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071ac:	2100      	movs	r1, #0
 80071ae:	f06f 0004 	mvn.w	r0, #4
 80071b2:	f7ff ffbf 	bl	8007134 <__NVIC_SetPriority>
#endif
}
 80071b6:	bf00      	nop
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c2:	f3ef 8305 	mrs	r3, IPSR
 80071c6:	603b      	str	r3, [r7, #0]
  return(result);
 80071c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071ce:	f06f 0305 	mvn.w	r3, #5
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e00c      	b.n	80071f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80071d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <osKernelInitialize+0x44>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80071de:	4b08      	ldr	r3, [pc, #32]	@ (8007200 <osKernelInitialize+0x44>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	607b      	str	r3, [r7, #4]
 80071e8:	e002      	b.n	80071f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295
 80071ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071f0:	687b      	ldr	r3, [r7, #4]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20002a58 	.word	0x20002a58

08007204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800720a:	f3ef 8305 	mrs	r3, IPSR
 800720e:	603b      	str	r3, [r7, #0]
  return(result);
 8007210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007216:	f06f 0305 	mvn.w	r3, #5
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	e010      	b.n	8007240 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800721e:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <osKernelStart+0x48>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d109      	bne.n	800723a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007226:	f7ff ffbf 	bl	80071a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800722a:	4b08      	ldr	r3, [pc, #32]	@ (800724c <osKernelStart+0x48>)
 800722c:	2202      	movs	r2, #2
 800722e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007230:	f001 ff26 	bl	8009080 <vTaskStartScheduler>
      stat = osOK;
 8007234:	2300      	movs	r3, #0
 8007236:	607b      	str	r3, [r7, #4]
 8007238:	e002      	b.n	8007240 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007240:	687b      	ldr	r3, [r7, #4]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20002a58 	.word	0x20002a58

08007250 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007256:	f3ef 8305 	mrs	r3, IPSR
 800725a:	603b      	str	r3, [r7, #0]
  return(result);
 800725c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007262:	f002 f839 	bl	80092d8 <xTaskGetTickCountFromISR>
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	e002      	b.n	8007270 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800726a:	f002 f825 	bl	80092b8 <xTaskGetTickCount>
 800726e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007270:	687b      	ldr	r3, [r7, #4]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800727a:	b580      	push	{r7, lr}
 800727c:	b08e      	sub	sp, #56	@ 0x38
 800727e:	af04      	add	r7, sp, #16
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800728a:	f3ef 8305 	mrs	r3, IPSR
 800728e:	617b      	str	r3, [r7, #20]
  return(result);
 8007290:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007292:	2b00      	cmp	r3, #0
 8007294:	d17e      	bne.n	8007394 <osThreadNew+0x11a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d07b      	beq.n	8007394 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800729c:	2380      	movs	r3, #128	@ 0x80
 800729e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072a0:	2318      	movs	r3, #24
 80072a2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80072a8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d045      	beq.n	8007340 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <osThreadNew+0x48>
        name = attr->name;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <osThreadNew+0x6e>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2b38      	cmp	r3, #56	@ 0x38
 80072da:	d805      	bhi.n	80072e8 <osThreadNew+0x6e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <osThreadNew+0x72>
        return (NULL);
 80072e8:	2300      	movs	r3, #0
 80072ea:	e054      	b.n	8007396 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	089b      	lsrs	r3, r3, #2
 80072fa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00e      	beq.n	8007322 <osThreadNew+0xa8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	2ba7      	cmp	r3, #167	@ 0xa7
 800730a:	d90a      	bls.n	8007322 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007310:	2b00      	cmp	r3, #0
 8007312:	d006      	beq.n	8007322 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <osThreadNew+0xa8>
        mem = 1;
 800731c:	2301      	movs	r3, #1
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e010      	b.n	8007344 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10c      	bne.n	8007344 <osThreadNew+0xca>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d108      	bne.n	8007344 <osThreadNew+0xca>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <osThreadNew+0xca>
          mem = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	e001      	b.n	8007344 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d110      	bne.n	800736c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007352:	9202      	str	r2, [sp, #8]
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6a3a      	ldr	r2, [r7, #32]
 800735e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 fc99 	bl	8008c98 <xTaskCreateStatic>
 8007366:	4603      	mov	r3, r0
 8007368:	613b      	str	r3, [r7, #16]
 800736a:	e013      	b.n	8007394 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d110      	bne.n	8007394 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	b29a      	uxth	r2, r3
 8007376:	f107 0310 	add.w	r3, r7, #16
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f001 fce7 	bl	8008d58 <xTaskCreate>
 800738a:	4603      	mov	r3, r0
 800738c:	2b01      	cmp	r3, #1
 800738e:	d001      	beq.n	8007394 <osThreadNew+0x11a>
            hTask = NULL;
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007394:	693b      	ldr	r3, [r7, #16]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3728      	adds	r7, #40	@ 0x28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073a6:	f3ef 8305 	mrs	r3, IPSR
 80073aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <osDelay+0x1c>
    stat = osErrorISR;
 80073b2:	f06f 0305 	mvn.w	r3, #5
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e007      	b.n	80073ca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <osDelay+0x2c>
      vTaskDelay(ticks);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fe25 	bl	8009014 <vTaskDelay>
    }
  }

  return (stat);
 80073ca:	68fb      	ldr	r3, [r7, #12]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073e0:	f3ef 8305 	mrs	r3, IPSR
 80073e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80073e6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d174      	bne.n	80074d6 <osMutexNew+0x102>
    if (attr != NULL) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <osMutexNew+0x26>
      type = attr->attr_bits;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	e001      	b.n	80073fe <osMutexNew+0x2a>
    } else {
      type = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <osMutexNew+0x3a>
      rmtx = 1U;
 8007408:	2301      	movs	r3, #1
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e001      	b.n	8007412 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d15c      	bne.n	80074d6 <osMutexNew+0x102>
      mem = -1;
 800741c:	f04f 33ff 	mov.w	r3, #4294967295
 8007420:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d015      	beq.n	8007454 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <osMutexNew+0x6a>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b4f      	cmp	r3, #79	@ 0x4f
 8007436:	d902      	bls.n	800743e <osMutexNew+0x6a>
          mem = 1;
 8007438:	2301      	movs	r3, #1
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	e00c      	b.n	8007458 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d108      	bne.n	8007458 <osMutexNew+0x84>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <osMutexNew+0x84>
            mem = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	e001      	b.n	8007458 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d112      	bne.n	8007484 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	4619      	mov	r1, r3
 800746a:	2004      	movs	r0, #4
 800746c:	f000 fcf9 	bl	8007e62 <xQueueCreateMutexStatic>
 8007470:	61f8      	str	r0, [r7, #28]
 8007472:	e016      	b.n	80074a2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4619      	mov	r1, r3
 800747a:	2001      	movs	r0, #1
 800747c:	f000 fcf1 	bl	8007e62 <xQueueCreateMutexStatic>
 8007480:	61f8      	str	r0, [r7, #28]
 8007482:	e00e      	b.n	80074a2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007490:	2004      	movs	r0, #4
 8007492:	f000 fcce 	bl	8007e32 <xQueueCreateMutex>
 8007496:	61f8      	str	r0, [r7, #28]
 8007498:	e003      	b.n	80074a2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800749a:	2001      	movs	r0, #1
 800749c:	f000 fcc9 	bl	8007e32 <xQueueCreateMutex>
 80074a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00c      	beq.n	80074c2 <osMutexNew+0xee>
        if (attr != NULL) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <osMutexNew+0xe2>
          name = attr->name;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e001      	b.n	80074ba <osMutexNew+0xe6>
        } else {
          name = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	69f8      	ldr	r0, [r7, #28]
 80074be:	f001 fb63 	bl	8008b88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d006      	beq.n	80074d6 <osMutexNew+0x102>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f043 0301 	orr.w	r3, r3, #1
 80074d4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80074d6:	69fb      	ldr	r3, [r7, #28]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fe:	f3ef 8305 	mrs	r3, IPSR
 8007502:	60bb      	str	r3, [r7, #8]
  return(result);
 8007504:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800750a:	f06f 0305 	mvn.w	r3, #5
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	e02c      	b.n	800756c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007518:	f06f 0303 	mvn.w	r3, #3
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	e025      	b.n	800756c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d011      	beq.n	800754a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6938      	ldr	r0, [r7, #16]
 800752a:	f000 fcea 	bl	8007f02 <xQueueTakeMutexRecursive>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d01b      	beq.n	800756c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800753a:	f06f 0301 	mvn.w	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e014      	b.n	800756c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007542:	f06f 0302 	mvn.w	r3, #2
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e010      	b.n	800756c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6938      	ldr	r0, [r7, #16]
 800754e:	f000 ffff 	bl	8008550 <xQueueSemaphoreTake>
 8007552:	4603      	mov	r3, r0
 8007554:	2b01      	cmp	r3, #1
 8007556:	d009      	beq.n	800756c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800755e:	f06f 0301 	mvn.w	r3, #1
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e002      	b.n	800756c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007566:	f06f 0302 	mvn.w	r3, #2
 800756a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800756c:	697b      	ldr	r3, [r7, #20]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007576:	b580      	push	{r7, lr}
 8007578:	b086      	sub	sp, #24
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007592:	f3ef 8305 	mrs	r3, IPSR
 8007596:	60bb      	str	r3, [r7, #8]
  return(result);
 8007598:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800759e:	f06f 0305 	mvn.w	r3, #5
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e01f      	b.n	80075e6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80075ac:	f06f 0303 	mvn.w	r3, #3
 80075b0:	617b      	str	r3, [r7, #20]
 80075b2:	e018      	b.n	80075e6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80075ba:	6938      	ldr	r0, [r7, #16]
 80075bc:	f000 fc6c 	bl	8007e98 <xQueueGiveMutexRecursive>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d00f      	beq.n	80075e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80075c6:	f06f 0302 	mvn.w	r3, #2
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e00b      	b.n	80075e6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80075ce:	2300      	movs	r3, #0
 80075d0:	2200      	movs	r2, #0
 80075d2:	2100      	movs	r1, #0
 80075d4:	6938      	ldr	r0, [r7, #16]
 80075d6:	f000 fd39 	bl	800804c <xQueueGenericSend>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d002      	beq.n	80075e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80075e0:	f06f 0302 	mvn.w	r3, #2
 80075e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80075e6:	697b      	ldr	r3, [r7, #20]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	@ 0x28
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007600:	f3ef 8305 	mrs	r3, IPSR
 8007604:	613b      	str	r3, [r7, #16]
  return(result);
 8007606:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007608:	2b00      	cmp	r3, #0
 800760a:	d175      	bne.n	80076f8 <osSemaphoreNew+0x108>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d072      	beq.n	80076f8 <osSemaphoreNew+0x108>
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	429a      	cmp	r2, r3
 8007618:	d86e      	bhi.n	80076f8 <osSemaphoreNew+0x108>
    mem = -1;
 800761a:	f04f 33ff 	mov.w	r3, #4294967295
 800761e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d015      	beq.n	8007652 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d006      	beq.n	800763c <osSemaphoreNew+0x4c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	2b4f      	cmp	r3, #79	@ 0x4f
 8007634:	d902      	bls.n	800763c <osSemaphoreNew+0x4c>
        mem = 1;
 8007636:	2301      	movs	r3, #1
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e00c      	b.n	8007656 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d108      	bne.n	8007656 <osSemaphoreNew+0x66>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <osSemaphoreNew+0x66>
          mem = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	e001      	b.n	8007656 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d04c      	beq.n	80076f8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d128      	bne.n	80076b6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d10a      	bne.n	8007680 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2203      	movs	r2, #3
 8007670:	9200      	str	r2, [sp, #0]
 8007672:	2200      	movs	r2, #0
 8007674:	2100      	movs	r1, #0
 8007676:	2001      	movs	r0, #1
 8007678:	f000 fae6 	bl	8007c48 <xQueueGenericCreateStatic>
 800767c:	61f8      	str	r0, [r7, #28]
 800767e:	e005      	b.n	800768c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007680:	2203      	movs	r2, #3
 8007682:	2100      	movs	r1, #0
 8007684:	2001      	movs	r0, #1
 8007686:	f000 fb5c 	bl	8007d42 <xQueueGenericCreate>
 800768a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d022      	beq.n	80076d8 <osSemaphoreNew+0xe8>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01f      	beq.n	80076d8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007698:	2300      	movs	r3, #0
 800769a:	2200      	movs	r2, #0
 800769c:	2100      	movs	r1, #0
 800769e:	69f8      	ldr	r0, [r7, #28]
 80076a0:	f000 fcd4 	bl	800804c <xQueueGenericSend>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d016      	beq.n	80076d8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80076aa:	69f8      	ldr	r0, [r7, #28]
 80076ac:	f001 f920 	bl	80088f0 <vQueueDelete>
            hSemaphore = NULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61fb      	str	r3, [r7, #28]
 80076b4:	e010      	b.n	80076d8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d108      	bne.n	80076ce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	461a      	mov	r2, r3
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fc53 	bl	8007f70 <xQueueCreateCountingSemaphoreStatic>
 80076ca:	61f8      	str	r0, [r7, #28]
 80076cc:	e004      	b.n	80076d8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 fc86 	bl	8007fe2 <xQueueCreateCountingSemaphore>
 80076d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00c      	beq.n	80076f8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <osSemaphoreNew+0xfc>
          name = attr->name;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e001      	b.n	80076f0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80076f0:	6979      	ldr	r1, [r7, #20]
 80076f2:	69f8      	ldr	r0, [r7, #28]
 80076f4:	f001 fa48 	bl	8008b88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80076f8:	69fb      	ldr	r3, [r7, #28]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3720      	adds	r7, #32
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007702:	b580      	push	{r7, lr}
 8007704:	b08a      	sub	sp, #40	@ 0x28
 8007706:	af02      	add	r7, sp, #8
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007712:	f3ef 8305 	mrs	r3, IPSR
 8007716:	613b      	str	r3, [r7, #16]
  return(result);
 8007718:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800771a:	2b00      	cmp	r3, #0
 800771c:	d15f      	bne.n	80077de <osMessageQueueNew+0xdc>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d05c      	beq.n	80077de <osMessageQueueNew+0xdc>
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d059      	beq.n	80077de <osMessageQueueNew+0xdc>
    mem = -1;
 800772a:	f04f 33ff 	mov.w	r3, #4294967295
 800772e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d029      	beq.n	800778a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d012      	beq.n	8007764 <osMessageQueueNew+0x62>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	2b4f      	cmp	r3, #79	@ 0x4f
 8007744:	d90e      	bls.n	8007764 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695a      	ldr	r2, [r3, #20]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	fb01 f303 	mul.w	r3, r1, r3
 800775a:	429a      	cmp	r2, r3
 800775c:	d302      	bcc.n	8007764 <osMessageQueueNew+0x62>
        mem = 1;
 800775e:	2301      	movs	r3, #1
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	e014      	b.n	800778e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d110      	bne.n	800778e <osMessageQueueNew+0x8c>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10c      	bne.n	800778e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007778:	2b00      	cmp	r3, #0
 800777a:	d108      	bne.n	800778e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <osMessageQueueNew+0x8c>
          mem = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	e001      	b.n	800778e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10b      	bne.n	80077ac <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	2100      	movs	r1, #0
 800779e:	9100      	str	r1, [sp, #0]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fa50 	bl	8007c48 <xQueueGenericCreateStatic>
 80077a8:	61f8      	str	r0, [r7, #28]
 80077aa:	e008      	b.n	80077be <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80077b2:	2200      	movs	r2, #0
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fac3 	bl	8007d42 <xQueueGenericCreate>
 80077bc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00c      	beq.n	80077de <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e001      	b.n	80077d6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80077d6:	6979      	ldr	r1, [r7, #20]
 80077d8:	69f8      	ldr	r0, [r7, #28]
 80077da:	f001 f9d5 	bl	8008b88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80077de:	69fb      	ldr	r3, [r7, #28]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	4613      	mov	r3, r2
 80077f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007800:	f3ef 8305 	mrs	r3, IPSR
 8007804:	617b      	str	r3, [r7, #20]
  return(result);
 8007806:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007808:	2b00      	cmp	r3, #0
 800780a:	d028      	beq.n	800785e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <osMessageQueuePut+0x36>
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <osMessageQueuePut+0x36>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800781e:	f06f 0303 	mvn.w	r3, #3
 8007822:	61fb      	str	r3, [r7, #28]
 8007824:	e038      	b.n	8007898 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007826:	2300      	movs	r3, #0
 8007828:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800782a:	f107 0210 	add.w	r2, r7, #16
 800782e:	2300      	movs	r3, #0
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	69b8      	ldr	r0, [r7, #24]
 8007834:	f000 fd0c 	bl	8008250 <xQueueGenericSendFromISR>
 8007838:	4603      	mov	r3, r0
 800783a:	2b01      	cmp	r3, #1
 800783c:	d003      	beq.n	8007846 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800783e:	f06f 0302 	mvn.w	r3, #2
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	e028      	b.n	8007898 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d025      	beq.n	8007898 <osMessageQueuePut+0xb0>
 800784c:	4b15      	ldr	r3, [pc, #84]	@ (80078a4 <osMessageQueuePut+0xbc>)
 800784e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	e01c      	b.n	8007898 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <osMessageQueuePut+0x82>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800786a:	f06f 0303 	mvn.w	r3, #3
 800786e:	61fb      	str	r3, [r7, #28]
 8007870:	e012      	b.n	8007898 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007872:	2300      	movs	r3, #0
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	68b9      	ldr	r1, [r7, #8]
 8007878:	69b8      	ldr	r0, [r7, #24]
 800787a:	f000 fbe7 	bl	800804c <xQueueGenericSend>
 800787e:	4603      	mov	r3, r0
 8007880:	2b01      	cmp	r3, #1
 8007882:	d009      	beq.n	8007898 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800788a:	f06f 0301 	mvn.w	r3, #1
 800788e:	61fb      	str	r3, [r7, #28]
 8007890:	e002      	b.n	8007898 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007892:	f06f 0302 	mvn.w	r3, #2
 8007896:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007898:	69fb      	ldr	r3, [r7, #28]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3720      	adds	r7, #32
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078be:	f3ef 8305 	mrs	r3, IPSR
 80078c2:	617b      	str	r3, [r7, #20]
  return(result);
 80078c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d028      	beq.n	800791c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <osMessageQueueGet+0x34>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <osMessageQueueGet+0x34>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80078dc:	f06f 0303 	mvn.w	r3, #3
 80078e0:	61fb      	str	r3, [r7, #28]
 80078e2:	e037      	b.n	8007954 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80078e4:	2300      	movs	r3, #0
 80078e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80078e8:	f107 0310 	add.w	r3, r7, #16
 80078ec:	461a      	mov	r2, r3
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	69b8      	ldr	r0, [r7, #24]
 80078f2:	f000 ff3d 	bl	8008770 <xQueueReceiveFromISR>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d003      	beq.n	8007904 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80078fc:	f06f 0302 	mvn.w	r3, #2
 8007900:	61fb      	str	r3, [r7, #28]
 8007902:	e027      	b.n	8007954 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d024      	beq.n	8007954 <osMessageQueueGet+0xac>
 800790a:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <osMessageQueueGet+0xb8>)
 800790c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	e01b      	b.n	8007954 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <osMessageQueueGet+0x80>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007928:	f06f 0303 	mvn.w	r3, #3
 800792c:	61fb      	str	r3, [r7, #28]
 800792e:	e011      	b.n	8007954 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	69b8      	ldr	r0, [r7, #24]
 8007936:	f000 fd29 	bl	800838c <xQueueReceive>
 800793a:	4603      	mov	r3, r0
 800793c:	2b01      	cmp	r3, #1
 800793e:	d009      	beq.n	8007954 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007946:	f06f 0301 	mvn.w	r3, #1
 800794a:	61fb      	str	r3, [r7, #28]
 800794c:	e002      	b.n	8007954 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800794e:	f06f 0302 	mvn.w	r3, #2
 8007952:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007954:	69fb      	ldr	r3, [r7, #28]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <osMessageQueueGetCount+0x18>
    count = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	e00e      	b.n	800799a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800797c:	f3ef 8305 	mrs	r3, IPSR
 8007980:	60fb      	str	r3, [r7, #12]
  return(result);
 8007982:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007988:	6938      	ldr	r0, [r7, #16]
 800798a:	f000 ff92 	bl	80088b2 <uxQueueMessagesWaitingFromISR>
 800798e:	6178      	str	r0, [r7, #20]
 8007990:	e003      	b.n	800799a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007992:	6938      	ldr	r0, [r7, #16]
 8007994:	f000 ff6e 	bl	8008874 <uxQueueMessagesWaiting>
 8007998:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800799a:	697b      	ldr	r3, [r7, #20]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4a07      	ldr	r2, [pc, #28]	@ (80079d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80079b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	4a06      	ldr	r2, [pc, #24]	@ (80079d4 <vApplicationGetIdleTaskMemory+0x30>)
 80079ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2280      	movs	r2, #128	@ 0x80
 80079c0:	601a      	str	r2, [r3, #0]
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20002a5c 	.word	0x20002a5c
 80079d4:	20002b04 	.word	0x20002b04

080079d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4a07      	ldr	r2, [pc, #28]	@ (8007a04 <vApplicationGetTimerTaskMemory+0x2c>)
 80079e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	4a06      	ldr	r2, [pc, #24]	@ (8007a08 <vApplicationGetTimerTaskMemory+0x30>)
 80079ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079f6:	601a      	str	r2, [r3, #0]
}
 80079f8:	bf00      	nop
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	20002d04 	.word	0x20002d04
 8007a08:	20002dac 	.word	0x20002dac

08007a0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f103 0208 	add.w	r2, r3, #8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f103 0208 	add.w	r2, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f103 0208 	add.w	r2, r3, #8
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d103      	bne.n	8007ace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	e00c      	b.n	8007ae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e002      	b.n	8007adc <vListInsert+0x2e>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d2f6      	bcs.n	8007ad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6892      	ldr	r2, [r2, #8]
 8007b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	6852      	ldr	r2, [r2, #4]
 8007b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d103      	bne.n	8007b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1e5a      	subs	r2, r3, #1
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10b      	bne.n	8007ba0 <xQueueGenericReset+0x2c>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	60bb      	str	r3, [r7, #8]
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ba0:	f002 fd62 	bl	800a668 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bac:	68f9      	ldr	r1, [r7, #12]
 8007bae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	441a      	add	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	441a      	add	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	22ff      	movs	r2, #255	@ 0xff
 8007be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	22ff      	movs	r2, #255	@ 0xff
 8007bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d114      	bne.n	8007c20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01a      	beq.n	8007c34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3310      	adds	r3, #16
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 fcec 	bl	80095e0 <xTaskRemoveFromEventList>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d012      	beq.n	8007c34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c44 <xQueueGenericReset+0xd0>)
 8007c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	e009      	b.n	8007c34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3310      	adds	r3, #16
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fef1 	bl	8007a0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3324      	adds	r3, #36	@ 0x24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff feec 	bl	8007a0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c34:	f002 fd4a 	bl	800a6cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c38:	2301      	movs	r3, #1
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	e000ed04 	.word	0xe000ed04

08007c48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08e      	sub	sp, #56	@ 0x38
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	e7fd      	b.n	8007c70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <xQueueGenericCreateStatic+0x56>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <xQueueGenericCreateStatic+0x5a>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e000      	b.n	8007ca4 <xQueueGenericCreateStatic+0x5c>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	623b      	str	r3, [r7, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	bf00      	nop
 8007cbe:	e7fd      	b.n	8007cbc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <xQueueGenericCreateStatic+0x84>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <xQueueGenericCreateStatic+0x88>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <xQueueGenericCreateStatic+0x8a>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61fb      	str	r3, [r7, #28]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cee:	2350      	movs	r3, #80	@ 0x50
 8007cf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b50      	cmp	r3, #80	@ 0x50
 8007cf6:	d00b      	beq.n	8007d10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	61bb      	str	r3, [r7, #24]
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	e7fd      	b.n	8007d0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f840 	bl	8007db8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3730      	adds	r7, #48	@ 0x30
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b08a      	sub	sp, #40	@ 0x28
 8007d46:	af02      	add	r7, sp, #8
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10b      	bne.n	8007d6e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	613b      	str	r3, [r7, #16]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	fb02 f303 	mul.w	r3, r2, r3
 8007d76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	3350      	adds	r3, #80	@ 0x50
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f002 fd95 	bl	800a8ac <pvPortMalloc>
 8007d82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d011      	beq.n	8007dae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	3350      	adds	r3, #80	@ 0x50
 8007d92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d9c:	79fa      	ldrb	r2, [r7, #7]
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4613      	mov	r3, r2
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f805 	bl	8007db8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dae:	69bb      	ldr	r3, [r7, #24]
	}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e002      	b.n	8007dda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007de6:	2101      	movs	r1, #1
 8007de8:	69b8      	ldr	r0, [r7, #24]
 8007dea:	f7ff fec3 	bl	8007b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00e      	beq.n	8007e2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2200      	movs	r2, #0
 8007e22:	2100      	movs	r1, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f911 	bl	800804c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b086      	sub	sp, #24
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	4603      	mov	r3, r0
 8007e3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	461a      	mov	r2, r3
 8007e48:	6939      	ldr	r1, [r7, #16]
 8007e4a:	6978      	ldr	r0, [r7, #20]
 8007e4c:	f7ff ff79 	bl	8007d42 <xQueueGenericCreate>
 8007e50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff ffd3 	bl	8007dfe <prvInitialiseMutex>

		return xNewQueue;
 8007e58:	68fb      	ldr	r3, [r7, #12]
	}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b088      	sub	sp, #32
 8007e66:	af02      	add	r7, sp, #8
 8007e68:	4603      	mov	r3, r0
 8007e6a:	6039      	str	r1, [r7, #0]
 8007e6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	617b      	str	r3, [r7, #20]
 8007e72:	2300      	movs	r3, #0
 8007e74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	6939      	ldr	r1, [r7, #16]
 8007e80:	6978      	ldr	r0, [r7, #20]
 8007e82:	f7ff fee1 	bl	8007c48 <xQueueGenericCreateStatic>
 8007e86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff ffb8 	bl	8007dfe <prvInitialiseMutex>

		return xNewQueue;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10b      	bne.n	8007ec2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	60fb      	str	r3, [r7, #12]
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	e7fd      	b.n	8007ebe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	689c      	ldr	r4, [r3, #8]
 8007ec6:	f001 fd51 	bl	800996c <xTaskGetCurrentTaskHandle>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	d111      	bne.n	8007ef4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	1e5a      	subs	r2, r3, #1
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	6938      	ldr	r0, [r7, #16]
 8007eea:	f000 f8af 	bl	800804c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	e001      	b.n	8007ef8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007ef8:	697b      	ldr	r3, [r7, #20]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd90      	pop	{r4, r7, pc}

08007f02 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007f02:	b590      	push	{r4, r7, lr}
 8007f04:	b087      	sub	sp, #28
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	60fb      	str	r3, [r7, #12]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	689c      	ldr	r4, [r3, #8]
 8007f32:	f001 fd1b 	bl	800996c <xTaskGetCurrentTaskHandle>
 8007f36:	4603      	mov	r3, r0
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d107      	bne.n	8007f4c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007f46:	2301      	movs	r3, #1
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	e00c      	b.n	8007f66 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6938      	ldr	r0, [r7, #16]
 8007f50:	f000 fafe 	bl	8008550 <xQueueSemaphoreTake>
 8007f54:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007f66:	697b      	ldr	r3, [r7, #20]
	}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd90      	pop	{r4, r7, pc}

08007f70 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08a      	sub	sp, #40	@ 0x28
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	61bb      	str	r3, [r7, #24]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d90b      	bls.n	8007fba <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	617b      	str	r3, [r7, #20]
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	e7fd      	b.n	8007fb6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007fba:	2302      	movs	r3, #2
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7ff fe3f 	bl	8007c48 <xQueueGenericCreateStatic>
 8007fca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
	}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10b      	bne.n	800800a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	613b      	str	r3, [r7, #16]
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	429a      	cmp	r2, r3
 8008010:	d90b      	bls.n	800802a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	60fb      	str	r3, [r7, #12]
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	e7fd      	b.n	8008026 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800802a:	2202      	movs	r2, #2
 800802c:	2100      	movs	r1, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff fe87 	bl	8007d42 <xQueueGenericCreate>
 8008034:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008042:	697b      	ldr	r3, [r7, #20]
	}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08e      	sub	sp, #56	@ 0x38
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800805a:	2300      	movs	r3, #0
 800805c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10b      	bne.n	8008080 <xQueueGenericSend+0x34>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800807a:	bf00      	nop
 800807c:	bf00      	nop
 800807e:	e7fd      	b.n	800807c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <xQueueGenericSend+0x42>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <xQueueGenericSend+0x46>
 800808e:	2301      	movs	r3, #1
 8008090:	e000      	b.n	8008094 <xQueueGenericSend+0x48>
 8008092:	2300      	movs	r3, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <xQueueGenericSend+0x64>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d103      	bne.n	80080be <xQueueGenericSend+0x72>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <xQueueGenericSend+0x76>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <xQueueGenericSend+0x78>
 80080c2:	2300      	movs	r3, #0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10b      	bne.n	80080e0 <xQueueGenericSend+0x94>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	623b      	str	r3, [r7, #32]
}
 80080da:	bf00      	nop
 80080dc:	bf00      	nop
 80080de:	e7fd      	b.n	80080dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080e0:	f001 fc54 	bl	800998c <xTaskGetSchedulerState>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <xQueueGenericSend+0xa4>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <xQueueGenericSend+0xa8>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <xQueueGenericSend+0xaa>
 80080f4:	2300      	movs	r3, #0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <xQueueGenericSend+0xc6>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	61fb      	str	r3, [r7, #28]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008112:	f002 faa9 	bl	800a668 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <xQueueGenericSend+0xdc>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d129      	bne.n	800817c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800812e:	f000 fc1b 	bl	8008968 <prvCopyDataToQueue>
 8008132:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d010      	beq.n	800815e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800813c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813e:	3324      	adds	r3, #36	@ 0x24
 8008140:	4618      	mov	r0, r3
 8008142:	f001 fa4d 	bl	80095e0 <xTaskRemoveFromEventList>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d013      	beq.n	8008174 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800814c:	4b3f      	ldr	r3, [pc, #252]	@ (800824c <xQueueGenericSend+0x200>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	e00a      	b.n	8008174 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800815e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008164:	4b39      	ldr	r3, [pc, #228]	@ (800824c <xQueueGenericSend+0x200>)
 8008166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008174:	f002 faaa 	bl	800a6cc <vPortExitCritical>
				return pdPASS;
 8008178:	2301      	movs	r3, #1
 800817a:	e063      	b.n	8008244 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d103      	bne.n	800818a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008182:	f002 faa3 	bl	800a6cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008186:	2300      	movs	r3, #0
 8008188:	e05c      	b.n	8008244 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800818a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4618      	mov	r0, r3
 8008196:	f001 fa87 	bl	80096a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800819a:	2301      	movs	r3, #1
 800819c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800819e:	f002 fa95 	bl	800a6cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081a2:	f000 ffdd 	bl	8009160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081a6:	f002 fa5f 	bl	800a668 <vPortEnterCritical>
 80081aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d103      	bne.n	80081c0 <xQueueGenericSend+0x174>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081c6:	b25b      	sxtb	r3, r3
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081cc:	d103      	bne.n	80081d6 <xQueueGenericSend+0x18a>
 80081ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081d6:	f002 fa79 	bl	800a6cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081da:	1d3a      	adds	r2, r7, #4
 80081dc:	f107 0314 	add.w	r3, r7, #20
 80081e0:	4611      	mov	r1, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 fa76 	bl	80096d4 <xTaskCheckForTimeOut>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d124      	bne.n	8008238 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081f0:	f000 fcb2 	bl	8008b58 <prvIsQueueFull>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d018      	beq.n	800822c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	3310      	adds	r3, #16
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	4611      	mov	r1, r2
 8008202:	4618      	mov	r0, r3
 8008204:	f001 f99a 	bl	800953c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800820a:	f000 fc3d 	bl	8008a88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800820e:	f000 ffb5 	bl	800917c <xTaskResumeAll>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	f47f af7c 	bne.w	8008112 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800821a:	4b0c      	ldr	r3, [pc, #48]	@ (800824c <xQueueGenericSend+0x200>)
 800821c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	e772      	b.n	8008112 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800822c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800822e:	f000 fc2b 	bl	8008a88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008232:	f000 ffa3 	bl	800917c <xTaskResumeAll>
 8008236:	e76c      	b.n	8008112 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800823a:	f000 fc25 	bl	8008a88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800823e:	f000 ff9d 	bl	800917c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008242:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008244:	4618      	mov	r0, r3
 8008246:	3738      	adds	r7, #56	@ 0x38
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	e000ed04 	.word	0xe000ed04

08008250 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b090      	sub	sp, #64	@ 0x40
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10b      	bne.n	8008280 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800827a:	bf00      	nop
 800827c:	bf00      	nop
 800827e:	e7fd      	b.n	800827c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d103      	bne.n	800828e <xQueueGenericSendFromISR+0x3e>
 8008286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <xQueueGenericSendFromISR+0x42>
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <xQueueGenericSendFromISR+0x44>
 8008292:	2300      	movs	r3, #0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10b      	bne.n	80082b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	e7fd      	b.n	80082ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d103      	bne.n	80082be <xQueueGenericSendFromISR+0x6e>
 80082b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <xQueueGenericSendFromISR+0x72>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <xQueueGenericSendFromISR+0x74>
 80082c2:	2300      	movs	r3, #0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10b      	bne.n	80082e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	623b      	str	r3, [r7, #32]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082e0:	f002 faa2 	bl	800a828 <vPortValidateInterruptPriority>
	__asm volatile
 80082e4:	f3ef 8211 	mrs	r2, BASEPRI
 80082e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	61fa      	str	r2, [r7, #28]
 80082fa:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80082fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008308:	429a      	cmp	r2, r3
 800830a:	d302      	bcc.n	8008312 <xQueueGenericSendFromISR+0xc2>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d12f      	bne.n	8008372 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008318:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008320:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008328:	f000 fb1e 	bl	8008968 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800832c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d112      	bne.n	800835c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833a:	2b00      	cmp	r3, #0
 800833c:	d016      	beq.n	800836c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800833e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008340:	3324      	adds	r3, #36	@ 0x24
 8008342:	4618      	mov	r0, r3
 8008344:	f001 f94c 	bl	80095e0 <xTaskRemoveFromEventList>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00e      	beq.n	800836c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e007      	b.n	800836c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800835c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008360:	3301      	adds	r3, #1
 8008362:	b2db      	uxtb	r3, r3
 8008364:	b25a      	sxtb	r2, r3
 8008366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800836c:	2301      	movs	r3, #1
 800836e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008370:	e001      	b.n	8008376 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008372:	2300      	movs	r3, #0
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008378:	617b      	str	r3, [r7, #20]
	__asm volatile
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f383 8811 	msr	BASEPRI, r3
}
 8008380:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008384:	4618      	mov	r0, r3
 8008386:	3740      	adds	r7, #64	@ 0x40
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08c      	sub	sp, #48	@ 0x30
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008398:	2300      	movs	r3, #0
 800839a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10b      	bne.n	80083be <xQueueReceive+0x32>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	623b      	str	r3, [r7, #32]
}
 80083b8:	bf00      	nop
 80083ba:	bf00      	nop
 80083bc:	e7fd      	b.n	80083ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <xQueueReceive+0x40>
 80083c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <xQueueReceive+0x44>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <xQueueReceive+0x46>
 80083d0:	2300      	movs	r3, #0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10b      	bne.n	80083ee <xQueueReceive+0x62>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	61fb      	str	r3, [r7, #28]
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	e7fd      	b.n	80083ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083ee:	f001 facd 	bl	800998c <xTaskGetSchedulerState>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <xQueueReceive+0x72>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <xQueueReceive+0x76>
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <xQueueReceive+0x78>
 8008402:	2300      	movs	r3, #0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10b      	bne.n	8008420 <xQueueReceive+0x94>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	61bb      	str	r3, [r7, #24]
}
 800841a:	bf00      	nop
 800841c:	bf00      	nop
 800841e:	e7fd      	b.n	800841c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008420:	f002 f922 	bl	800a668 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008428:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01f      	beq.n	8008470 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008434:	f000 fb02 	bl	8008a3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	1e5a      	subs	r2, r3, #1
 800843c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00f      	beq.n	8008468 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844a:	3310      	adds	r3, #16
 800844c:	4618      	mov	r0, r3
 800844e:	f001 f8c7 	bl	80095e0 <xTaskRemoveFromEventList>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008458:	4b3c      	ldr	r3, [pc, #240]	@ (800854c <xQueueReceive+0x1c0>)
 800845a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008468:	f002 f930 	bl	800a6cc <vPortExitCritical>
				return pdPASS;
 800846c:	2301      	movs	r3, #1
 800846e:	e069      	b.n	8008544 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008476:	f002 f929 	bl	800a6cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800847a:	2300      	movs	r3, #0
 800847c:	e062      	b.n	8008544 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800847e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d106      	bne.n	8008492 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008484:	f107 0310 	add.w	r3, r7, #16
 8008488:	4618      	mov	r0, r3
 800848a:	f001 f90d 	bl	80096a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800848e:	2301      	movs	r3, #1
 8008490:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008492:	f002 f91b 	bl	800a6cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008496:	f000 fe63 	bl	8009160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800849a:	f002 f8e5 	bl	800a668 <vPortEnterCritical>
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084a4:	b25b      	sxtb	r3, r3
 80084a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084aa:	d103      	bne.n	80084b4 <xQueueReceive+0x128>
 80084ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084ba:	b25b      	sxtb	r3, r3
 80084bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c0:	d103      	bne.n	80084ca <xQueueReceive+0x13e>
 80084c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084ca:	f002 f8ff 	bl	800a6cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084ce:	1d3a      	adds	r2, r7, #4
 80084d0:	f107 0310 	add.w	r3, r7, #16
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f8fc 	bl	80096d4 <xTaskCheckForTimeOut>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d123      	bne.n	800852a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084e4:	f000 fb22 	bl	8008b2c <prvIsQueueEmpty>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d017      	beq.n	800851e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f0:	3324      	adds	r3, #36	@ 0x24
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 f820 	bl	800953c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084fe:	f000 fac3 	bl	8008a88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008502:	f000 fe3b 	bl	800917c <xTaskResumeAll>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d189      	bne.n	8008420 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800850c:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <xQueueReceive+0x1c0>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	e780      	b.n	8008420 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800851e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008520:	f000 fab2 	bl	8008a88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008524:	f000 fe2a 	bl	800917c <xTaskResumeAll>
 8008528:	e77a      	b.n	8008420 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800852a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800852c:	f000 faac 	bl	8008a88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008530:	f000 fe24 	bl	800917c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008534:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008536:	f000 faf9 	bl	8008b2c <prvIsQueueEmpty>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	f43f af6f 	beq.w	8008420 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008542:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008544:	4618      	mov	r0, r3
 8008546:	3730      	adds	r7, #48	@ 0x30
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	e000ed04 	.word	0xe000ed04

08008550 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08e      	sub	sp, #56	@ 0x38
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800855a:	2300      	movs	r3, #0
 800855c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008562:	2300      	movs	r3, #0
 8008564:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10b      	bne.n	8008584 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	623b      	str	r3, [r7, #32]
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	e7fd      	b.n	8008580 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	61fb      	str	r3, [r7, #28]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085a4:	f001 f9f2 	bl	800998c <xTaskGetSchedulerState>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <xQueueSemaphoreTake+0x64>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <xQueueSemaphoreTake+0x68>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <xQueueSemaphoreTake+0x6a>
 80085b8:	2300      	movs	r3, #0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	61bb      	str	r3, [r7, #24]
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	e7fd      	b.n	80085d2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085d6:	f002 f847 	bl	800a668 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80085da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80085e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d024      	beq.n	8008630 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80085e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e8:	1e5a      	subs	r2, r3, #1
 80085ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d104      	bne.n	8008600 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80085f6:	f001 fb43 	bl	8009c80 <pvTaskIncrementMutexHeldCount>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00f      	beq.n	8008628 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	3310      	adds	r3, #16
 800860c:	4618      	mov	r0, r3
 800860e:	f000 ffe7 	bl	80095e0 <xTaskRemoveFromEventList>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008618:	4b54      	ldr	r3, [pc, #336]	@ (800876c <xQueueSemaphoreTake+0x21c>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008628:	f002 f850 	bl	800a6cc <vPortExitCritical>
				return pdPASS;
 800862c:	2301      	movs	r3, #1
 800862e:	e098      	b.n	8008762 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d112      	bne.n	800865c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	617b      	str	r3, [r7, #20]
}
 800864e:	bf00      	nop
 8008650:	bf00      	nop
 8008652:	e7fd      	b.n	8008650 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008654:	f002 f83a 	bl	800a6cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008658:	2300      	movs	r3, #0
 800865a:	e082      	b.n	8008762 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800865c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865e:	2b00      	cmp	r3, #0
 8008660:	d106      	bne.n	8008670 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008662:	f107 030c 	add.w	r3, r7, #12
 8008666:	4618      	mov	r0, r3
 8008668:	f001 f81e 	bl	80096a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008670:	f002 f82c 	bl	800a6cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008674:	f000 fd74 	bl	8009160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008678:	f001 fff6 	bl	800a668 <vPortEnterCritical>
 800867c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008682:	b25b      	sxtb	r3, r3
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d103      	bne.n	8008692 <xQueueSemaphoreTake+0x142>
 800868a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008698:	b25b      	sxtb	r3, r3
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869e:	d103      	bne.n	80086a8 <xQueueSemaphoreTake+0x158>
 80086a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086a8:	f002 f810 	bl	800a6cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086ac:	463a      	mov	r2, r7
 80086ae:	f107 030c 	add.w	r3, r7, #12
 80086b2:	4611      	mov	r1, r2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 f80d 	bl	80096d4 <xTaskCheckForTimeOut>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d132      	bne.n	8008726 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086c2:	f000 fa33 	bl	8008b2c <prvIsQueueEmpty>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d026      	beq.n	800871a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d109      	bne.n	80086e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80086d4:	f001 ffc8 	bl	800a668 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 f973 	bl	80099c8 <xTaskPriorityInherit>
 80086e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80086e4:	f001 fff2 	bl	800a6cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ea:	3324      	adds	r3, #36	@ 0x24
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	4611      	mov	r1, r2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 ff23 	bl	800953c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086f8:	f000 f9c6 	bl	8008a88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086fc:	f000 fd3e 	bl	800917c <xTaskResumeAll>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	f47f af67 	bne.w	80085d6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008708:	4b18      	ldr	r3, [pc, #96]	@ (800876c <xQueueSemaphoreTake+0x21c>)
 800870a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	e75d      	b.n	80085d6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800871a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800871c:	f000 f9b4 	bl	8008a88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008720:	f000 fd2c 	bl	800917c <xTaskResumeAll>
 8008724:	e757      	b.n	80085d6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008726:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008728:	f000 f9ae 	bl	8008a88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800872c:	f000 fd26 	bl	800917c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008730:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008732:	f000 f9fb 	bl	8008b2c <prvIsQueueEmpty>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	f43f af4c 	beq.w	80085d6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00d      	beq.n	8008760 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008744:	f001 ff90 	bl	800a668 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008748:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800874a:	f000 f8f5 	bl	8008938 <prvGetDisinheritPriorityAfterTimeout>
 800874e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fa0e 	bl	8009b78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800875c:	f001 ffb6 	bl	800a6cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008762:	4618      	mov	r0, r3
 8008764:	3738      	adds	r7, #56	@ 0x38
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08e      	sub	sp, #56	@ 0x38
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	623b      	str	r3, [r7, #32]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <xQueueReceiveFromISR+0x3c>
 80087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <xQueueReceiveFromISR+0x40>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <xQueueReceiveFromISR+0x42>
 80087b0:	2300      	movs	r3, #0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	61fb      	str	r3, [r7, #28]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ce:	f002 f82b 	bl	800a828 <vPortValidateInterruptPriority>
	__asm volatile
 80087d2:	f3ef 8211 	mrs	r2, BASEPRI
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	61ba      	str	r2, [r7, #24]
 80087e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80087ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d02f      	beq.n	800885a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008808:	f000 f918 	bl	8008a3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	1e5a      	subs	r2, r3, #1
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008814:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d112      	bne.n	8008844 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d016      	beq.n	8008854 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	3310      	adds	r3, #16
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fed8 	bl	80095e0 <xTaskRemoveFromEventList>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e007      	b.n	8008854 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008848:	3301      	adds	r3, #1
 800884a:	b2db      	uxtb	r3, r3
 800884c:	b25a      	sxtb	r2, r3
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
 8008858:	e001      	b.n	800885e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800885a:	2300      	movs	r3, #0
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
 800885e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008860:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f383 8811 	msr	BASEPRI, r3
}
 8008868:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800886a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800886c:	4618      	mov	r0, r3
 800886e:	3738      	adds	r7, #56	@ 0x38
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10b      	bne.n	800889a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	60bb      	str	r3, [r7, #8]
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	e7fd      	b.n	8008896 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800889a:	f001 fee5 	bl	800a668 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80088a4:	f001 ff12 	bl	800a6cc <vPortExitCritical>

	return uxReturn;
 80088a8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80088b2:	b480      	push	{r7}
 80088b4:	b087      	sub	sp, #28
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10b      	bne.n	80088dc <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	60fb      	str	r3, [r7, #12]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80088e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80088e4:	4618      	mov	r0, r3
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <vQueueDelete+0x2a>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	60bb      	str	r3, [r7, #8]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 f95e 	bl	8008bdc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008926:	2b00      	cmp	r3, #0
 8008928:	d102      	bne.n	8008930 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f002 f88c 	bl	800aa48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	d006      	beq.n	8008956 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e001      	b.n	800895a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800895a:	68fb      	ldr	r3, [r7, #12]
	}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10d      	bne.n	80089a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d14d      	bne.n	8008a2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	4618      	mov	r0, r3
 8008994:	f001 f880 	bl	8009a98 <xTaskPriorityDisinherit>
 8008998:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	609a      	str	r2, [r3, #8]
 80089a0:	e043      	b.n	8008a2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d119      	bne.n	80089dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6858      	ldr	r0, [r3, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b0:	461a      	mov	r2, r3
 80089b2:	68b9      	ldr	r1, [r7, #8]
 80089b4:	f002 f9fe 	bl	800adb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c0:	441a      	add	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d32b      	bcc.n	8008a2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	605a      	str	r2, [r3, #4]
 80089da:	e026      	b.n	8008a2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	68d8      	ldr	r0, [r3, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e4:	461a      	mov	r2, r3
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	f002 f9e4 	bl	800adb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f4:	425b      	negs	r3, r3
 80089f6:	441a      	add	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d207      	bcs.n	8008a18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a10:	425b      	negs	r3, r3
 8008a12:	441a      	add	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d105      	bne.n	8008a2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008a32:	697b      	ldr	r3, [r7, #20]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d018      	beq.n	8008a80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a56:	441a      	add	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d303      	bcc.n	8008a70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68d9      	ldr	r1, [r3, #12]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6838      	ldr	r0, [r7, #0]
 8008a7c:	f002 f99a 	bl	800adb4 <memcpy>
	}
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a90:	f001 fdea 	bl	800a668 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a9c:	e011      	b.n	8008ac2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d012      	beq.n	8008acc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3324      	adds	r3, #36	@ 0x24
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 fd98 	bl	80095e0 <xTaskRemoveFromEventList>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ab6:	f000 fe71 	bl	800979c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	dce9      	bgt.n	8008a9e <prvUnlockQueue+0x16>
 8008aca:	e000      	b.n	8008ace <prvUnlockQueue+0x46>
					break;
 8008acc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	22ff      	movs	r2, #255	@ 0xff
 8008ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008ad6:	f001 fdf9 	bl	800a6cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ada:	f001 fdc5 	bl	800a668 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ae4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ae6:	e011      	b.n	8008b0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d012      	beq.n	8008b16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3310      	adds	r3, #16
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fd73 	bl	80095e0 <xTaskRemoveFromEventList>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b00:	f000 fe4c 	bl	800979c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dce9      	bgt.n	8008ae8 <prvUnlockQueue+0x60>
 8008b14:	e000      	b.n	8008b18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	22ff      	movs	r2, #255	@ 0xff
 8008b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008b20:	f001 fdd4 	bl	800a6cc <vPortExitCritical>
}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b34:	f001 fd98 	bl	800a668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b40:	2301      	movs	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e001      	b.n	8008b4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b4a:	f001 fdbf 	bl	800a6cc <vPortExitCritical>

	return xReturn;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b60:	f001 fd82 	bl	800a668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d102      	bne.n	8008b76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b70:	2301      	movs	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	e001      	b.n	8008b7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b7a:	f001 fda7 	bl	800a6cc <vPortExitCritical>

	return xReturn;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	e014      	b.n	8008bc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b98:	4a0f      	ldr	r2, [pc, #60]	@ (8008bd8 <vQueueAddToRegistry+0x50>)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10b      	bne.n	8008bbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ba4:	490c      	ldr	r1, [pc, #48]	@ (8008bd8 <vQueueAddToRegistry+0x50>)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bae:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd8 <vQueueAddToRegistry+0x50>)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008bba:	e006      	b.n	8008bca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b07      	cmp	r3, #7
 8008bc6:	d9e7      	bls.n	8008b98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	200031ac 	.word	0x200031ac

08008bdc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008be4:	2300      	movs	r3, #0
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	e016      	b.n	8008c18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008bea:	4a10      	ldr	r2, [pc, #64]	@ (8008c2c <vQueueUnregisterQueue+0x50>)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	4413      	add	r3, r2
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d10b      	bne.n	8008c12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8008c2c <vQueueUnregisterQueue+0x50>)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2100      	movs	r1, #0
 8008c00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008c04:	4a09      	ldr	r2, [pc, #36]	@ (8008c2c <vQueueUnregisterQueue+0x50>)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	605a      	str	r2, [r3, #4]
				break;
 8008c10:	e006      	b.n	8008c20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b07      	cmp	r3, #7
 8008c1c:	d9e5      	bls.n	8008bea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c1e:	bf00      	nop
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	200031ac 	.word	0x200031ac

08008c30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c40:	f001 fd12 	bl	800a668 <vPortEnterCritical>
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c4a:	b25b      	sxtb	r3, r3
 8008c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c50:	d103      	bne.n	8008c5a <vQueueWaitForMessageRestricted+0x2a>
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c60:	b25b      	sxtb	r3, r3
 8008c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c66:	d103      	bne.n	8008c70 <vQueueWaitForMessageRestricted+0x40>
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c70:	f001 fd2c 	bl	800a6cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d106      	bne.n	8008c8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	3324      	adds	r3, #36	@ 0x24
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	68b9      	ldr	r1, [r7, #8]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 fc7f 	bl	8009588 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c8a:	6978      	ldr	r0, [r7, #20]
 8008c8c:	f7ff fefc 	bl	8008a88 <prvUnlockQueue>
	}
 8008c90:	bf00      	nop
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08e      	sub	sp, #56	@ 0x38
 8008c9c:	af04      	add	r7, sp, #16
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10b      	bne.n	8008cc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	623b      	str	r3, [r7, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	bf00      	nop
 8008cc2:	e7fd      	b.n	8008cc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	61fb      	str	r3, [r7, #28]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ce2:	23a8      	movs	r3, #168	@ 0xa8
 8008ce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2ba8      	cmp	r3, #168	@ 0xa8
 8008cea:	d00b      	beq.n	8008d04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	61bb      	str	r3, [r7, #24]
}
 8008cfe:	bf00      	nop
 8008d00:	bf00      	nop
 8008d02:	e7fd      	b.n	8008d00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01e      	beq.n	8008d4a <xTaskCreateStatic+0xb2>
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01b      	beq.n	8008d4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d24:	2300      	movs	r3, #0
 8008d26:	9303      	str	r3, [sp, #12]
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2a:	9302      	str	r3, [sp, #8]
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 f851 	bl	8008de4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d44:	f000 f8f6 	bl	8008f34 <prvAddNewTaskToReadyList>
 8008d48:	e001      	b.n	8008d4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d4e:	697b      	ldr	r3, [r7, #20]
	}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3728      	adds	r7, #40	@ 0x28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08c      	sub	sp, #48	@ 0x30
 8008d5c:	af04      	add	r7, sp, #16
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d68:	88fb      	ldrh	r3, [r7, #6]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 fd9d 	bl	800a8ac <pvPortMalloc>
 8008d72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d7a:	20a8      	movs	r0, #168	@ 0xa8
 8008d7c:	f001 fd96 	bl	800a8ac <pvPortMalloc>
 8008d80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d8e:	e005      	b.n	8008d9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d90:	6978      	ldr	r0, [r7, #20]
 8008d92:	f001 fe59 	bl	800aa48 <vPortFree>
 8008d96:	e001      	b.n	8008d9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d017      	beq.n	8008dd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008daa:	88fa      	ldrh	r2, [r7, #6]
 8008dac:	2300      	movs	r3, #0
 8008dae:	9303      	str	r3, [sp, #12]
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	9302      	str	r3, [sp, #8]
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	68b9      	ldr	r1, [r7, #8]
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f80f 	bl	8008de4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dc6:	69f8      	ldr	r0, [r7, #28]
 8008dc8:	f000 f8b4 	bl	8008f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	61bb      	str	r3, [r7, #24]
 8008dd0:	e002      	b.n	8008dd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
	}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3720      	adds	r7, #32
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	21a5      	movs	r1, #165	@ 0xa5
 8008dfe:	f001 ff4f 	bl	800aca0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f023 0307 	bic.w	r3, r3, #7
 8008e1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00b      	beq.n	8008e3e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	617b      	str	r3, [r7, #20]
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	e7fd      	b.n	8008e3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01f      	beq.n	8008e84 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e44:	2300      	movs	r3, #0
 8008e46:	61fb      	str	r3, [r7, #28]
 8008e48:	e012      	b.n	8008e70 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	4413      	add	r3, r2
 8008e50:	7819      	ldrb	r1, [r3, #0]
 8008e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	4413      	add	r3, r2
 8008e58:	3334      	adds	r3, #52	@ 0x34
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	4413      	add	r3, r2
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d006      	beq.n	8008e78 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61fb      	str	r3, [r7, #28]
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	d9e9      	bls.n	8008e4a <prvInitialiseNewTask+0x66>
 8008e76:	e000      	b.n	8008e7a <prvInitialiseNewTask+0x96>
			{
				break;
 8008e78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e82:	e003      	b.n	8008e8c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8e:	2b37      	cmp	r3, #55	@ 0x37
 8008e90:	d901      	bls.n	8008e96 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e92:	2337      	movs	r3, #55	@ 0x37
 8008e94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	3304      	adds	r3, #4
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe fdcd 	bl	8007a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	3318      	adds	r3, #24
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fdc8 	bl	8007a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ed0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	3354      	adds	r3, #84	@ 0x54
 8008ee6:	224c      	movs	r2, #76	@ 0x4c
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f001 fed8 	bl	800aca0 <memset>
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8008f28 <prvInitialiseNewTask+0x144>)
 8008ef4:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8008f2c <prvInitialiseNewTask+0x148>)
 8008efa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efe:	4a0c      	ldr	r2, [pc, #48]	@ (8008f30 <prvInitialiseNewTask+0x14c>)
 8008f00:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	68f9      	ldr	r1, [r7, #12]
 8008f06:	69b8      	ldr	r0, [r7, #24]
 8008f08:	f001 fa7c 	bl	800a404 <pxPortInitialiseStack>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f1e:	bf00      	nop
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20007444 	.word	0x20007444
 8008f2c:	200074ac 	.word	0x200074ac
 8008f30:	20007514 	.word	0x20007514

08008f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f3c:	f001 fb94 	bl	800a668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f40:	4b2d      	ldr	r3, [pc, #180]	@ (8008ff8 <prvAddNewTaskToReadyList+0xc4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3301      	adds	r3, #1
 8008f46:	4a2c      	ldr	r2, [pc, #176]	@ (8008ff8 <prvAddNewTaskToReadyList+0xc4>)
 8008f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f52:	4a2a      	ldr	r2, [pc, #168]	@ (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f58:	4b27      	ldr	r3, [pc, #156]	@ (8008ff8 <prvAddNewTaskToReadyList+0xc4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d110      	bne.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f60:	f000 fc40 	bl	80097e4 <prvInitialiseTaskLists>
 8008f64:	e00d      	b.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f66:	4b26      	ldr	r3, [pc, #152]	@ (8009000 <prvAddNewTaskToReadyList+0xcc>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f6e:	4b23      	ldr	r3, [pc, #140]	@ (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d802      	bhi.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f82:	4b20      	ldr	r3, [pc, #128]	@ (8009004 <prvAddNewTaskToReadyList+0xd0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	4a1e      	ldr	r2, [pc, #120]	@ (8009004 <prvAddNewTaskToReadyList+0xd0>)
 8008f8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009004 <prvAddNewTaskToReadyList+0xd0>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f98:	4b1b      	ldr	r3, [pc, #108]	@ (8009008 <prvAddNewTaskToReadyList+0xd4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d903      	bls.n	8008fa8 <prvAddNewTaskToReadyList+0x74>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa4:	4a18      	ldr	r2, [pc, #96]	@ (8009008 <prvAddNewTaskToReadyList+0xd4>)
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4a15      	ldr	r2, [pc, #84]	@ (800900c <prvAddNewTaskToReadyList+0xd8>)
 8008fb6:	441a      	add	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7fe fd51 	bl	8007a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fc4:	f001 fb82 	bl	800a6cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8009000 <prvAddNewTaskToReadyList+0xcc>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00e      	beq.n	8008fee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d207      	bcs.n	8008fee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fde:	4b0c      	ldr	r3, [pc, #48]	@ (8009010 <prvAddNewTaskToReadyList+0xdc>)
 8008fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	200036c0 	.word	0x200036c0
 8008ffc:	200031ec 	.word	0x200031ec
 8009000:	200036cc 	.word	0x200036cc
 8009004:	200036dc 	.word	0x200036dc
 8009008:	200036c8 	.word	0x200036c8
 800900c:	200031f0 	.word	0x200031f0
 8009010:	e000ed04 	.word	0xe000ed04

08009014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d018      	beq.n	8009058 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009026:	4b14      	ldr	r3, [pc, #80]	@ (8009078 <vTaskDelay+0x64>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <vTaskDelay+0x32>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60bb      	str	r3, [r7, #8]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009046:	f000 f88b 	bl	8009160 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800904a:	2100      	movs	r1, #0
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fe2b 	bl	8009ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009052:	f000 f893 	bl	800917c <xTaskResumeAll>
 8009056:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d107      	bne.n	800906e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800905e:	4b07      	ldr	r3, [pc, #28]	@ (800907c <vTaskDelay+0x68>)
 8009060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800906e:	bf00      	nop
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	200036e8 	.word	0x200036e8
 800907c:	e000ed04 	.word	0xe000ed04

08009080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	@ 0x28
 8009084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800908e:	463a      	mov	r2, r7
 8009090:	1d39      	adds	r1, r7, #4
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe fc84 	bl	80079a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	9202      	str	r2, [sp, #8]
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	2300      	movs	r3, #0
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	2300      	movs	r3, #0
 80090ac:	460a      	mov	r2, r1
 80090ae:	4924      	ldr	r1, [pc, #144]	@ (8009140 <vTaskStartScheduler+0xc0>)
 80090b0:	4824      	ldr	r0, [pc, #144]	@ (8009144 <vTaskStartScheduler+0xc4>)
 80090b2:	f7ff fdf1 	bl	8008c98 <xTaskCreateStatic>
 80090b6:	4603      	mov	r3, r0
 80090b8:	4a23      	ldr	r2, [pc, #140]	@ (8009148 <vTaskStartScheduler+0xc8>)
 80090ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090bc:	4b22      	ldr	r3, [pc, #136]	@ (8009148 <vTaskStartScheduler+0xc8>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e001      	b.n	80090ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d102      	bne.n	80090da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090d4:	f000 fe3c 	bl	8009d50 <xTimerCreateTimerTask>
 80090d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d11b      	bne.n	8009118 <vTaskStartScheduler+0x98>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	613b      	str	r3, [r7, #16]
}
 80090f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090f4:	4b15      	ldr	r3, [pc, #84]	@ (800914c <vTaskStartScheduler+0xcc>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3354      	adds	r3, #84	@ 0x54
 80090fa:	4a15      	ldr	r2, [pc, #84]	@ (8009150 <vTaskStartScheduler+0xd0>)
 80090fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090fe:	4b15      	ldr	r3, [pc, #84]	@ (8009154 <vTaskStartScheduler+0xd4>)
 8009100:	f04f 32ff 	mov.w	r2, #4294967295
 8009104:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009106:	4b14      	ldr	r3, [pc, #80]	@ (8009158 <vTaskStartScheduler+0xd8>)
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800910c:	4b13      	ldr	r3, [pc, #76]	@ (800915c <vTaskStartScheduler+0xdc>)
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009112:	f001 fa05 	bl	800a520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009116:	e00f      	b.n	8009138 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911e:	d10b      	bne.n	8009138 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	60fb      	str	r3, [r7, #12]
}
 8009132:	bf00      	nop
 8009134:	bf00      	nop
 8009136:	e7fd      	b.n	8009134 <vTaskStartScheduler+0xb4>
}
 8009138:	bf00      	nop
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	0800af24 	.word	0x0800af24
 8009144:	080097b5 	.word	0x080097b5
 8009148:	200036e4 	.word	0x200036e4
 800914c:	200031ec 	.word	0x200031ec
 8009150:	20000018 	.word	0x20000018
 8009154:	200036e0 	.word	0x200036e0
 8009158:	200036cc 	.word	0x200036cc
 800915c:	200036c4 	.word	0x200036c4

08009160 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009164:	4b04      	ldr	r3, [pc, #16]	@ (8009178 <vTaskSuspendAll+0x18>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3301      	adds	r3, #1
 800916a:	4a03      	ldr	r2, [pc, #12]	@ (8009178 <vTaskSuspendAll+0x18>)
 800916c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800916e:	bf00      	nop
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	200036e8 	.word	0x200036e8

0800917c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009186:	2300      	movs	r3, #0
 8009188:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800918a:	4b42      	ldr	r3, [pc, #264]	@ (8009294 <xTaskResumeAll+0x118>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10b      	bne.n	80091aa <xTaskResumeAll+0x2e>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	603b      	str	r3, [r7, #0]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091aa:	f001 fa5d 	bl	800a668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091ae:	4b39      	ldr	r3, [pc, #228]	@ (8009294 <xTaskResumeAll+0x118>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	4a37      	ldr	r2, [pc, #220]	@ (8009294 <xTaskResumeAll+0x118>)
 80091b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b8:	4b36      	ldr	r3, [pc, #216]	@ (8009294 <xTaskResumeAll+0x118>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d162      	bne.n	8009286 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091c0:	4b35      	ldr	r3, [pc, #212]	@ (8009298 <xTaskResumeAll+0x11c>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d05e      	beq.n	8009286 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091c8:	e02f      	b.n	800922a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ca:	4b34      	ldr	r3, [pc, #208]	@ (800929c <xTaskResumeAll+0x120>)
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3318      	adds	r3, #24
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe fca2 	bl	8007b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3304      	adds	r3, #4
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fc9d 	bl	8007b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ea:	4b2d      	ldr	r3, [pc, #180]	@ (80092a0 <xTaskResumeAll+0x124>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d903      	bls.n	80091fa <xTaskResumeAll+0x7e>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f6:	4a2a      	ldr	r2, [pc, #168]	@ (80092a0 <xTaskResumeAll+0x124>)
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4a27      	ldr	r2, [pc, #156]	@ (80092a4 <xTaskResumeAll+0x128>)
 8009208:	441a      	add	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3304      	adds	r3, #4
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f7fe fc28 	bl	8007a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800921a:	4b23      	ldr	r3, [pc, #140]	@ (80092a8 <xTaskResumeAll+0x12c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009220:	429a      	cmp	r2, r3
 8009222:	d302      	bcc.n	800922a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009224:	4b21      	ldr	r3, [pc, #132]	@ (80092ac <xTaskResumeAll+0x130>)
 8009226:	2201      	movs	r2, #1
 8009228:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800922a:	4b1c      	ldr	r3, [pc, #112]	@ (800929c <xTaskResumeAll+0x120>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1cb      	bne.n	80091ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009238:	f000 fb78 	bl	800992c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800923c:	4b1c      	ldr	r3, [pc, #112]	@ (80092b0 <xTaskResumeAll+0x134>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d010      	beq.n	800926a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009248:	f000 f858 	bl	80092fc <xTaskIncrementTick>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009252:	4b16      	ldr	r3, [pc, #88]	@ (80092ac <xTaskResumeAll+0x130>)
 8009254:	2201      	movs	r2, #1
 8009256:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3b01      	subs	r3, #1
 800925c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1f1      	bne.n	8009248 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009264:	4b12      	ldr	r3, [pc, #72]	@ (80092b0 <xTaskResumeAll+0x134>)
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800926a:	4b10      	ldr	r3, [pc, #64]	@ (80092ac <xTaskResumeAll+0x130>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009272:	2301      	movs	r3, #1
 8009274:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009276:	4b0f      	ldr	r3, [pc, #60]	@ (80092b4 <xTaskResumeAll+0x138>)
 8009278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009286:	f001 fa21 	bl	800a6cc <vPortExitCritical>

	return xAlreadyYielded;
 800928a:	68bb      	ldr	r3, [r7, #8]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	200036e8 	.word	0x200036e8
 8009298:	200036c0 	.word	0x200036c0
 800929c:	20003680 	.word	0x20003680
 80092a0:	200036c8 	.word	0x200036c8
 80092a4:	200031f0 	.word	0x200031f0
 80092a8:	200031ec 	.word	0x200031ec
 80092ac:	200036d4 	.word	0x200036d4
 80092b0:	200036d0 	.word	0x200036d0
 80092b4:	e000ed04 	.word	0xe000ed04

080092b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092be:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <xTaskGetTickCount+0x1c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092c4:	687b      	ldr	r3, [r7, #4]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	200036c4 	.word	0x200036c4

080092d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092de:	f001 faa3 	bl	800a828 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80092e6:	4b04      	ldr	r3, [pc, #16]	@ (80092f8 <xTaskGetTickCountFromISR+0x20>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092ec:	683b      	ldr	r3, [r7, #0]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	200036c4 	.word	0x200036c4

080092fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009302:	2300      	movs	r3, #0
 8009304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009306:	4b4f      	ldr	r3, [pc, #316]	@ (8009444 <xTaskIncrementTick+0x148>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f040 8090 	bne.w	8009430 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009310:	4b4d      	ldr	r3, [pc, #308]	@ (8009448 <xTaskIncrementTick+0x14c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3301      	adds	r3, #1
 8009316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009318:	4a4b      	ldr	r2, [pc, #300]	@ (8009448 <xTaskIncrementTick+0x14c>)
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d121      	bne.n	8009368 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009324:	4b49      	ldr	r3, [pc, #292]	@ (800944c <xTaskIncrementTick+0x150>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <xTaskIncrementTick+0x4a>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	603b      	str	r3, [r7, #0]
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	e7fd      	b.n	8009342 <xTaskIncrementTick+0x46>
 8009346:	4b41      	ldr	r3, [pc, #260]	@ (800944c <xTaskIncrementTick+0x150>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	4b40      	ldr	r3, [pc, #256]	@ (8009450 <xTaskIncrementTick+0x154>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a3e      	ldr	r2, [pc, #248]	@ (800944c <xTaskIncrementTick+0x150>)
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	4a3e      	ldr	r2, [pc, #248]	@ (8009450 <xTaskIncrementTick+0x154>)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	4b3e      	ldr	r3, [pc, #248]	@ (8009454 <xTaskIncrementTick+0x158>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	4a3c      	ldr	r2, [pc, #240]	@ (8009454 <xTaskIncrementTick+0x158>)
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	f000 fae2 	bl	800992c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009368:	4b3b      	ldr	r3, [pc, #236]	@ (8009458 <xTaskIncrementTick+0x15c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	429a      	cmp	r2, r3
 8009370:	d349      	bcc.n	8009406 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009372:	4b36      	ldr	r3, [pc, #216]	@ (800944c <xTaskIncrementTick+0x150>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d104      	bne.n	8009386 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800937c:	4b36      	ldr	r3, [pc, #216]	@ (8009458 <xTaskIncrementTick+0x15c>)
 800937e:	f04f 32ff 	mov.w	r2, #4294967295
 8009382:	601a      	str	r2, [r3, #0]
					break;
 8009384:	e03f      	b.n	8009406 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009386:	4b31      	ldr	r3, [pc, #196]	@ (800944c <xTaskIncrementTick+0x150>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	429a      	cmp	r2, r3
 800939c:	d203      	bcs.n	80093a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800939e:	4a2e      	ldr	r2, [pc, #184]	@ (8009458 <xTaskIncrementTick+0x15c>)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093a4:	e02f      	b.n	8009406 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	3304      	adds	r3, #4
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fbb8 	bl	8007b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d004      	beq.n	80093c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	3318      	adds	r3, #24
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe fbaf 	bl	8007b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093c6:	4b25      	ldr	r3, [pc, #148]	@ (800945c <xTaskIncrementTick+0x160>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d903      	bls.n	80093d6 <xTaskIncrementTick+0xda>
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d2:	4a22      	ldr	r2, [pc, #136]	@ (800945c <xTaskIncrementTick+0x160>)
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093da:	4613      	mov	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009460 <xTaskIncrementTick+0x164>)
 80093e4:	441a      	add	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	3304      	adds	r3, #4
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f7fe fb3a 	bl	8007a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f6:	4b1b      	ldr	r3, [pc, #108]	@ (8009464 <xTaskIncrementTick+0x168>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d3b8      	bcc.n	8009372 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009404:	e7b5      	b.n	8009372 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009406:	4b17      	ldr	r3, [pc, #92]	@ (8009464 <xTaskIncrementTick+0x168>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940c:	4914      	ldr	r1, [pc, #80]	@ (8009460 <xTaskIncrementTick+0x164>)
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d901      	bls.n	8009422 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800941e:	2301      	movs	r3, #1
 8009420:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009422:	4b11      	ldr	r3, [pc, #68]	@ (8009468 <xTaskIncrementTick+0x16c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d007      	beq.n	800943a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800942a:	2301      	movs	r3, #1
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	e004      	b.n	800943a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009430:	4b0e      	ldr	r3, [pc, #56]	@ (800946c <xTaskIncrementTick+0x170>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	4a0d      	ldr	r2, [pc, #52]	@ (800946c <xTaskIncrementTick+0x170>)
 8009438:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800943a:	697b      	ldr	r3, [r7, #20]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200036e8 	.word	0x200036e8
 8009448:	200036c4 	.word	0x200036c4
 800944c:	20003678 	.word	0x20003678
 8009450:	2000367c 	.word	0x2000367c
 8009454:	200036d8 	.word	0x200036d8
 8009458:	200036e0 	.word	0x200036e0
 800945c:	200036c8 	.word	0x200036c8
 8009460:	200031f0 	.word	0x200031f0
 8009464:	200031ec 	.word	0x200031ec
 8009468:	200036d4 	.word	0x200036d4
 800946c:	200036d0 	.word	0x200036d0

08009470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009476:	4b2b      	ldr	r3, [pc, #172]	@ (8009524 <vTaskSwitchContext+0xb4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800947e:	4b2a      	ldr	r3, [pc, #168]	@ (8009528 <vTaskSwitchContext+0xb8>)
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009484:	e047      	b.n	8009516 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009486:	4b28      	ldr	r3, [pc, #160]	@ (8009528 <vTaskSwitchContext+0xb8>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800948c:	4b27      	ldr	r3, [pc, #156]	@ (800952c <vTaskSwitchContext+0xbc>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]
 8009492:	e011      	b.n	80094b8 <vTaskSwitchContext+0x48>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	607b      	str	r3, [r7, #4]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <vTaskSwitchContext+0x3e>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	491d      	ldr	r1, [pc, #116]	@ (8009530 <vTaskSwitchContext+0xc0>)
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4613      	mov	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0e3      	beq.n	8009494 <vTaskSwitchContext+0x24>
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a16      	ldr	r2, [pc, #88]	@ (8009530 <vTaskSwitchContext+0xc0>)
 80094d8:	4413      	add	r3, r2
 80094da:	60bb      	str	r3, [r7, #8]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	605a      	str	r2, [r3, #4]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	3308      	adds	r3, #8
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d104      	bne.n	80094fc <vTaskSwitchContext+0x8c>
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	605a      	str	r2, [r3, #4]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	4a0c      	ldr	r2, [pc, #48]	@ (8009534 <vTaskSwitchContext+0xc4>)
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	4a09      	ldr	r2, [pc, #36]	@ (800952c <vTaskSwitchContext+0xbc>)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800950c:	4b09      	ldr	r3, [pc, #36]	@ (8009534 <vTaskSwitchContext+0xc4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3354      	adds	r3, #84	@ 0x54
 8009512:	4a09      	ldr	r2, [pc, #36]	@ (8009538 <vTaskSwitchContext+0xc8>)
 8009514:	6013      	str	r3, [r2, #0]
}
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	200036e8 	.word	0x200036e8
 8009528:	200036d4 	.word	0x200036d4
 800952c:	200036c8 	.word	0x200036c8
 8009530:	200031f0 	.word	0x200031f0
 8009534:	200031ec 	.word	0x200031ec
 8009538:	20000018 	.word	0x20000018

0800953c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10b      	bne.n	8009564 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	60fb      	str	r3, [r7, #12]
}
 800955e:	bf00      	nop
 8009560:	bf00      	nop
 8009562:	e7fd      	b.n	8009560 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009564:	4b07      	ldr	r3, [pc, #28]	@ (8009584 <vTaskPlaceOnEventList+0x48>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3318      	adds	r3, #24
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7fe fa9e 	bl	8007aae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009572:	2101      	movs	r1, #1
 8009574:	6838      	ldr	r0, [r7, #0]
 8009576:	f000 fb97 	bl	8009ca8 <prvAddCurrentTaskToDelayedList>
}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	200031ec 	.word	0x200031ec

08009588 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10b      	bne.n	80095b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	617b      	str	r3, [r7, #20]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095b2:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <vTaskPlaceOnEventListRestricted+0x54>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3318      	adds	r3, #24
 80095b8:	4619      	mov	r1, r3
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7fe fa53 	bl	8007a66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80095c6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	68b8      	ldr	r0, [r7, #8]
 80095d0:	f000 fb6a 	bl	8009ca8 <prvAddCurrentTaskToDelayedList>
	}
 80095d4:	bf00      	nop
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	200031ec 	.word	0x200031ec

080095e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10b      	bne.n	800960e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	60fb      	str	r3, [r7, #12]
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	3318      	adds	r3, #24
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fa84 	bl	8007b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009618:	4b1d      	ldr	r3, [pc, #116]	@ (8009690 <xTaskRemoveFromEventList+0xb0>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d11d      	bne.n	800965c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	3304      	adds	r3, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f7fe fa7b 	bl	8007b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800962e:	4b19      	ldr	r3, [pc, #100]	@ (8009694 <xTaskRemoveFromEventList+0xb4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d903      	bls.n	800963e <xTaskRemoveFromEventList+0x5e>
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963a:	4a16      	ldr	r2, [pc, #88]	@ (8009694 <xTaskRemoveFromEventList+0xb4>)
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4a13      	ldr	r2, [pc, #76]	@ (8009698 <xTaskRemoveFromEventList+0xb8>)
 800964c:	441a      	add	r2, r3
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	3304      	adds	r3, #4
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f7fe fa06 	bl	8007a66 <vListInsertEnd>
 800965a:	e005      	b.n	8009668 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	3318      	adds	r3, #24
 8009660:	4619      	mov	r1, r3
 8009662:	480e      	ldr	r0, [pc, #56]	@ (800969c <xTaskRemoveFromEventList+0xbc>)
 8009664:	f7fe f9ff 	bl	8007a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966c:	4b0c      	ldr	r3, [pc, #48]	@ (80096a0 <xTaskRemoveFromEventList+0xc0>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009672:	429a      	cmp	r2, r3
 8009674:	d905      	bls.n	8009682 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009676:	2301      	movs	r3, #1
 8009678:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800967a:	4b0a      	ldr	r3, [pc, #40]	@ (80096a4 <xTaskRemoveFromEventList+0xc4>)
 800967c:	2201      	movs	r2, #1
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	e001      	b.n	8009686 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009686:	697b      	ldr	r3, [r7, #20]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	200036e8 	.word	0x200036e8
 8009694:	200036c8 	.word	0x200036c8
 8009698:	200031f0 	.word	0x200031f0
 800969c:	20003680 	.word	0x20003680
 80096a0:	200031ec 	.word	0x200031ec
 80096a4:	200036d4 	.word	0x200036d4

080096a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096b0:	4b06      	ldr	r3, [pc, #24]	@ (80096cc <vTaskInternalSetTimeOutState+0x24>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096b8:	4b05      	ldr	r3, [pc, #20]	@ (80096d0 <vTaskInternalSetTimeOutState+0x28>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	605a      	str	r2, [r3, #4]
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	200036d8 	.word	0x200036d8
 80096d0:	200036c4 	.word	0x200036c4

080096d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10b      	bne.n	80096fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	613b      	str	r3, [r7, #16]
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10b      	bne.n	800971a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	60fb      	str	r3, [r7, #12]
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	e7fd      	b.n	8009716 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800971a:	f000 ffa5 	bl	800a668 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800971e:	4b1d      	ldr	r3, [pc, #116]	@ (8009794 <xTaskCheckForTimeOut+0xc0>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	d102      	bne.n	800973e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009738:	2300      	movs	r3, #0
 800973a:	61fb      	str	r3, [r7, #28]
 800973c:	e023      	b.n	8009786 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b15      	ldr	r3, [pc, #84]	@ (8009798 <xTaskCheckForTimeOut+0xc4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d007      	beq.n	800975a <xTaskCheckForTimeOut+0x86>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	429a      	cmp	r2, r3
 8009752:	d302      	bcc.n	800975a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009754:	2301      	movs	r3, #1
 8009756:	61fb      	str	r3, [r7, #28]
 8009758:	e015      	b.n	8009786 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	429a      	cmp	r2, r3
 8009762:	d20b      	bcs.n	800977c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	1ad2      	subs	r2, r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff ff99 	bl	80096a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009776:	2300      	movs	r3, #0
 8009778:	61fb      	str	r3, [r7, #28]
 800977a:	e004      	b.n	8009786 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009782:	2301      	movs	r3, #1
 8009784:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009786:	f000 ffa1 	bl	800a6cc <vPortExitCritical>

	return xReturn;
 800978a:	69fb      	ldr	r3, [r7, #28]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200036c4 	.word	0x200036c4
 8009798:	200036d8 	.word	0x200036d8

0800979c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097a0:	4b03      	ldr	r3, [pc, #12]	@ (80097b0 <vTaskMissedYield+0x14>)
 80097a2:	2201      	movs	r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
}
 80097a6:	bf00      	nop
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	200036d4 	.word	0x200036d4

080097b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097bc:	f000 f852 	bl	8009864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097c0:	4b06      	ldr	r3, [pc, #24]	@ (80097dc <prvIdleTask+0x28>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d9f9      	bls.n	80097bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80097c8:	4b05      	ldr	r3, [pc, #20]	@ (80097e0 <prvIdleTask+0x2c>)
 80097ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ce:	601a      	str	r2, [r3, #0]
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097d8:	e7f0      	b.n	80097bc <prvIdleTask+0x8>
 80097da:	bf00      	nop
 80097dc:	200031f0 	.word	0x200031f0
 80097e0:	e000ed04 	.word	0xe000ed04

080097e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097ea:	2300      	movs	r3, #0
 80097ec:	607b      	str	r3, [r7, #4]
 80097ee:	e00c      	b.n	800980a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4a12      	ldr	r2, [pc, #72]	@ (8009844 <prvInitialiseTaskLists+0x60>)
 80097fc:	4413      	add	r3, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe f904 	bl	8007a0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3301      	adds	r3, #1
 8009808:	607b      	str	r3, [r7, #4]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b37      	cmp	r3, #55	@ 0x37
 800980e:	d9ef      	bls.n	80097f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009810:	480d      	ldr	r0, [pc, #52]	@ (8009848 <prvInitialiseTaskLists+0x64>)
 8009812:	f7fe f8fb 	bl	8007a0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009816:	480d      	ldr	r0, [pc, #52]	@ (800984c <prvInitialiseTaskLists+0x68>)
 8009818:	f7fe f8f8 	bl	8007a0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800981c:	480c      	ldr	r0, [pc, #48]	@ (8009850 <prvInitialiseTaskLists+0x6c>)
 800981e:	f7fe f8f5 	bl	8007a0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009822:	480c      	ldr	r0, [pc, #48]	@ (8009854 <prvInitialiseTaskLists+0x70>)
 8009824:	f7fe f8f2 	bl	8007a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009828:	480b      	ldr	r0, [pc, #44]	@ (8009858 <prvInitialiseTaskLists+0x74>)
 800982a:	f7fe f8ef 	bl	8007a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800982e:	4b0b      	ldr	r3, [pc, #44]	@ (800985c <prvInitialiseTaskLists+0x78>)
 8009830:	4a05      	ldr	r2, [pc, #20]	@ (8009848 <prvInitialiseTaskLists+0x64>)
 8009832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009834:	4b0a      	ldr	r3, [pc, #40]	@ (8009860 <prvInitialiseTaskLists+0x7c>)
 8009836:	4a05      	ldr	r2, [pc, #20]	@ (800984c <prvInitialiseTaskLists+0x68>)
 8009838:	601a      	str	r2, [r3, #0]
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	200031f0 	.word	0x200031f0
 8009848:	20003650 	.word	0x20003650
 800984c:	20003664 	.word	0x20003664
 8009850:	20003680 	.word	0x20003680
 8009854:	20003694 	.word	0x20003694
 8009858:	200036ac 	.word	0x200036ac
 800985c:	20003678 	.word	0x20003678
 8009860:	2000367c 	.word	0x2000367c

08009864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800986a:	e019      	b.n	80098a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800986c:	f000 fefc 	bl	800a668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009870:	4b10      	ldr	r3, [pc, #64]	@ (80098b4 <prvCheckTasksWaitingTermination+0x50>)
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3304      	adds	r3, #4
 800987c:	4618      	mov	r0, r3
 800987e:	f7fe f94f 	bl	8007b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009882:	4b0d      	ldr	r3, [pc, #52]	@ (80098b8 <prvCheckTasksWaitingTermination+0x54>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3b01      	subs	r3, #1
 8009888:	4a0b      	ldr	r2, [pc, #44]	@ (80098b8 <prvCheckTasksWaitingTermination+0x54>)
 800988a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800988c:	4b0b      	ldr	r3, [pc, #44]	@ (80098bc <prvCheckTasksWaitingTermination+0x58>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3b01      	subs	r3, #1
 8009892:	4a0a      	ldr	r2, [pc, #40]	@ (80098bc <prvCheckTasksWaitingTermination+0x58>)
 8009894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009896:	f000 ff19 	bl	800a6cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f810 	bl	80098c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098a0:	4b06      	ldr	r3, [pc, #24]	@ (80098bc <prvCheckTasksWaitingTermination+0x58>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e1      	bne.n	800986c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20003694 	.word	0x20003694
 80098b8:	200036c0 	.word	0x200036c0
 80098bc:	200036a8 	.word	0x200036a8

080098c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3354      	adds	r3, #84	@ 0x54
 80098cc:	4618      	mov	r0, r3
 80098ce:	f001 f9ef 	bl	800acb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d108      	bne.n	80098ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e0:	4618      	mov	r0, r3
 80098e2:	f001 f8b1 	bl	800aa48 <vPortFree>
				vPortFree( pxTCB );
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 f8ae 	bl	800aa48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098ec:	e019      	b.n	8009922 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d103      	bne.n	8009900 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 f8a5 	bl	800aa48 <vPortFree>
	}
 80098fe:	e010      	b.n	8009922 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009906:	2b02      	cmp	r3, #2
 8009908:	d00b      	beq.n	8009922 <prvDeleteTCB+0x62>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	60fb      	str	r3, [r7, #12]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <prvDeleteTCB+0x5e>
	}
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009932:	4b0c      	ldr	r3, [pc, #48]	@ (8009964 <prvResetNextTaskUnblockTime+0x38>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800993c:	4b0a      	ldr	r3, [pc, #40]	@ (8009968 <prvResetNextTaskUnblockTime+0x3c>)
 800993e:	f04f 32ff 	mov.w	r2, #4294967295
 8009942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009944:	e008      	b.n	8009958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009946:	4b07      	ldr	r3, [pc, #28]	@ (8009964 <prvResetNextTaskUnblockTime+0x38>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	4a04      	ldr	r2, [pc, #16]	@ (8009968 <prvResetNextTaskUnblockTime+0x3c>)
 8009956:	6013      	str	r3, [r2, #0]
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	20003678 	.word	0x20003678
 8009968:	200036e0 	.word	0x200036e0

0800996c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009972:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <xTaskGetCurrentTaskHandle+0x1c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009978:	687b      	ldr	r3, [r7, #4]
	}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	200031ec 	.word	0x200031ec

0800998c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009992:	4b0b      	ldr	r3, [pc, #44]	@ (80099c0 <xTaskGetSchedulerState+0x34>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800999a:	2301      	movs	r3, #1
 800999c:	607b      	str	r3, [r7, #4]
 800999e:	e008      	b.n	80099b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099a0:	4b08      	ldr	r3, [pc, #32]	@ (80099c4 <xTaskGetSchedulerState+0x38>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099a8:	2302      	movs	r3, #2
 80099aa:	607b      	str	r3, [r7, #4]
 80099ac:	e001      	b.n	80099b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099ae:	2300      	movs	r3, #0
 80099b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099b2:	687b      	ldr	r3, [r7, #4]
	}
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	200036cc 	.word	0x200036cc
 80099c4:	200036e8 	.word	0x200036e8

080099c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d051      	beq.n	8009a82 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e2:	4b2a      	ldr	r3, [pc, #168]	@ (8009a8c <xTaskPriorityInherit+0xc4>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d241      	bcs.n	8009a70 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	db06      	blt.n	8009a02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099f4:	4b25      	ldr	r3, [pc, #148]	@ (8009a8c <xTaskPriorityInherit+0xc4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	6959      	ldr	r1, [r3, #20]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4a1f      	ldr	r2, [pc, #124]	@ (8009a90 <xTaskPriorityInherit+0xc8>)
 8009a14:	4413      	add	r3, r2
 8009a16:	4299      	cmp	r1, r3
 8009a18:	d122      	bne.n	8009a60 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe f87e 	bl	8007b20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a24:	4b19      	ldr	r3, [pc, #100]	@ (8009a8c <xTaskPriorityInherit+0xc4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a32:	4b18      	ldr	r3, [pc, #96]	@ (8009a94 <xTaskPriorityInherit+0xcc>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d903      	bls.n	8009a42 <xTaskPriorityInherit+0x7a>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3e:	4a15      	ldr	r2, [pc, #84]	@ (8009a94 <xTaskPriorityInherit+0xcc>)
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4a10      	ldr	r2, [pc, #64]	@ (8009a90 <xTaskPriorityInherit+0xc8>)
 8009a50:	441a      	add	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	3304      	adds	r3, #4
 8009a56:	4619      	mov	r1, r3
 8009a58:	4610      	mov	r0, r2
 8009a5a:	f7fe f804 	bl	8007a66 <vListInsertEnd>
 8009a5e:	e004      	b.n	8009a6a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a60:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <xTaskPriorityInherit+0xc4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	e008      	b.n	8009a82 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a74:	4b05      	ldr	r3, [pc, #20]	@ (8009a8c <xTaskPriorityInherit+0xc4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d201      	bcs.n	8009a82 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a82:	68fb      	ldr	r3, [r7, #12]
	}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200031ec 	.word	0x200031ec
 8009a90:	200031f0 	.word	0x200031f0
 8009a94:	200036c8 	.word	0x200036c8

08009a98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d058      	beq.n	8009b60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009aae:	4b2f      	ldr	r3, [pc, #188]	@ (8009b6c <xTaskPriorityDisinherit+0xd4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d00b      	beq.n	8009ad0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	60fb      	str	r3, [r7, #12]
}
 8009aca:	bf00      	nop
 8009acc:	bf00      	nop
 8009ace:	e7fd      	b.n	8009acc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10b      	bne.n	8009af0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60bb      	str	r3, [r7, #8]
}
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	e7fd      	b.n	8009aec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af4:	1e5a      	subs	r2, r3, #1
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d02c      	beq.n	8009b60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d128      	bne.n	8009b60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe f804 	bl	8007b20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b30:	4b0f      	ldr	r3, [pc, #60]	@ (8009b70 <xTaskPriorityDisinherit+0xd8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d903      	bls.n	8009b40 <xTaskPriorityDisinherit+0xa8>
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8009b70 <xTaskPriorityDisinherit+0xd8>)
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4a09      	ldr	r2, [pc, #36]	@ (8009b74 <xTaskPriorityDisinherit+0xdc>)
 8009b4e:	441a      	add	r2, r3
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fd ff85 	bl	8007a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b60:	697b      	ldr	r3, [r7, #20]
	}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200031ec 	.word	0x200031ec
 8009b70:	200036c8 	.word	0x200036c8
 8009b74:	200031f0 	.word	0x200031f0

08009b78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009b86:	2301      	movs	r3, #1
 8009b88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d06c      	beq.n	8009c6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10b      	bne.n	8009bb0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	60fb      	str	r3, [r7, #12]
}
 8009baa:	bf00      	nop
 8009bac:	bf00      	nop
 8009bae:	e7fd      	b.n	8009bac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d902      	bls.n	8009bc0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	e002      	b.n	8009bc6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d04c      	beq.n	8009c6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d147      	bne.n	8009c6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009bda:	4b26      	ldr	r3, [pc, #152]	@ (8009c74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d10b      	bne.n	8009bfc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60bb      	str	r3, [r7, #8]
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	db04      	blt.n	8009c1a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	6959      	ldr	r1, [r3, #20]
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4a13      	ldr	r2, [pc, #76]	@ (8009c78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c2a:	4413      	add	r3, r2
 8009c2c:	4299      	cmp	r1, r3
 8009c2e:	d11c      	bne.n	8009c6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fd ff73 	bl	8007b20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d903      	bls.n	8009c4e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009c7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4a07      	ldr	r2, [pc, #28]	@ (8009c78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c5c:	441a      	add	r2, r3
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	3304      	adds	r3, #4
 8009c62:	4619      	mov	r1, r3
 8009c64:	4610      	mov	r0, r2
 8009c66:	f7fd fefe 	bl	8007a66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c6a:	bf00      	nop
 8009c6c:	3720      	adds	r7, #32
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	200031ec 	.word	0x200031ec
 8009c78:	200031f0 	.word	0x200031f0
 8009c7c:	200036c8 	.word	0x200036c8

08009c80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009c84:	4b07      	ldr	r3, [pc, #28]	@ (8009ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009c8c:	4b05      	ldr	r3, [pc, #20]	@ (8009ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c92:	3201      	adds	r2, #1
 8009c94:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009c96:	4b03      	ldr	r3, [pc, #12]	@ (8009ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c98:	681b      	ldr	r3, [r3, #0]
	}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	200031ec 	.word	0x200031ec

08009ca8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cb2:	4b21      	ldr	r3, [pc, #132]	@ (8009d38 <prvAddCurrentTaskToDelayedList+0x90>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb8:	4b20      	ldr	r3, [pc, #128]	@ (8009d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fd ff2e 	bl	8007b20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d10a      	bne.n	8009ce2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4819      	ldr	r0, [pc, #100]	@ (8009d40 <prvAddCurrentTaskToDelayedList+0x98>)
 8009cdc:	f7fd fec3 	bl	8007a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ce0:	e026      	b.n	8009d30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cea:	4b14      	ldr	r3, [pc, #80]	@ (8009d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d209      	bcs.n	8009d0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cfa:	4b12      	ldr	r3, [pc, #72]	@ (8009d44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8009d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	f7fd fed1 	bl	8007aae <vListInsert>
}
 8009d0c:	e010      	b.n	8009d30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b0a      	ldr	r3, [pc, #40]	@ (8009d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3304      	adds	r3, #4
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f7fd fec7 	bl	8007aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d20:	4b0a      	ldr	r3, [pc, #40]	@ (8009d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d202      	bcs.n	8009d30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d2a:	4a08      	ldr	r2, [pc, #32]	@ (8009d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	6013      	str	r3, [r2, #0]
}
 8009d30:	bf00      	nop
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	200036c4 	.word	0x200036c4
 8009d3c:	200031ec 	.word	0x200031ec
 8009d40:	200036ac 	.word	0x200036ac
 8009d44:	2000367c 	.word	0x2000367c
 8009d48:	20003678 	.word	0x20003678
 8009d4c:	200036e0 	.word	0x200036e0

08009d50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08a      	sub	sp, #40	@ 0x28
 8009d54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d5a:	f000 fb13 	bl	800a384 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8009dd4 <xTimerCreateTimerTask+0x84>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d021      	beq.n	8009daa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d6e:	1d3a      	adds	r2, r7, #4
 8009d70:	f107 0108 	add.w	r1, r7, #8
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fd fe2d 	bl	80079d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	9202      	str	r2, [sp, #8]
 8009d86:	9301      	str	r3, [sp, #4]
 8009d88:	2302      	movs	r3, #2
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	460a      	mov	r2, r1
 8009d90:	4911      	ldr	r1, [pc, #68]	@ (8009dd8 <xTimerCreateTimerTask+0x88>)
 8009d92:	4812      	ldr	r0, [pc, #72]	@ (8009ddc <xTimerCreateTimerTask+0x8c>)
 8009d94:	f7fe ff80 	bl	8008c98 <xTaskCreateStatic>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	4a11      	ldr	r2, [pc, #68]	@ (8009de0 <xTimerCreateTimerTask+0x90>)
 8009d9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d9e:	4b10      	ldr	r3, [pc, #64]	@ (8009de0 <xTimerCreateTimerTask+0x90>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009da6:	2301      	movs	r3, #1
 8009da8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10b      	bne.n	8009dc8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	613b      	str	r3, [r7, #16]
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	e7fd      	b.n	8009dc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009dc8:	697b      	ldr	r3, [r7, #20]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000371c 	.word	0x2000371c
 8009dd8:	0800af2c 	.word	0x0800af2c
 8009ddc:	08009f1d 	.word	0x08009f1d
 8009de0:	20003720 	.word	0x20003720

08009de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08a      	sub	sp, #40	@ 0x28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10b      	bne.n	8009e14 <xTimerGenericCommand+0x30>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	623b      	str	r3, [r7, #32]
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	e7fd      	b.n	8009e10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e14:	4b19      	ldr	r3, [pc, #100]	@ (8009e7c <xTimerGenericCommand+0x98>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d02a      	beq.n	8009e72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b05      	cmp	r3, #5
 8009e2c:	dc18      	bgt.n	8009e60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e2e:	f7ff fdad 	bl	800998c <xTaskGetSchedulerState>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d109      	bne.n	8009e4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e38:	4b10      	ldr	r3, [pc, #64]	@ (8009e7c <xTimerGenericCommand+0x98>)
 8009e3a:	6818      	ldr	r0, [r3, #0]
 8009e3c:	f107 0110 	add.w	r1, r7, #16
 8009e40:	2300      	movs	r3, #0
 8009e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e44:	f7fe f902 	bl	800804c <xQueueGenericSend>
 8009e48:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e4a:	e012      	b.n	8009e72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009e7c <xTimerGenericCommand+0x98>)
 8009e4e:	6818      	ldr	r0, [r3, #0]
 8009e50:	f107 0110 	add.w	r1, r7, #16
 8009e54:	2300      	movs	r3, #0
 8009e56:	2200      	movs	r2, #0
 8009e58:	f7fe f8f8 	bl	800804c <xQueueGenericSend>
 8009e5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e5e:	e008      	b.n	8009e72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e60:	4b06      	ldr	r3, [pc, #24]	@ (8009e7c <xTimerGenericCommand+0x98>)
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	f107 0110 	add.w	r1, r7, #16
 8009e68:	2300      	movs	r3, #0
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	f7fe f9f0 	bl	8008250 <xQueueGenericSendFromISR>
 8009e70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3728      	adds	r7, #40	@ 0x28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	2000371c 	.word	0x2000371c

08009e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e8a:	4b23      	ldr	r3, [pc, #140]	@ (8009f18 <prvProcessExpiredTimer+0x98>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	3304      	adds	r3, #4
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fd fe41 	bl	8007b20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d023      	beq.n	8009ef4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	699a      	ldr	r2, [r3, #24]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	18d1      	adds	r1, r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	6978      	ldr	r0, [r7, #20]
 8009eba:	f000 f8d5 	bl	800a068 <prvInsertTimerInActiveList>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d020      	beq.n	8009f06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6978      	ldr	r0, [r7, #20]
 8009ed0:	f7ff ff88 	bl	8009de4 <xTimerGenericCommand>
 8009ed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d114      	bne.n	8009f06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60fb      	str	r3, [r7, #12]
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	e7fd      	b.n	8009ef0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009efa:	f023 0301 	bic.w	r3, r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	6978      	ldr	r0, [r7, #20]
 8009f0c:	4798      	blx	r3
}
 8009f0e:	bf00      	nop
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20003714 	.word	0x20003714

08009f1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f24:	f107 0308 	add.w	r3, r7, #8
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 f859 	bl	8009fe0 <prvGetNextExpireTime>
 8009f2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4619      	mov	r1, r3
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f805 	bl	8009f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f3a:	f000 f8d7 	bl	800a0ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f3e:	bf00      	nop
 8009f40:	e7f0      	b.n	8009f24 <prvTimerTask+0x8>
	...

08009f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f4e:	f7ff f907 	bl	8009160 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 f866 	bl	800a028 <prvSampleTimeNow>
 8009f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d130      	bne.n	8009fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10a      	bne.n	8009f80 <prvProcessTimerOrBlockTask+0x3c>
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d806      	bhi.n	8009f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f72:	f7ff f903 	bl	800917c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff ff81 	bl	8009e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f7e:	e024      	b.n	8009fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d008      	beq.n	8009f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f86:	4b13      	ldr	r3, [pc, #76]	@ (8009fd4 <prvProcessTimerOrBlockTask+0x90>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <prvProcessTimerOrBlockTask+0x50>
 8009f90:	2301      	movs	r3, #1
 8009f92:	e000      	b.n	8009f96 <prvProcessTimerOrBlockTask+0x52>
 8009f94:	2300      	movs	r3, #0
 8009f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f98:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd8 <prvProcessTimerOrBlockTask+0x94>)
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	f7fe fe43 	bl	8008c30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009faa:	f7ff f8e7 	bl	800917c <xTaskResumeAll>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009fb4:	4b09      	ldr	r3, [pc, #36]	@ (8009fdc <prvProcessTimerOrBlockTask+0x98>)
 8009fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fba:	601a      	str	r2, [r3, #0]
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	f3bf 8f6f 	isb	sy
}
 8009fc4:	e001      	b.n	8009fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009fc6:	f7ff f8d9 	bl	800917c <xTaskResumeAll>
}
 8009fca:	bf00      	nop
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20003718 	.word	0x20003718
 8009fd8:	2000371c 	.word	0x2000371c
 8009fdc:	e000ed04 	.word	0xe000ed04

08009fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fe8:	4b0e      	ldr	r3, [pc, #56]	@ (800a024 <prvGetNextExpireTime+0x44>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <prvGetNextExpireTime+0x16>
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	e000      	b.n	8009ff8 <prvGetNextExpireTime+0x18>
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d105      	bne.n	800a010 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a004:	4b07      	ldr	r3, [pc, #28]	@ (800a024 <prvGetNextExpireTime+0x44>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	e001      	b.n	800a014 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a014:	68fb      	ldr	r3, [r7, #12]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	20003714 	.word	0x20003714

0800a028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a030:	f7ff f942 	bl	80092b8 <xTaskGetTickCount>
 800a034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a036:	4b0b      	ldr	r3, [pc, #44]	@ (800a064 <prvSampleTimeNow+0x3c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d205      	bcs.n	800a04c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a040:	f000 f93a 	bl	800a2b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	e002      	b.n	800a052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a052:	4a04      	ldr	r2, [pc, #16]	@ (800a064 <prvSampleTimeNow+0x3c>)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a058:	68fb      	ldr	r3, [r7, #12]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20003724 	.word	0x20003724

0800a068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d812      	bhi.n	800a0b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	1ad2      	subs	r2, r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d302      	bcc.n	800a0a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	617b      	str	r3, [r7, #20]
 800a0a0:	e01b      	b.n	800a0da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a0a2:	4b10      	ldr	r3, [pc, #64]	@ (800a0e4 <prvInsertTimerInActiveList+0x7c>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	f7fd fcfe 	bl	8007aae <vListInsert>
 800a0b2:	e012      	b.n	800a0da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d206      	bcs.n	800a0ca <prvInsertTimerInActiveList+0x62>
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d302      	bcc.n	800a0ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	617b      	str	r3, [r7, #20]
 800a0c8:	e007      	b.n	800a0da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ca:	4b07      	ldr	r3, [pc, #28]	@ (800a0e8 <prvInsertTimerInActiveList+0x80>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f7fd fcea 	bl	8007aae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0da:	697b      	ldr	r3, [r7, #20]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20003718 	.word	0x20003718
 800a0e8:	20003714 	.word	0x20003714

0800a0ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08e      	sub	sp, #56	@ 0x38
 800a0f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0f2:	e0ce      	b.n	800a292 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	da19      	bge.n	800a12e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0fa:	1d3b      	adds	r3, r7, #4
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10b      	bne.n	800a11e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	61fb      	str	r3, [r7, #28]
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	e7fd      	b.n	800a11a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a124:	6850      	ldr	r0, [r2, #4]
 800a126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a128:	6892      	ldr	r2, [r2, #8]
 800a12a:	4611      	mov	r1, r2
 800a12c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f2c0 80ae 	blt.w	800a292 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d004      	beq.n	800a14c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a144:	3304      	adds	r3, #4
 800a146:	4618      	mov	r0, r3
 800a148:	f7fd fcea 	bl	8007b20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a14c:	463b      	mov	r3, r7
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff ff6a 	bl	800a028 <prvSampleTimeNow>
 800a154:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b09      	cmp	r3, #9
 800a15a:	f200 8097 	bhi.w	800a28c <prvProcessReceivedCommands+0x1a0>
 800a15e:	a201      	add	r2, pc, #4	@ (adr r2, 800a164 <prvProcessReceivedCommands+0x78>)
 800a160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a164:	0800a18d 	.word	0x0800a18d
 800a168:	0800a18d 	.word	0x0800a18d
 800a16c:	0800a18d 	.word	0x0800a18d
 800a170:	0800a203 	.word	0x0800a203
 800a174:	0800a217 	.word	0x0800a217
 800a178:	0800a263 	.word	0x0800a263
 800a17c:	0800a18d 	.word	0x0800a18d
 800a180:	0800a18d 	.word	0x0800a18d
 800a184:	0800a203 	.word	0x0800a203
 800a188:	0800a217 	.word	0x0800a217
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a192:	f043 0301 	orr.w	r3, r3, #1
 800a196:	b2da      	uxtb	r2, r3
 800a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	18d1      	adds	r1, r2, r3
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1ac:	f7ff ff5c 	bl	800a068 <prvInsertTimerInActiveList>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d06c      	beq.n	800a290 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d061      	beq.n	800a290 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	441a      	add	r2, r3
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	2100      	movs	r1, #0
 800a1dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1de:	f7ff fe01 	bl	8009de4 <xTimerGenericCommand>
 800a1e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d152      	bne.n	800a290 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	61bb      	str	r3, [r7, #24]
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	e7fd      	b.n	800a1fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a208:	f023 0301 	bic.w	r3, r3, #1
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a210:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a214:	e03d      	b.n	800a292 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a21c:	f043 0301 	orr.w	r3, r3, #1
 800a220:	b2da      	uxtb	r2, r3
 800a222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a224:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10b      	bne.n	800a24e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	617b      	str	r3, [r7, #20]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a254:	18d1      	adds	r1, r2, r3
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a25a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a25c:	f7ff ff04 	bl	800a068 <prvInsertTimerInActiveList>
					break;
 800a260:	e017      	b.n	800a292 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d103      	bne.n	800a278 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a272:	f000 fbe9 	bl	800aa48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a276:	e00c      	b.n	800a292 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a27e:	f023 0301 	bic.w	r3, r3, #1
 800a282:	b2da      	uxtb	r2, r3
 800a284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a286:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a28a:	e002      	b.n	800a292 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a28c:	bf00      	nop
 800a28e:	e000      	b.n	800a292 <prvProcessReceivedCommands+0x1a6>
					break;
 800a290:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a292:	4b08      	ldr	r3, [pc, #32]	@ (800a2b4 <prvProcessReceivedCommands+0x1c8>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	1d39      	adds	r1, r7, #4
 800a298:	2200      	movs	r2, #0
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe f876 	bl	800838c <xQueueReceive>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f47f af26 	bne.w	800a0f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a2a8:	bf00      	nop
 800a2aa:	bf00      	nop
 800a2ac:	3730      	adds	r7, #48	@ 0x30
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	2000371c 	.word	0x2000371c

0800a2b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2be:	e049      	b.n	800a354 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2c0:	4b2e      	ldr	r3, [pc, #184]	@ (800a37c <prvSwitchTimerLists+0xc4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ca:	4b2c      	ldr	r3, [pc, #176]	@ (800a37c <prvSwitchTimerLists+0xc4>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fd fc21 	bl	8007b20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d02f      	beq.n	800a354 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	429a      	cmp	r2, r3
 800a304:	d90e      	bls.n	800a324 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a312:	4b1a      	ldr	r3, [pc, #104]	@ (800a37c <prvSwitchTimerLists+0xc4>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3304      	adds	r3, #4
 800a31a:	4619      	mov	r1, r3
 800a31c:	4610      	mov	r0, r2
 800a31e:	f7fd fbc6 	bl	8007aae <vListInsert>
 800a322:	e017      	b.n	800a354 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a324:	2300      	movs	r3, #0
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	2300      	movs	r3, #0
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	2100      	movs	r1, #0
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7ff fd58 	bl	8009de4 <xTimerGenericCommand>
 800a334:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10b      	bne.n	800a354 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	603b      	str	r3, [r7, #0]
}
 800a34e:	bf00      	nop
 800a350:	bf00      	nop
 800a352:	e7fd      	b.n	800a350 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a354:	4b09      	ldr	r3, [pc, #36]	@ (800a37c <prvSwitchTimerLists+0xc4>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1b0      	bne.n	800a2c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a35e:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <prvSwitchTimerLists+0xc4>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a364:	4b06      	ldr	r3, [pc, #24]	@ (800a380 <prvSwitchTimerLists+0xc8>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a04      	ldr	r2, [pc, #16]	@ (800a37c <prvSwitchTimerLists+0xc4>)
 800a36a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a36c:	4a04      	ldr	r2, [pc, #16]	@ (800a380 <prvSwitchTimerLists+0xc8>)
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	6013      	str	r3, [r2, #0]
}
 800a372:	bf00      	nop
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20003714 	.word	0x20003714
 800a380:	20003718 	.word	0x20003718

0800a384 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a38a:	f000 f96d 	bl	800a668 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a38e:	4b15      	ldr	r3, [pc, #84]	@ (800a3e4 <prvCheckForValidListAndQueue+0x60>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d120      	bne.n	800a3d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a396:	4814      	ldr	r0, [pc, #80]	@ (800a3e8 <prvCheckForValidListAndQueue+0x64>)
 800a398:	f7fd fb38 	bl	8007a0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a39c:	4813      	ldr	r0, [pc, #76]	@ (800a3ec <prvCheckForValidListAndQueue+0x68>)
 800a39e:	f7fd fb35 	bl	8007a0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a3a2:	4b13      	ldr	r3, [pc, #76]	@ (800a3f0 <prvCheckForValidListAndQueue+0x6c>)
 800a3a4:	4a10      	ldr	r2, [pc, #64]	@ (800a3e8 <prvCheckForValidListAndQueue+0x64>)
 800a3a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a3a8:	4b12      	ldr	r3, [pc, #72]	@ (800a3f4 <prvCheckForValidListAndQueue+0x70>)
 800a3aa:	4a10      	ldr	r2, [pc, #64]	@ (800a3ec <prvCheckForValidListAndQueue+0x68>)
 800a3ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	4b11      	ldr	r3, [pc, #68]	@ (800a3f8 <prvCheckForValidListAndQueue+0x74>)
 800a3b4:	4a11      	ldr	r2, [pc, #68]	@ (800a3fc <prvCheckForValidListAndQueue+0x78>)
 800a3b6:	2110      	movs	r1, #16
 800a3b8:	200a      	movs	r0, #10
 800a3ba:	f7fd fc45 	bl	8007c48 <xQueueGenericCreateStatic>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4a08      	ldr	r2, [pc, #32]	@ (800a3e4 <prvCheckForValidListAndQueue+0x60>)
 800a3c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a3c4:	4b07      	ldr	r3, [pc, #28]	@ (800a3e4 <prvCheckForValidListAndQueue+0x60>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3cc:	4b05      	ldr	r3, [pc, #20]	@ (800a3e4 <prvCheckForValidListAndQueue+0x60>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	490b      	ldr	r1, [pc, #44]	@ (800a400 <prvCheckForValidListAndQueue+0x7c>)
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fe fbd8 	bl	8008b88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3d8:	f000 f978 	bl	800a6cc <vPortExitCritical>
}
 800a3dc:	bf00      	nop
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	2000371c 	.word	0x2000371c
 800a3e8:	200036ec 	.word	0x200036ec
 800a3ec:	20003700 	.word	0x20003700
 800a3f0:	20003714 	.word	0x20003714
 800a3f4:	20003718 	.word	0x20003718
 800a3f8:	200037c8 	.word	0x200037c8
 800a3fc:	20003728 	.word	0x20003728
 800a400:	0800af34 	.word	0x0800af34

0800a404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3b04      	subs	r3, #4
 800a414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a41c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3b04      	subs	r3, #4
 800a422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f023 0201 	bic.w	r2, r3, #1
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3b04      	subs	r3, #4
 800a432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a434:	4a0c      	ldr	r2, [pc, #48]	@ (800a468 <pxPortInitialiseStack+0x64>)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	3b14      	subs	r3, #20
 800a43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3b04      	subs	r3, #4
 800a44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f06f 0202 	mvn.w	r2, #2
 800a452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	3b20      	subs	r3, #32
 800a458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a45a:	68fb      	ldr	r3, [r7, #12]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	0800a46d 	.word	0x0800a46d

0800a46c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a476:	4b13      	ldr	r3, [pc, #76]	@ (800a4c4 <prvTaskExitError+0x58>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d00b      	beq.n	800a498 <prvTaskExitError+0x2c>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
}
 800a492:	bf00      	nop
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <prvTaskExitError+0x28>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	60bb      	str	r3, [r7, #8]
}
 800a4aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4ac:	bf00      	nop
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0fc      	beq.n	800a4ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	20000014 	.word	0x20000014
	...

0800a4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4d0:	4b07      	ldr	r3, [pc, #28]	@ (800a4f0 <pxCurrentTCBConst2>)
 800a4d2:	6819      	ldr	r1, [r3, #0]
 800a4d4:	6808      	ldr	r0, [r1, #0]
 800a4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4da:	f380 8809 	msr	PSP, r0
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f04f 0000 	mov.w	r0, #0
 800a4e6:	f380 8811 	msr	BASEPRI, r0
 800a4ea:	4770      	bx	lr
 800a4ec:	f3af 8000 	nop.w

0800a4f0 <pxCurrentTCBConst2>:
 800a4f0:	200031ec 	.word	0x200031ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4f4:	bf00      	nop
 800a4f6:	bf00      	nop

0800a4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4f8:	4808      	ldr	r0, [pc, #32]	@ (800a51c <prvPortStartFirstTask+0x24>)
 800a4fa:	6800      	ldr	r0, [r0, #0]
 800a4fc:	6800      	ldr	r0, [r0, #0]
 800a4fe:	f380 8808 	msr	MSP, r0
 800a502:	f04f 0000 	mov.w	r0, #0
 800a506:	f380 8814 	msr	CONTROL, r0
 800a50a:	b662      	cpsie	i
 800a50c:	b661      	cpsie	f
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	df00      	svc	0
 800a518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a51a:	bf00      	nop
 800a51c:	e000ed08 	.word	0xe000ed08

0800a520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a526:	4b47      	ldr	r3, [pc, #284]	@ (800a644 <xPortStartScheduler+0x124>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a47      	ldr	r2, [pc, #284]	@ (800a648 <xPortStartScheduler+0x128>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d10b      	bne.n	800a548 <xPortStartScheduler+0x28>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	60fb      	str	r3, [r7, #12]
}
 800a542:	bf00      	nop
 800a544:	bf00      	nop
 800a546:	e7fd      	b.n	800a544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a548:	4b3e      	ldr	r3, [pc, #248]	@ (800a644 <xPortStartScheduler+0x124>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a3f      	ldr	r2, [pc, #252]	@ (800a64c <xPortStartScheduler+0x12c>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d10b      	bne.n	800a56a <xPortStartScheduler+0x4a>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	613b      	str	r3, [r7, #16]
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop
 800a568:	e7fd      	b.n	800a566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a56a:	4b39      	ldr	r3, [pc, #228]	@ (800a650 <xPortStartScheduler+0x130>)
 800a56c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	22ff      	movs	r2, #255	@ 0xff
 800a57a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	b2db      	uxtb	r3, r3
 800a582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	4b31      	ldr	r3, [pc, #196]	@ (800a654 <xPortStartScheduler+0x134>)
 800a590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a592:	4b31      	ldr	r3, [pc, #196]	@ (800a658 <xPortStartScheduler+0x138>)
 800a594:	2207      	movs	r2, #7
 800a596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a598:	e009      	b.n	800a5ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a59a:	4b2f      	ldr	r3, [pc, #188]	@ (800a658 <xPortStartScheduler+0x138>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	4a2d      	ldr	r2, [pc, #180]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b6:	2b80      	cmp	r3, #128	@ 0x80
 800a5b8:	d0ef      	beq.n	800a59a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5ba:	4b27      	ldr	r3, [pc, #156]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f1c3 0307 	rsb	r3, r3, #7
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d00b      	beq.n	800a5de <xPortStartScheduler+0xbe>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	60bb      	str	r3, [r7, #8]
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	e7fd      	b.n	800a5da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5de:	4b1e      	ldr	r3, [pc, #120]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	4a1c      	ldr	r2, [pc, #112]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5f0:	4a19      	ldr	r2, [pc, #100]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5fc:	4b17      	ldr	r3, [pc, #92]	@ (800a65c <xPortStartScheduler+0x13c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a16      	ldr	r2, [pc, #88]	@ (800a65c <xPortStartScheduler+0x13c>)
 800a602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a608:	4b14      	ldr	r3, [pc, #80]	@ (800a65c <xPortStartScheduler+0x13c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a13      	ldr	r2, [pc, #76]	@ (800a65c <xPortStartScheduler+0x13c>)
 800a60e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a614:	f000 f8da 	bl	800a7cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a618:	4b11      	ldr	r3, [pc, #68]	@ (800a660 <xPortStartScheduler+0x140>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a61e:	f000 f8f9 	bl	800a814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a622:	4b10      	ldr	r3, [pc, #64]	@ (800a664 <xPortStartScheduler+0x144>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a0f      	ldr	r2, [pc, #60]	@ (800a664 <xPortStartScheduler+0x144>)
 800a628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a62c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a62e:	f7ff ff63 	bl	800a4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a632:	f7fe ff1d 	bl	8009470 <vTaskSwitchContext>
	prvTaskExitError();
 800a636:	f7ff ff19 	bl	800a46c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	e000ed00 	.word	0xe000ed00
 800a648:	410fc271 	.word	0x410fc271
 800a64c:	410fc270 	.word	0x410fc270
 800a650:	e000e400 	.word	0xe000e400
 800a654:	20003818 	.word	0x20003818
 800a658:	2000381c 	.word	0x2000381c
 800a65c:	e000ed20 	.word	0xe000ed20
 800a660:	20000014 	.word	0x20000014
 800a664:	e000ef34 	.word	0xe000ef34

0800a668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	607b      	str	r3, [r7, #4]
}
 800a680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a682:	4b10      	ldr	r3, [pc, #64]	@ (800a6c4 <vPortEnterCritical+0x5c>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3301      	adds	r3, #1
 800a688:	4a0e      	ldr	r2, [pc, #56]	@ (800a6c4 <vPortEnterCritical+0x5c>)
 800a68a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a68c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c4 <vPortEnterCritical+0x5c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d110      	bne.n	800a6b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a694:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c8 <vPortEnterCritical+0x60>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	603b      	str	r3, [r7, #0]
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	e7fd      	b.n	800a6b2 <vPortEnterCritical+0x4a>
	}
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20000014 	.word	0x20000014
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6d2:	4b12      	ldr	r3, [pc, #72]	@ (800a71c <vPortExitCritical+0x50>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10b      	bne.n	800a6f2 <vPortExitCritical+0x26>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	607b      	str	r3, [r7, #4]
}
 800a6ec:	bf00      	nop
 800a6ee:	bf00      	nop
 800a6f0:	e7fd      	b.n	800a6ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <vPortExitCritical+0x50>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	4a08      	ldr	r2, [pc, #32]	@ (800a71c <vPortExitCritical+0x50>)
 800a6fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6fc:	4b07      	ldr	r3, [pc, #28]	@ (800a71c <vPortExitCritical+0x50>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d105      	bne.n	800a710 <vPortExitCritical+0x44>
 800a704:	2300      	movs	r3, #0
 800a706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f383 8811 	msr	BASEPRI, r3
}
 800a70e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	20000014 	.word	0x20000014

0800a720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a720:	f3ef 8009 	mrs	r0, PSP
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	4b15      	ldr	r3, [pc, #84]	@ (800a780 <pxCurrentTCBConst>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	f01e 0f10 	tst.w	lr, #16
 800a730:	bf08      	it	eq
 800a732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73a:	6010      	str	r0, [r2, #0]
 800a73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a744:	f380 8811 	msr	BASEPRI, r0
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f7fe fe8e 	bl	8009470 <vTaskSwitchContext>
 800a754:	f04f 0000 	mov.w	r0, #0
 800a758:	f380 8811 	msr	BASEPRI, r0
 800a75c:	bc09      	pop	{r0, r3}
 800a75e:	6819      	ldr	r1, [r3, #0]
 800a760:	6808      	ldr	r0, [r1, #0]
 800a762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a766:	f01e 0f10 	tst.w	lr, #16
 800a76a:	bf08      	it	eq
 800a76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a770:	f380 8809 	msr	PSP, r0
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	f3af 8000 	nop.w

0800a780 <pxCurrentTCBConst>:
 800a780:	200031ec 	.word	0x200031ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop

0800a788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	607b      	str	r3, [r7, #4]
}
 800a7a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7a2:	f7fe fdab 	bl	80092fc <xTaskIncrementTick>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <xPortSysTickHandler+0x40>)
 800a7ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f383 8811 	msr	BASEPRI, r3
}
 800a7be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a800 <vPortSetupTimerInterrupt+0x34>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a804 <vPortSetupTimerInterrupt+0x38>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a808 <vPortSetupTimerInterrupt+0x3c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a0a      	ldr	r2, [pc, #40]	@ (800a80c <vPortSetupTimerInterrupt+0x40>)
 800a7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e6:	099b      	lsrs	r3, r3, #6
 800a7e8:	4a09      	ldr	r2, [pc, #36]	@ (800a810 <vPortSetupTimerInterrupt+0x44>)
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7ee:	4b04      	ldr	r3, [pc, #16]	@ (800a800 <vPortSetupTimerInterrupt+0x34>)
 800a7f0:	2207      	movs	r2, #7
 800a7f2:	601a      	str	r2, [r3, #0]
}
 800a7f4:	bf00      	nop
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	e000e010 	.word	0xe000e010
 800a804:	e000e018 	.word	0xe000e018
 800a808:	20000008 	.word	0x20000008
 800a80c:	10624dd3 	.word	0x10624dd3
 800a810:	e000e014 	.word	0xe000e014

0800a814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a824 <vPortEnableVFP+0x10>
 800a818:	6801      	ldr	r1, [r0, #0]
 800a81a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a81e:	6001      	str	r1, [r0, #0]
 800a820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a822:	bf00      	nop
 800a824:	e000ed88 	.word	0xe000ed88

0800a828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a82e:	f3ef 8305 	mrs	r3, IPSR
 800a832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b0f      	cmp	r3, #15
 800a838:	d915      	bls.n	800a866 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a83a:	4a18      	ldr	r2, [pc, #96]	@ (800a89c <vPortValidateInterruptPriority+0x74>)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a844:	4b16      	ldr	r3, [pc, #88]	@ (800a8a0 <vPortValidateInterruptPriority+0x78>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	7afa      	ldrb	r2, [r7, #11]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d20b      	bcs.n	800a866 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	607b      	str	r3, [r7, #4]
}
 800a860:	bf00      	nop
 800a862:	bf00      	nop
 800a864:	e7fd      	b.n	800a862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a866:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a4 <vPortValidateInterruptPriority+0x7c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a86e:	4b0e      	ldr	r3, [pc, #56]	@ (800a8a8 <vPortValidateInterruptPriority+0x80>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d90b      	bls.n	800a88e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	603b      	str	r3, [r7, #0]
}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	e7fd      	b.n	800a88a <vPortValidateInterruptPriority+0x62>
	}
 800a88e:	bf00      	nop
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	e000e3f0 	.word	0xe000e3f0
 800a8a0:	20003818 	.word	0x20003818
 800a8a4:	e000ed0c 	.word	0xe000ed0c
 800a8a8:	2000381c 	.word	0x2000381c

0800a8ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08a      	sub	sp, #40	@ 0x28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8b8:	f7fe fc52 	bl	8009160 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8bc:	4b5c      	ldr	r3, [pc, #368]	@ (800aa30 <pvPortMalloc+0x184>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8c4:	f000 f924 	bl	800ab10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8c8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa34 <pvPortMalloc+0x188>)
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f040 8095 	bne.w	800aa00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d01e      	beq.n	800a91a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a8dc:	2208      	movs	r2, #8
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d015      	beq.n	800a91a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f023 0307 	bic.w	r3, r3, #7
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f003 0307 	and.w	r3, r3, #7
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00b      	beq.n	800a91a <pvPortMalloc+0x6e>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	617b      	str	r3, [r7, #20]
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	e7fd      	b.n	800a916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d06f      	beq.n	800aa00 <pvPortMalloc+0x154>
 800a920:	4b45      	ldr	r3, [pc, #276]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	429a      	cmp	r2, r3
 800a928:	d86a      	bhi.n	800aa00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a92a:	4b44      	ldr	r3, [pc, #272]	@ (800aa3c <pvPortMalloc+0x190>)
 800a92c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a92e:	4b43      	ldr	r3, [pc, #268]	@ (800aa3c <pvPortMalloc+0x190>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a934:	e004      	b.n	800a940 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d903      	bls.n	800a952 <pvPortMalloc+0xa6>
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f1      	bne.n	800a936 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a952:	4b37      	ldr	r3, [pc, #220]	@ (800aa30 <pvPortMalloc+0x184>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a958:	429a      	cmp	r2, r3
 800a95a:	d051      	beq.n	800aa00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2208      	movs	r2, #8
 800a962:	4413      	add	r3, r2
 800a964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	1ad2      	subs	r2, r2, r3
 800a976:	2308      	movs	r3, #8
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d920      	bls.n	800a9c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a97e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4413      	add	r3, r2
 800a984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <pvPortMalloc+0xfc>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	613b      	str	r3, [r7, #16]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	1ad2      	subs	r2, r2, r3
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9ba:	69b8      	ldr	r0, [r7, #24]
 800a9bc:	f000 f90a 	bl	800abd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9c0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	4a1b      	ldr	r2, [pc, #108]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a9cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9ce:	4b1a      	ldr	r3, [pc, #104]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa40 <pvPortMalloc+0x194>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d203      	bcs.n	800a9e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9da:	4b17      	ldr	r3, [pc, #92]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a18      	ldr	r2, [pc, #96]	@ (800aa40 <pvPortMalloc+0x194>)
 800a9e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	4b13      	ldr	r3, [pc, #76]	@ (800aa34 <pvPortMalloc+0x188>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	431a      	orrs	r2, r3
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9f6:	4b13      	ldr	r3, [pc, #76]	@ (800aa44 <pvPortMalloc+0x198>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	4a11      	ldr	r2, [pc, #68]	@ (800aa44 <pvPortMalloc+0x198>)
 800a9fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa00:	f7fe fbbc 	bl	800917c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	f003 0307 	and.w	r3, r3, #7
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00b      	beq.n	800aa26 <pvPortMalloc+0x17a>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	60fb      	str	r3, [r7, #12]
}
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
 800aa24:	e7fd      	b.n	800aa22 <pvPortMalloc+0x176>
	return pvReturn;
 800aa26:	69fb      	ldr	r3, [r7, #28]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3728      	adds	r7, #40	@ 0x28
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20007428 	.word	0x20007428
 800aa34:	2000743c 	.word	0x2000743c
 800aa38:	2000742c 	.word	0x2000742c
 800aa3c:	20007420 	.word	0x20007420
 800aa40:	20007430 	.word	0x20007430
 800aa44:	20007434 	.word	0x20007434

0800aa48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d04f      	beq.n	800aafa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa5a:	2308      	movs	r3, #8
 800aa5c:	425b      	negs	r3, r3
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	4413      	add	r3, r2
 800aa62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	4b25      	ldr	r3, [pc, #148]	@ (800ab04 <vPortFree+0xbc>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4013      	ands	r3, r2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10b      	bne.n	800aa8e <vPortFree+0x46>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	60fb      	str	r3, [r7, #12]
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	e7fd      	b.n	800aa8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <vPortFree+0x66>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	60bb      	str	r3, [r7, #8]
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	e7fd      	b.n	800aaaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	4b14      	ldr	r3, [pc, #80]	@ (800ab04 <vPortFree+0xbc>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4013      	ands	r3, r2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01e      	beq.n	800aafa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d11a      	bne.n	800aafa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	4b0e      	ldr	r3, [pc, #56]	@ (800ab04 <vPortFree+0xbc>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	43db      	mvns	r3, r3
 800aace:	401a      	ands	r2, r3
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aad4:	f7fe fb44 	bl	8009160 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <vPortFree+0xc0>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4413      	add	r3, r2
 800aae2:	4a09      	ldr	r2, [pc, #36]	@ (800ab08 <vPortFree+0xc0>)
 800aae4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aae6:	6938      	ldr	r0, [r7, #16]
 800aae8:	f000 f874 	bl	800abd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aaec:	4b07      	ldr	r3, [pc, #28]	@ (800ab0c <vPortFree+0xc4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	4a06      	ldr	r2, [pc, #24]	@ (800ab0c <vPortFree+0xc4>)
 800aaf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aaf6:	f7fe fb41 	bl	800917c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aafa:	bf00      	nop
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	2000743c 	.word	0x2000743c
 800ab08:	2000742c 	.word	0x2000742c
 800ab0c:	20007438 	.word	0x20007438

0800ab10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ab1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab1c:	4b27      	ldr	r3, [pc, #156]	@ (800abbc <prvHeapInit+0xac>)
 800ab1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00c      	beq.n	800ab44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3307      	adds	r3, #7
 800ab2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f023 0307 	bic.w	r3, r3, #7
 800ab36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	4a1f      	ldr	r2, [pc, #124]	@ (800abbc <prvHeapInit+0xac>)
 800ab40:	4413      	add	r3, r2
 800ab42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab48:	4a1d      	ldr	r2, [pc, #116]	@ (800abc0 <prvHeapInit+0xb0>)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab4e:	4b1c      	ldr	r3, [pc, #112]	@ (800abc0 <prvHeapInit+0xb0>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	4413      	add	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab5c:	2208      	movs	r2, #8
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	1a9b      	subs	r3, r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0307 	bic.w	r3, r3, #7
 800ab6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4a15      	ldr	r2, [pc, #84]	@ (800abc4 <prvHeapInit+0xb4>)
 800ab70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab72:	4b14      	ldr	r3, [pc, #80]	@ (800abc4 <prvHeapInit+0xb4>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2200      	movs	r2, #0
 800ab78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab7a:	4b12      	ldr	r3, [pc, #72]	@ (800abc4 <prvHeapInit+0xb4>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	1ad2      	subs	r2, r2, r3
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab90:	4b0c      	ldr	r3, [pc, #48]	@ (800abc4 <prvHeapInit+0xb4>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	4a0a      	ldr	r2, [pc, #40]	@ (800abc8 <prvHeapInit+0xb8>)
 800ab9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	4a09      	ldr	r2, [pc, #36]	@ (800abcc <prvHeapInit+0xbc>)
 800aba6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aba8:	4b09      	ldr	r3, [pc, #36]	@ (800abd0 <prvHeapInit+0xc0>)
 800abaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800abae:	601a      	str	r2, [r3, #0]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	20003820 	.word	0x20003820
 800abc0:	20007420 	.word	0x20007420
 800abc4:	20007428 	.word	0x20007428
 800abc8:	20007430 	.word	0x20007430
 800abcc:	2000742c 	.word	0x2000742c
 800abd0:	2000743c 	.word	0x2000743c

0800abd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abdc:	4b28      	ldr	r3, [pc, #160]	@ (800ac80 <prvInsertBlockIntoFreeList+0xac>)
 800abde:	60fb      	str	r3, [r7, #12]
 800abe0:	e002      	b.n	800abe8 <prvInsertBlockIntoFreeList+0x14>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d8f7      	bhi.n	800abe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	4413      	add	r3, r2
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d108      	bne.n	800ac16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	441a      	add	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	441a      	add	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d118      	bne.n	800ac5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	4b15      	ldr	r3, [pc, #84]	@ (800ac84 <prvInsertBlockIntoFreeList+0xb0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d00d      	beq.n	800ac52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	441a      	add	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	e008      	b.n	800ac64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac52:	4b0c      	ldr	r3, [pc, #48]	@ (800ac84 <prvInsertBlockIntoFreeList+0xb0>)
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	e003      	b.n	800ac64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d002      	beq.n	800ac72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac72:	bf00      	nop
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	20007420 	.word	0x20007420
 800ac84:	20007428 	.word	0x20007428

0800ac88 <__malloc_lock>:
 800ac88:	4801      	ldr	r0, [pc, #4]	@ (800ac90 <__malloc_lock+0x8>)
 800ac8a:	f7f8 bc6c 	b.w	8003566 <__retarget_lock_acquire_recursive>
 800ac8e:	bf00      	nop
 800ac90:	20002a48 	.word	0x20002a48

0800ac94 <__malloc_unlock>:
 800ac94:	4801      	ldr	r0, [pc, #4]	@ (800ac9c <__malloc_unlock+0x8>)
 800ac96:	f7f8 bc7b 	b.w	8003590 <__retarget_lock_release_recursive>
 800ac9a:	bf00      	nop
 800ac9c:	20002a48 	.word	0x20002a48

0800aca0 <memset>:
 800aca0:	4402      	add	r2, r0
 800aca2:	4603      	mov	r3, r0
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d100      	bne.n	800acaa <memset+0xa>
 800aca8:	4770      	bx	lr
 800acaa:	f803 1b01 	strb.w	r1, [r3], #1
 800acae:	e7f9      	b.n	800aca4 <memset+0x4>

0800acb0 <_reclaim_reent>:
 800acb0:	4b2d      	ldr	r3, [pc, #180]	@ (800ad68 <_reclaim_reent+0xb8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4283      	cmp	r3, r0
 800acb6:	b570      	push	{r4, r5, r6, lr}
 800acb8:	4604      	mov	r4, r0
 800acba:	d053      	beq.n	800ad64 <_reclaim_reent+0xb4>
 800acbc:	69c3      	ldr	r3, [r0, #28]
 800acbe:	b31b      	cbz	r3, 800ad08 <_reclaim_reent+0x58>
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	b163      	cbz	r3, 800acde <_reclaim_reent+0x2e>
 800acc4:	2500      	movs	r5, #0
 800acc6:	69e3      	ldr	r3, [r4, #28]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	5959      	ldr	r1, [r3, r5]
 800accc:	b9b1      	cbnz	r1, 800acfc <_reclaim_reent+0x4c>
 800acce:	3504      	adds	r5, #4
 800acd0:	2d80      	cmp	r5, #128	@ 0x80
 800acd2:	d1f8      	bne.n	800acc6 <_reclaim_reent+0x16>
 800acd4:	69e3      	ldr	r3, [r4, #28]
 800acd6:	4620      	mov	r0, r4
 800acd8:	68d9      	ldr	r1, [r3, #12]
 800acda:	f000 f879 	bl	800add0 <_free_r>
 800acde:	69e3      	ldr	r3, [r4, #28]
 800ace0:	6819      	ldr	r1, [r3, #0]
 800ace2:	b111      	cbz	r1, 800acea <_reclaim_reent+0x3a>
 800ace4:	4620      	mov	r0, r4
 800ace6:	f000 f873 	bl	800add0 <_free_r>
 800acea:	69e3      	ldr	r3, [r4, #28]
 800acec:	689d      	ldr	r5, [r3, #8]
 800acee:	b15d      	cbz	r5, 800ad08 <_reclaim_reent+0x58>
 800acf0:	4629      	mov	r1, r5
 800acf2:	4620      	mov	r0, r4
 800acf4:	682d      	ldr	r5, [r5, #0]
 800acf6:	f000 f86b 	bl	800add0 <_free_r>
 800acfa:	e7f8      	b.n	800acee <_reclaim_reent+0x3e>
 800acfc:	680e      	ldr	r6, [r1, #0]
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 f866 	bl	800add0 <_free_r>
 800ad04:	4631      	mov	r1, r6
 800ad06:	e7e1      	b.n	800accc <_reclaim_reent+0x1c>
 800ad08:	6961      	ldr	r1, [r4, #20]
 800ad0a:	b111      	cbz	r1, 800ad12 <_reclaim_reent+0x62>
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 f85f 	bl	800add0 <_free_r>
 800ad12:	69e1      	ldr	r1, [r4, #28]
 800ad14:	b111      	cbz	r1, 800ad1c <_reclaim_reent+0x6c>
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 f85a 	bl	800add0 <_free_r>
 800ad1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ad1e:	b111      	cbz	r1, 800ad26 <_reclaim_reent+0x76>
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 f855 	bl	800add0 <_free_r>
 800ad26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad28:	b111      	cbz	r1, 800ad30 <_reclaim_reent+0x80>
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 f850 	bl	800add0 <_free_r>
 800ad30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ad32:	b111      	cbz	r1, 800ad3a <_reclaim_reent+0x8a>
 800ad34:	4620      	mov	r0, r4
 800ad36:	f000 f84b 	bl	800add0 <_free_r>
 800ad3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ad3c:	b111      	cbz	r1, 800ad44 <_reclaim_reent+0x94>
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 f846 	bl	800add0 <_free_r>
 800ad44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ad46:	b111      	cbz	r1, 800ad4e <_reclaim_reent+0x9e>
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 f841 	bl	800add0 <_free_r>
 800ad4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ad50:	b111      	cbz	r1, 800ad58 <_reclaim_reent+0xa8>
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 f83c 	bl	800add0 <_free_r>
 800ad58:	6a23      	ldr	r3, [r4, #32]
 800ad5a:	b11b      	cbz	r3, 800ad64 <_reclaim_reent+0xb4>
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad62:	4718      	bx	r3
 800ad64:	bd70      	pop	{r4, r5, r6, pc}
 800ad66:	bf00      	nop
 800ad68:	20000018 	.word	0x20000018

0800ad6c <__libc_init_array>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	4d0d      	ldr	r5, [pc, #52]	@ (800ada4 <__libc_init_array+0x38>)
 800ad70:	4c0d      	ldr	r4, [pc, #52]	@ (800ada8 <__libc_init_array+0x3c>)
 800ad72:	1b64      	subs	r4, r4, r5
 800ad74:	10a4      	asrs	r4, r4, #2
 800ad76:	2600      	movs	r6, #0
 800ad78:	42a6      	cmp	r6, r4
 800ad7a:	d109      	bne.n	800ad90 <__libc_init_array+0x24>
 800ad7c:	4d0b      	ldr	r5, [pc, #44]	@ (800adac <__libc_init_array+0x40>)
 800ad7e:	4c0c      	ldr	r4, [pc, #48]	@ (800adb0 <__libc_init_array+0x44>)
 800ad80:	f000 f870 	bl	800ae64 <_init>
 800ad84:	1b64      	subs	r4, r4, r5
 800ad86:	10a4      	asrs	r4, r4, #2
 800ad88:	2600      	movs	r6, #0
 800ad8a:	42a6      	cmp	r6, r4
 800ad8c:	d105      	bne.n	800ad9a <__libc_init_array+0x2e>
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad94:	4798      	blx	r3
 800ad96:	3601      	adds	r6, #1
 800ad98:	e7ee      	b.n	800ad78 <__libc_init_array+0xc>
 800ad9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9e:	4798      	blx	r3
 800ada0:	3601      	adds	r6, #1
 800ada2:	e7f2      	b.n	800ad8a <__libc_init_array+0x1e>
 800ada4:	0800b050 	.word	0x0800b050
 800ada8:	0800b050 	.word	0x0800b050
 800adac:	0800b050 	.word	0x0800b050
 800adb0:	0800b054 	.word	0x0800b054

0800adb4 <memcpy>:
 800adb4:	440a      	add	r2, r1
 800adb6:	4291      	cmp	r1, r2
 800adb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800adbc:	d100      	bne.n	800adc0 <memcpy+0xc>
 800adbe:	4770      	bx	lr
 800adc0:	b510      	push	{r4, lr}
 800adc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adca:	4291      	cmp	r1, r2
 800adcc:	d1f9      	bne.n	800adc2 <memcpy+0xe>
 800adce:	bd10      	pop	{r4, pc}

0800add0 <_free_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4605      	mov	r5, r0
 800add4:	2900      	cmp	r1, #0
 800add6:	d041      	beq.n	800ae5c <_free_r+0x8c>
 800add8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800addc:	1f0c      	subs	r4, r1, #4
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfb8      	it	lt
 800ade2:	18e4      	addlt	r4, r4, r3
 800ade4:	f7ff ff50 	bl	800ac88 <__malloc_lock>
 800ade8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <_free_r+0x90>)
 800adea:	6813      	ldr	r3, [r2, #0]
 800adec:	b933      	cbnz	r3, 800adfc <_free_r+0x2c>
 800adee:	6063      	str	r3, [r4, #4]
 800adf0:	6014      	str	r4, [r2, #0]
 800adf2:	4628      	mov	r0, r5
 800adf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf8:	f7ff bf4c 	b.w	800ac94 <__malloc_unlock>
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	d908      	bls.n	800ae12 <_free_r+0x42>
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	1821      	adds	r1, r4, r0
 800ae04:	428b      	cmp	r3, r1
 800ae06:	bf01      	itttt	eq
 800ae08:	6819      	ldreq	r1, [r3, #0]
 800ae0a:	685b      	ldreq	r3, [r3, #4]
 800ae0c:	1809      	addeq	r1, r1, r0
 800ae0e:	6021      	streq	r1, [r4, #0]
 800ae10:	e7ed      	b.n	800adee <_free_r+0x1e>
 800ae12:	461a      	mov	r2, r3
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	b10b      	cbz	r3, 800ae1c <_free_r+0x4c>
 800ae18:	42a3      	cmp	r3, r4
 800ae1a:	d9fa      	bls.n	800ae12 <_free_r+0x42>
 800ae1c:	6811      	ldr	r1, [r2, #0]
 800ae1e:	1850      	adds	r0, r2, r1
 800ae20:	42a0      	cmp	r0, r4
 800ae22:	d10b      	bne.n	800ae3c <_free_r+0x6c>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	4401      	add	r1, r0
 800ae28:	1850      	adds	r0, r2, r1
 800ae2a:	4283      	cmp	r3, r0
 800ae2c:	6011      	str	r1, [r2, #0]
 800ae2e:	d1e0      	bne.n	800adf2 <_free_r+0x22>
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	6053      	str	r3, [r2, #4]
 800ae36:	4408      	add	r0, r1
 800ae38:	6010      	str	r0, [r2, #0]
 800ae3a:	e7da      	b.n	800adf2 <_free_r+0x22>
 800ae3c:	d902      	bls.n	800ae44 <_free_r+0x74>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	e7d6      	b.n	800adf2 <_free_r+0x22>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	1821      	adds	r1, r4, r0
 800ae48:	428b      	cmp	r3, r1
 800ae4a:	bf04      	itt	eq
 800ae4c:	6819      	ldreq	r1, [r3, #0]
 800ae4e:	685b      	ldreq	r3, [r3, #4]
 800ae50:	6063      	str	r3, [r4, #4]
 800ae52:	bf04      	itt	eq
 800ae54:	1809      	addeq	r1, r1, r0
 800ae56:	6021      	streq	r1, [r4, #0]
 800ae58:	6054      	str	r4, [r2, #4]
 800ae5a:	e7ca      	b.n	800adf2 <_free_r+0x22>
 800ae5c:	bd38      	pop	{r3, r4, r5, pc}
 800ae5e:	bf00      	nop
 800ae60:	20007440 	.word	0x20007440

0800ae64 <_init>:
 800ae64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae66:	bf00      	nop
 800ae68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae6a:	bc08      	pop	{r3}
 800ae6c:	469e      	mov	lr, r3
 800ae6e:	4770      	bx	lr

0800ae70 <_fini>:
 800ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae72:	bf00      	nop
 800ae74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae76:	bc08      	pop	{r3}
 800ae78:	469e      	mov	lr, r3
 800ae7a:	4770      	bx	lr
