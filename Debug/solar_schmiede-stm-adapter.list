
solar_schmiede-stm-adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4dc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800a68c  0800a68c  0000b68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a858  0800a858  0000c068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a858  0800a858  0000b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a860  0800a860  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a860  0800a860  0000b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a864  0800a864  0000b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800a868  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c068  2**0
                  CONTENTS
 10 .bss          000054e4  20000068  20000068  0000c068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000554c  2000554c  0000c068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e636  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042f9  00000000  00000000  0002a6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  0002e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013d6  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027450  00000000  00000000  00031726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d0d0  00000000  00000000  00058b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2e3d  00000000  00000000  00075c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00168a83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d80  00000000  00000000  00168ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0016f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a674 	.word	0x0800a674

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800a674 	.word	0x0800a674

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b988 	b.w	8000528 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	468e      	mov	lr, r1
 8000238:	4604      	mov	r4, r0
 800023a:	4688      	mov	r8, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d962      	bls.n	800030c <__udivmoddi4+0xdc>
 8000246:	fab2 f682 	clz	r6, r2
 800024a:	b14e      	cbz	r6, 8000260 <__udivmoddi4+0x30>
 800024c:	f1c6 0320 	rsb	r3, r6, #32
 8000250:	fa01 f806 	lsl.w	r8, r1, r6
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	40b7      	lsls	r7, r6
 800025a:	ea43 0808 	orr.w	r8, r3, r8
 800025e:	40b4      	lsls	r4, r6
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f fc87 	uxth.w	ip, r7
 8000268:	fbb8 f1fe 	udiv	r1, r8, lr
 800026c:	0c23      	lsrs	r3, r4, #16
 800026e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000276:	fb01 f20c 	mul.w	r2, r1, ip
 800027a:	429a      	cmp	r2, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x62>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f101 30ff 	add.w	r0, r1, #4294967295
 8000284:	f080 80ea 	bcs.w	800045c <__udivmoddi4+0x22c>
 8000288:	429a      	cmp	r2, r3
 800028a:	f240 80e7 	bls.w	800045c <__udivmoddi4+0x22c>
 800028e:	3902      	subs	r1, #2
 8000290:	443b      	add	r3, r7
 8000292:	1a9a      	subs	r2, r3, r2
 8000294:	b2a3      	uxth	r3, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a6:	459c      	cmp	ip, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x8e>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	f080 80d6 	bcs.w	8000460 <__udivmoddi4+0x230>
 80002b4:	459c      	cmp	ip, r3
 80002b6:	f240 80d3 	bls.w	8000460 <__udivmoddi4+0x230>
 80002ba:	443b      	add	r3, r7
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c2:	eba3 030c 	sub.w	r3, r3, ip
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40f3      	lsrs	r3, r6
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xb6>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb0>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa2>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x14c>
 80002ee:	4573      	cmp	r3, lr
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xc8>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 8105 	bhi.w	8000502 <__udivmoddi4+0x2d2>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4690      	mov	r8, r2
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e5      	beq.n	80002d2 <__udivmoddi4+0xa2>
 8000306:	e9c5 4800 	strd	r4, r8, [r5]
 800030a:	e7e2      	b.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	2a00      	cmp	r2, #0
 800030e:	f000 8090 	beq.w	8000432 <__udivmoddi4+0x202>
 8000312:	fab2 f682 	clz	r6, r2
 8000316:	2e00      	cmp	r6, #0
 8000318:	f040 80a4 	bne.w	8000464 <__udivmoddi4+0x234>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	0c03      	lsrs	r3, r0, #16
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	b280      	uxth	r0, r0
 8000326:	b2bc      	uxth	r4, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb2 fcfe 	udiv	ip, r2, lr
 800032e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000336:	fb04 f20c 	mul.w	r2, r4, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x11e>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x11c>
 8000346:	429a      	cmp	r2, r3
 8000348:	f200 80e0 	bhi.w	800050c <__udivmoddi4+0x2dc>
 800034c:	46c4      	mov	ip, r8
 800034e:	1a9b      	subs	r3, r3, r2
 8000350:	fbb3 f2fe 	udiv	r2, r3, lr
 8000354:	fb0e 3312 	mls	r3, lr, r2, r3
 8000358:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800035c:	fb02 f404 	mul.w	r4, r2, r4
 8000360:	429c      	cmp	r4, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x144>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f102 30ff 	add.w	r0, r2, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x142>
 800036c:	429c      	cmp	r4, r3
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2d6>
 8000372:	4602      	mov	r2, r0
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x98>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa0e f401 	lsl.w	r4, lr, r1
 800038c:	fa20 f306 	lsr.w	r3, r0, r6
 8000390:	fa2e fe06 	lsr.w	lr, lr, r6
 8000394:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	fa1f fc87 	uxth.w	ip, r7
 80003a2:	fbbe f0f9 	udiv	r0, lr, r9
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1a0>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c2:	f080 809c 	bcs.w	80004fe <__udivmoddi4+0x2ce>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f240 8099 	bls.w	80004fe <__udivmoddi4+0x2ce>
 80003cc:	3802      	subs	r0, #2
 80003ce:	443c      	add	r4, r7
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	fa1f fe83 	uxth.w	lr, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1ce>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f2:	f080 8082 	bcs.w	80004fa <__udivmoddi4+0x2ca>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d97f      	bls.n	80004fa <__udivmoddi4+0x2ca>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	fba0 ec02 	umull	lr, ip, r0, r2
 800040a:	4564      	cmp	r4, ip
 800040c:	4673      	mov	r3, lr
 800040e:	46e1      	mov	r9, ip
 8000410:	d362      	bcc.n	80004d8 <__udivmoddi4+0x2a8>
 8000412:	d05f      	beq.n	80004d4 <__udivmoddi4+0x2a4>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x1fe>
 8000416:	ebb8 0203 	subs.w	r2, r8, r3
 800041a:	eb64 0409 	sbc.w	r4, r4, r9
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431e      	orrs	r6, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c5 6400 	strd	r6, r4, [r5]
 800042e:	2100      	movs	r1, #0
 8000430:	e74f      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000432:	fbb1 fcf2 	udiv	ip, r1, r2
 8000436:	0c01      	lsrs	r1, r0, #16
 8000438:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800043c:	b280      	uxth	r0, r0
 800043e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000442:	463b      	mov	r3, r7
 8000444:	4638      	mov	r0, r7
 8000446:	463c      	mov	r4, r7
 8000448:	46b8      	mov	r8, r7
 800044a:	46be      	mov	lr, r7
 800044c:	2620      	movs	r6, #32
 800044e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000452:	eba2 0208 	sub.w	r2, r2, r8
 8000456:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045a:	e766      	b.n	800032a <__udivmoddi4+0xfa>
 800045c:	4601      	mov	r1, r0
 800045e:	e718      	b.n	8000292 <__udivmoddi4+0x62>
 8000460:	4610      	mov	r0, r2
 8000462:	e72c      	b.n	80002be <__udivmoddi4+0x8e>
 8000464:	f1c6 0220 	rsb	r2, r6, #32
 8000468:	fa2e f302 	lsr.w	r3, lr, r2
 800046c:	40b7      	lsls	r7, r6
 800046e:	40b1      	lsls	r1, r6
 8000470:	fa20 f202 	lsr.w	r2, r0, r2
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	430a      	orrs	r2, r1
 800047a:	fbb3 f8fe 	udiv	r8, r3, lr
 800047e:	b2bc      	uxth	r4, r7
 8000480:	fb0e 3318 	mls	r3, lr, r8, r3
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb08 f904 	mul.w	r9, r8, r4
 800048e:	40b0      	lsls	r0, r6
 8000490:	4589      	cmp	r9, r1
 8000492:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000496:	b280      	uxth	r0, r0
 8000498:	d93e      	bls.n	8000518 <__udivmoddi4+0x2e8>
 800049a:	1879      	adds	r1, r7, r1
 800049c:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x276>
 80004a2:	4589      	cmp	r9, r1
 80004a4:	d81f      	bhi.n	80004e6 <__udivmoddi4+0x2b6>
 80004a6:	eba1 0109 	sub.w	r1, r1, r9
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b6:	b292      	uxth	r2, r2
 80004b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004bc:	4542      	cmp	r2, r8
 80004be:	d229      	bcs.n	8000514 <__udivmoddi4+0x2e4>
 80004c0:	18ba      	adds	r2, r7, r2
 80004c2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c6:	d2c4      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004c8:	4542      	cmp	r2, r8
 80004ca:	d2c2      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004cc:	f1a9 0102 	sub.w	r1, r9, #2
 80004d0:	443a      	add	r2, r7
 80004d2:	e7be      	b.n	8000452 <__udivmoddi4+0x222>
 80004d4:	45f0      	cmp	r8, lr
 80004d6:	d29d      	bcs.n	8000414 <__udivmoddi4+0x1e4>
 80004d8:	ebbe 0302 	subs.w	r3, lr, r2
 80004dc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e0:	3801      	subs	r0, #1
 80004e2:	46e1      	mov	r9, ip
 80004e4:	e796      	b.n	8000414 <__udivmoddi4+0x1e4>
 80004e6:	eba7 0909 	sub.w	r9, r7, r9
 80004ea:	4449      	add	r1, r9
 80004ec:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f4:	fb09 f804 	mul.w	r8, r9, r4
 80004f8:	e7db      	b.n	80004b2 <__udivmoddi4+0x282>
 80004fa:	4673      	mov	r3, lr
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1ce>
 80004fe:	4650      	mov	r0, sl
 8000500:	e766      	b.n	80003d0 <__udivmoddi4+0x1a0>
 8000502:	4608      	mov	r0, r1
 8000504:	e6fd      	b.n	8000302 <__udivmoddi4+0xd2>
 8000506:	443b      	add	r3, r7
 8000508:	3a02      	subs	r2, #2
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x144>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	443b      	add	r3, r7
 8000512:	e71c      	b.n	800034e <__udivmoddi4+0x11e>
 8000514:	4649      	mov	r1, r9
 8000516:	e79c      	b.n	8000452 <__udivmoddi4+0x222>
 8000518:	eba1 0109 	sub.w	r1, r1, r9
 800051c:	46c4      	mov	ip, r8
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	e7c4      	b.n	80004b2 <__udivmoddi4+0x282>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <ADS124S08_Init>:
  * @param hspi_handle Pointer to the SPI_HandleTypeDef used for communication.
  * @param nss_port GPIO Port for the software NSS pin.
  * @param nss_pin GPIO Pin for the software NSS pin.
  * @retval None
  */
void ADS124S08_Init(ADS124S08 *adc) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
//    adc->hspi = hspi_handle;
//    adc->nss_port = nss_port;
//    adc->nss_pin = nss_pin;

    // Ensure NSS is high before starting any communication
    ADS124S08_NSS_HIGH(adc);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6858      	ldr	r0, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	891b      	ldrh	r3, [r3, #8]
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	f003 ff92 	bl	8004468 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Short delay to ensure pin state settles
 8000544:	200a      	movs	r0, #10
 8000546:	f002 fc87 	bl	8002e58 <HAL_Delay>

    ADS124S08_Reset(adc);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f81f 	bl	800058e <ADS124S08_Reset>
    HAL_Delay(5);  // Allow time after reset
 8000550:	2005      	movs	r0, #5
 8000552:	f002 fc81 	bl	8002e58 <HAL_Delay>

    // SYSMON: default sample number = 8 (Register 0x09)
    // Note: The datasheet specifies SYSMON register at address 0x09.
    // The value 0x10 sets the number of samples for internal temperature sensor conversions.
    ADS124S08_WriteRegister(adc, 0x09, 0x10);
 8000556:	2210      	movs	r2, #16
 8000558:	2109      	movs	r1, #9
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f86c 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000560:	2005      	movs	r0, #5
 8000562:	f002 fc79 	bl	8002e58 <HAL_Delay>

    // INPMUX: Configure PGA_GAIN (Register 0x03)
    // Assuming 0x00 for gain = 1 (PGA bypassed or gain 1, consult datasheet for specific bits)
    ADS124S08_WriteRegister(adc, 0x03, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2103      	movs	r1, #3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f864 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000570:	2005      	movs	r0, #5
 8000572:	f002 fc71 	bl	8002e58 <HAL_Delay>
    // 0x1A typically enables internal 2.5V reference and connects negative input to AINN.
    // Ensure this matches your desired reference configuration.
    // Bits [7:6] - VREFCON (reference voltage control)
    // Bit [5]    - REF_EN (reference enable)
    // Bits [4:0] - REFP_DIR, REFN_DIR (reference positive/negative direction)
    ADS124S08_WriteRegister(adc, 0x05, 0x1A);
 8000576:	221a      	movs	r2, #26
 8000578:	2105      	movs	r1, #5
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f85c 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000580:	2005      	movs	r0, #5
 8000582:	f002 fc69 	bl	8002e58 <HAL_Delay>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <ADS124S08_Reset>:
/**
  * @brief Sends the RESET command to the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval None
  */
void ADS124S08_Reset(ADS124S08 *adc) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_RESET;
 8000596:	2306      	movs	r3, #6
 8000598:	73fb      	strb	r3, [r7, #15]
    ADS124S08_NSS_LOW(adc); // Activate NSS
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6858      	ldr	r0, [r3, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	891b      	ldrh	r3, [r3, #8]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	f003 ff5f 	bl	8004468 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 80005aa:	2005      	movs	r0, #5
 80005ac:	f002 fc54 	bl	8002e58 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, HAL_MAX_DELAY);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	f107 010f 	add.w	r1, r7, #15
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	2201      	movs	r2, #1
 80005be:	f004 fca7 	bl	8004f10 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 80005c2:	2005      	movs	r0, #5
 80005c4:	f002 fc48 	bl	8002e58 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6858      	ldr	r0, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	891b      	ldrh	r3, [r3, #8]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f003 ff48 	bl	8004468 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Small delay after deactivating NSS
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 fc3d 	bl	8002e58 <HAL_Delay>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <ADS124S08_StartConversion>:
/**
  * @brief Sends the START command to the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval None
  */
void ADS124S08_StartConversion(ADS124S08 *adc) {
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_START;
 80005ee:	2308      	movs	r3, #8
 80005f0:	73fb      	strb	r3, [r7, #15]
    ADS124S08_NSS_LOW(adc); // Activate NSS
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6858      	ldr	r0, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	891b      	ldrh	r3, [r3, #8]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f003 ff33 	bl	8004468 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 8000602:	2005      	movs	r0, #5
 8000604:	f002 fc28 	bl	8002e58 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, HAL_MAX_DELAY);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	f107 010f 	add.w	r1, r7, #15
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2201      	movs	r2, #1
 8000616:	f004 fc7b 	bl	8004f10 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 800061a:	2005      	movs	r0, #5
 800061c:	f002 fc1c 	bl	8002e58 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6858      	ldr	r0, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	891b      	ldrh	r3, [r3, #8]
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	f003 ff1c 	bl	8004468 <HAL_GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <ADS124S08_WriteRegister>:
  * @param adc Pointer to the ADS124S08 structure.
  * @param reg Register address to write.
  * @param value Value to write to the register.
  * @retval None
  */
void ADS124S08_WriteRegister(ADS124S08 *adc, uint8_t reg, uint8_t value) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
 8000644:	4613      	mov	r3, r2
 8000646:	70bb      	strb	r3, [r7, #2]
    if (reg >= ADS124S08_REG_COUNT) return; // Basic boundary check
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b1f      	cmp	r3, #31
 800064c:	d828      	bhi.n	80006a0 <ADS124S08_WriteRegister+0x68>

    // WREG command format: [WREG | Reg_Address] [Number_of_Registers_to_write - 1] [Value]
    // To write one register, Num_Registers - 1 = 0x00
    uint8_t tx[3] = { ADS_CMD_WREG | reg, 0x00, value };
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000654:	b2db      	uxtb	r3, r3
 8000656:	733b      	strb	r3, [r7, #12]
 8000658:	2300      	movs	r3, #0
 800065a:	737b      	strb	r3, [r7, #13]
 800065c:	78bb      	ldrb	r3, [r7, #2]
 800065e:	73bb      	strb	r3, [r7, #14]

    ADS124S08_NSS_LOW(adc); // Activate NSS
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f003 fefc 	bl	8004468 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 8000670:	2005      	movs	r0, #5
 8000672:	f002 fbf1 	bl	8002e58 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, tx, 3, HAL_MAX_DELAY); // Send command, count byte, and value
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f107 010c 	add.w	r1, r7, #12
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	2203      	movs	r2, #3
 8000684:	f004 fc44 	bl	8004f10 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 8000688:	2005      	movs	r0, #5
 800068a:	f002 fbe5 	bl	8002e58 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6858      	ldr	r0, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	891b      	ldrh	r3, [r3, #8]
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	f003 fee5 	bl	8004468 <HAL_GPIO_WritePin>
 800069e:	e000      	b.n	80006a2 <ADS124S08_WriteRegister+0x6a>
    if (reg >= ADS124S08_REG_COUNT) return; // Basic boundary check
 80006a0:	bf00      	nop
}
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <ADS124S08_SetInputChannel>:
  * @param adc Pointer to the ADS124S08 structure.
  * @param pos Positive input channel (AIN0-AIN15, VREF, etc.).
  * @param neg Negative input channel (AIN0-AIN15, VREF, etc.).
  * @retval None
  */
void ADS124S08_SetInputChannel(ADS124S08 *adc, uint8_t pos, uint8_t neg) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
 80006b4:	4613      	mov	r3, r2
 80006b6:	70bb      	strb	r3, [r7, #2]
    if (pos > 15 || neg > 15) return; // Input channels are typically 0-15 (AIN0-AIN15)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b0f      	cmp	r3, #15
 80006bc:	d834      	bhi.n	8000728 <ADS124S08_SetInputChannel+0x80>
 80006be:	78bb      	ldrb	r3, [r7, #2]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d831      	bhi.n	8000728 <ADS124S08_SetInputChannel+0x80>

    uint8_t mux_value = ((pos & 0x0F) << 4) | (neg & 0x0F); // Combine into MUX register format
 80006c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]
    // MUX register address is 0x01 on ADS124S08
    uint8_t tx[3] = {
 80006dc:	2341      	movs	r3, #65	@ 0x41
 80006de:	733b      	strb	r3, [r7, #12]
 80006e0:	2300      	movs	r3, #0
 80006e2:	737b      	strb	r3, [r7, #13]
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	73bb      	strb	r3, [r7, #14]
        ADS_CMD_WREG | 0x01,  // Write to MUX register (0x01)
        0x00,                 // Write 1 register (count - 1)
        mux_value             // The actual MUX register value
    };

    ADS124S08_NSS_LOW(adc); // Activate NSS
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6858      	ldr	r0, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	891b      	ldrh	r3, [r3, #8]
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	f003 feb8 	bl	8004468 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 80006f8:	2005      	movs	r0, #5
 80006fa:	f002 fbad 	bl	8002e58 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, tx, sizeof(tx), HAL_MAX_DELAY);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 010c 	add.w	r1, r7, #12
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	2203      	movs	r2, #3
 800070c:	f004 fc00 	bl	8004f10 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 8000710:	2005      	movs	r0, #5
 8000712:	f002 fba1 	bl	8002e58 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6858      	ldr	r0, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	891b      	ldrh	r3, [r3, #8]
 800071e:	2201      	movs	r2, #1
 8000720:	4619      	mov	r1, r3
 8000722:	f003 fea1 	bl	8004468 <HAL_GPIO_WritePin>
 8000726:	e000      	b.n	800072a <ADS124S08_SetInputChannel+0x82>
    if (pos > 15 || neg > 15) return; // Input channels are typically 0-15 (AIN0-AIN15)
 8000728:	bf00      	nop
}
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <ADS124S08_ReadData>:
/**
  * @brief Reads the 24-bit conversion data from the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval Signed 32-bit integer representing the conversion result.
  */
uint32_t ADS124S08_ReadData(ADS124S08 *adc) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_RDATA; // Read Data command
 8000738:	2312      	movs	r3, #18
 800073a:	72fb      	strb	r3, [r7, #11]
    uint8_t rx[3] = {0};         // Buffer for 3 data bytes
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2100      	movs	r1, #0
 8000742:	460a      	mov	r2, r1
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	460a      	mov	r2, r1
 8000748:	709a      	strb	r2, [r3, #2]

    ADS124S08_NSS_LOW(adc); // Activate NSS
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6858      	ldr	r0, [r3, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	891b      	ldrh	r3, [r3, #8]
 8000752:	2200      	movs	r2, #0
 8000754:	4619      	mov	r1, r3
 8000756:	f003 fe87 	bl	8004468 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 800075a:	2005      	movs	r0, #5
 800075c:	f002 fb7c 	bl	8002e58 <HAL_Delay>
//    osDelay(5);
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, 100); // Send RDATA command
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	f107 010b 	add.w	r1, r7, #11
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	2201      	movs	r2, #1
 800076c:	f004 fbd0 	bl	8004f10 <HAL_SPI_Transmit>
    HAL_SPI_Receive(adc->hspi, rx, 3, 200);    // Receive 3 data bytes
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	f107 0108 	add.w	r1, r7, #8
 8000778:	23c8      	movs	r3, #200	@ 0xc8
 800077a:	2203      	movs	r2, #3
 800077c:	f004 fd0c 	bl	8005198 <HAL_SPI_Receive>
    HAL_Delay(5); // Delay after transmit/receive and before deactivating NSS
 8000780:	2005      	movs	r0, #5
 8000782:	f002 fb69 	bl	8002e58 <HAL_Delay>
//    osDelay(5);
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6858      	ldr	r0, [r3, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	891b      	ldrh	r3, [r3, #8]
 800078e:	2201      	movs	r2, #1
 8000790:	4619      	mov	r1, r3
 8000792:	f003 fe69 	bl	8004468 <HAL_GPIO_WritePin>

    // Reconstruct 24-bit value into a 32-bit signed integer
    uint32_t value = (rx[0] << 16) | (rx[1] << 8) | rx[2];
 8000796:	7a3b      	ldrb	r3, [r7, #8]
 8000798:	041a      	lsls	r2, r3, #16
 800079a:	7a7b      	ldrb	r3, [r7, #9]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	4313      	orrs	r3, r2
 80007a0:	7aba      	ldrb	r2, [r7, #10]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
    // Check for negative 24-bit value and sign-extend to 32 bits
//    if (value & 0x800000) { // If the 24th bit (MSB of 24-bit data) is set
//        value |= 0xFF000000; // Sign-extend by filling upper bits with 1s
//    }

    return value;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <getWaitTime>:
static uint8_t myAddr = 0xFF; // Unassigned
static bool downstreamDetected = false;
static volatile bool spi_finished = 0;


static uint32_t getWaitTime(uint8_t prevNodes) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	return prevNodes * MIN_WAIT_TIME_PER_NODE;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2232      	movs	r2, #50	@ 0x32
 80007be:	fb02 f303 	mul.w	r3, r2, r3
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <handleADCDataRequest>:

static void handleADCDataRequest() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
	// Create packet with ADC data
	Packet p = { 
 80007d6:	463b      	mov	r3, r7
 80007d8:	2220      	movs	r2, #32
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f009 fe67 	bl	800a4b0 <memset>
 80007e2:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <handleADCDataRequest+0x8c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	707b      	strb	r3, [r7, #1]
 80007e8:	2320      	movs	r3, #32
 80007ea:	70bb      	strb	r3, [r7, #2]
 80007ec:	2305      	movs	r3, #5
 80007ee:	713b      	strb	r3, [r7, #4]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 80007f0:	793b      	ldrb	r3, [r7, #4]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	783b      	ldrb	r3, [r7, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	0049      	lsls	r1, r1, #1
 80007fc:	440b      	add	r3, r1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4413      	add	r3, r2
 8000802:	b2da      	uxtb	r2, r3
 8000804:	787b      	ldrb	r3, [r7, #1]
 8000806:	4619      	mov	r1, r3
 8000808:	0089      	lsls	r1, r1, #2
 800080a:	440b      	add	r3, r1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4413      	add	r3, r2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	70fb      	strb	r3, [r7, #3]
	
	// Set request type
	p.requestDataPack.requestDataType = RQP_TYPE_ADC_READINGS;
 8000814:	2301      	movs	r3, #1
 8000816:	717b      	strb	r3, [r7, #5]

	// Safely acquire mutex with timeout
	if(osMutexAcquire(adcBufReadMutexHandle, 10) == osOK) {
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <handleADCDataRequest+0x90>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	210a      	movs	r1, #10
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fa6a 	bl	8006cf8 <osMutexAcquire>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10b      	bne.n	8000842 <handleADCDataRequest+0x72>
		// Copy ADC readings to packet
		memcpy(p.requestDataPack.data, adcReadings, ADC_READINGS_SIZE);
 800082a:	463b      	mov	r3, r7
 800082c:	3307      	adds	r3, #7
 800082e:	2218      	movs	r2, #24
 8000830:	490c      	ldr	r1, [pc, #48]	@ (8000864 <handleADCDataRequest+0x94>)
 8000832:	4618      	mov	r0, r3
 8000834:	f009 fec6 	bl	800a5c4 <memcpy>
		osMutexRelease(adcBufReadMutexHandle);
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <handleADCDataRequest+0x90>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f006 faa6 	bl	8006d8e <osMutexRelease>
	}

	// Set data size
	p.requestDataPack.dataSize = ADC_READINGS_SIZE;
 8000842:	2318      	movs	r3, #24
 8000844:	71bb      	strb	r3, [r7, #6]

	// Transmit with increased timeout to ensure completion
	HAL_SPI_Transmit(&slave, (uint8_t*)&p, PACKET_MAX_SIZE, 200);
 8000846:	4639      	mov	r1, r7
 8000848:	23c8      	movs	r3, #200	@ 0xc8
 800084a:	2220      	movs	r2, #32
 800084c:	4806      	ldr	r0, [pc, #24]	@ (8000868 <handleADCDataRequest+0x98>)
 800084e:	f004 fb5f 	bl	8004f10 <HAL_SPI_Transmit>
}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000006 	.word	0x20000006
 8000860:	2000097c 	.word	0x2000097c
 8000864:	20000984 	.word	0x20000984
 8000868:	20000084 	.word	0x20000084

0800086c <handleExternalADCDataRequest>:

static void handleExternalADCDataRequest() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
	// Create packet with external ADC data
	Packet p = { 
 8000872:	463b      	mov	r3, r7
 8000874:	2220      	movs	r2, #32
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f009 fe19 	bl	800a4b0 <memset>
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <handleExternalADCDataRequest+0x70>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	707b      	strb	r3, [r7, #1]
 8000884:	2320      	movs	r3, #32
 8000886:	70bb      	strb	r3, [r7, #2]
 8000888:	2305      	movs	r3, #5
 800088a:	713b      	strb	r3, [r7, #4]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 800088c:	793b      	ldrb	r3, [r7, #4]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	783b      	ldrb	r3, [r7, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	0049      	lsls	r1, r1, #1
 8000898:	440b      	add	r3, r1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4413      	add	r3, r2
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	787b      	ldrb	r3, [r7, #1]
 80008a2:	4619      	mov	r1, r3
 80008a4:	0089      	lsls	r1, r1, #2
 80008a6:	440b      	add	r3, r1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4413      	add	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	70fb      	strb	r3, [r7, #3]
	
	// Set request type
	p.requestDataPack.requestDataType = RQP_TYPE_EXT_ADC_READINGS;
 80008b0:	2311      	movs	r3, #17
 80008b2:	717b      	strb	r3, [r7, #5]

	// Copy external ADC readings to packet
	// No mutex needed as this is accessed only from one task
	memcpy(p.requestDataPack.data, externalADCReadings, EXT_ADC_READINGS_SIZE);
 80008b4:	463b      	mov	r3, r7
 80008b6:	3307      	adds	r3, #7
 80008b8:	2216      	movs	r2, #22
 80008ba:	4909      	ldr	r1, [pc, #36]	@ (80008e0 <handleExternalADCDataRequest+0x74>)
 80008bc:	4618      	mov	r0, r3
 80008be:	f009 fe81 	bl	800a5c4 <memcpy>

	// Set data size
	p.requestDataPack.dataSize = EXT_ADC_READINGS_SIZE;
 80008c2:	2316      	movs	r3, #22
 80008c4:	71bb      	strb	r3, [r7, #6]

	// Transmit with increased timeout to ensure completion
	HAL_SPI_Transmit(&slave, (uint8_t*)&p, PACKET_MAX_SIZE, 200);
 80008c6:	4639      	mov	r1, r7
 80008c8:	23c8      	movs	r3, #200	@ 0xc8
 80008ca:	2220      	movs	r2, #32
 80008cc:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <handleExternalADCDataRequest+0x78>)
 80008ce:	f004 fb1f 	bl	8004f10 <HAL_SPI_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000006 	.word	0x20000006
 80008e0:	2000099c 	.word	0x2000099c
 80008e4:	20000084 	.word	0x20000084

080008e8 <handleSayHiRequest>:

static void handleSayHiRequest() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
	// Create packet for "Say Hi" response
	Packet hi = { 
 80008ee:	463b      	mov	r3, r7
 80008f0:	2220      	movs	r2, #32
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f009 fddb 	bl	800a4b0 <memset>
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <handleSayHiRequest+0x80>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	707b      	strb	r3, [r7, #1]
 8000900:	2320      	movs	r3, #32
 8000902:	70bb      	strb	r3, [r7, #2]
 8000904:	2305      	movs	r3, #5
 8000906:	713b      	strb	r3, [r7, #4]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	hi.header.crc = hi.header.packetType * 2 + hi.header.targetAddr * 3 + hi.header.srcAddr * 5;
 8000908:	793b      	ldrb	r3, [r7, #4]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	783b      	ldrb	r3, [r7, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	0049      	lsls	r1, r1, #1
 8000914:	440b      	add	r3, r1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4413      	add	r3, r2
 800091a:	b2da      	uxtb	r2, r3
 800091c:	787b      	ldrb	r3, [r7, #1]
 800091e:	4619      	mov	r1, r3
 8000920:	0089      	lsls	r1, r1, #2
 8000922:	440b      	add	r3, r1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4413      	add	r3, r2
 8000928:	b2db      	uxtb	r3, r3
 800092a:	70fb      	strb	r3, [r7, #3]
	
	// Set request type
	hi.requestDataPack.requestDataType = RQP_TYPE_SAY_HI;
 800092c:	2303      	movs	r3, #3
 800092e:	717b      	strb	r3, [r7, #5]

	// Message to send
	const char *msg = "Solar Schmiede STM Adapter v1.0";
 8000930:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <handleSayHiRequest+0x84>)
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
	size_t dataLen = strlen(msg) + 1;
 8000934:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000936:	f7ff fc5b 	bl	80001f0 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	3301      	adds	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
	
	// Copy message to packet
	memcpy(hi.requestDataPack.data, msg, dataLen);
 8000940:	463b      	mov	r3, r7
 8000942:	3307      	adds	r3, #7
 8000944:	6a3a      	ldr	r2, [r7, #32]
 8000946:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000948:	4618      	mov	r0, r3
 800094a:	f009 fe3b 	bl	800a5c4 <memcpy>

	// Set data size
	hi.requestDataPack.dataSize = dataLen;
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	71bb      	strb	r3, [r7, #6]

	// Transmit with increased timeout to ensure completion
	HAL_SPI_Transmit(&slave, (uint8_t*)&hi, PACKET_MAX_SIZE, 200);
 8000954:	4639      	mov	r1, r7
 8000956:	23c8      	movs	r3, #200	@ 0xc8
 8000958:	2220      	movs	r2, #32
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <handleSayHiRequest+0x88>)
 800095c:	f004 fad8 	bl	8004f10 <HAL_SPI_Transmit>
}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	@ 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000006 	.word	0x20000006
 800096c:	0800a68c 	.word	0x0800a68c
 8000970:	20000084 	.word	0x20000084

08000974 <handleUARTDataRequest>:

static void handleUARTDataRequest() {
 8000974:	b5b0      	push	{r4, r5, r7, lr}
 8000976:	b08e      	sub	sp, #56	@ 0x38
 8000978:	af00      	add	r7, sp, #0
	UartPacket packet = { 0 };
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	741a      	strb	r2, [r3, #16]
	uint32_t msg_count = osMessageQueueGetCount(uartQueueHandle);
 800098a:	4b32      	ldr	r3, [pc, #200]	@ (8000a54 <handleUARTDataRequest+0xe0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f006 fbf4 	bl	800717c <osMessageQueueGetCount>
 8000994:	6378      	str	r0, [r7, #52]	@ 0x34
	
	// If no messages, return immediately with empty packet
	if (msg_count == 0) {
 8000996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000998:	2b00      	cmp	r3, #0
 800099a:	d119      	bne.n	80009d0 <handleUARTDataRequest+0x5c>
		Packet p = { .header = { .targetAddr = 0, .srcAddr = myAddr, .packetSize =
 800099c:	463b      	mov	r3, r7
 800099e:	2220      	movs	r2, #32
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f009 fd84 	bl	800a4b0 <memset>
 80009a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a58 <handleUARTDataRequest+0xe4>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	707b      	strb	r3, [r7, #1]
 80009ae:	2318      	movs	r3, #24
 80009b0:	70bb      	strb	r3, [r7, #2]
 80009b2:	2305      	movs	r3, #5
 80009b4:	713b      	strb	r3, [r7, #4]
		UART_WHOLEPACK_SIZE, .packetType = PACKET_TYPE_REQUEST_DATA, }, .data = { 0 } };
		p.requestDataPack.requestDataType = RQP_TYPE_UART_DATA;
 80009b6:	2302      	movs	r3, #2
 80009b8:	717b      	strb	r3, [r7, #5]
		p.requestDataPack.data[0] = 0xff; // Indicate no data
 80009ba:	23ff      	movs	r3, #255	@ 0xff
 80009bc:	71fb      	strb	r3, [r7, #7]
		p.requestDataPack.dataSize = UART_PACKET_SIZE;
 80009be:	2311      	movs	r3, #17
 80009c0:	71bb      	strb	r3, [r7, #6]
		
		HAL_SPI_Transmit(&slave, (uint8_t*) &p, PACKET_MAX_SIZE, 100);
 80009c2:	4639      	mov	r1, r7
 80009c4:	2364      	movs	r3, #100	@ 0x64
 80009c6:	2220      	movs	r2, #32
 80009c8:	4824      	ldr	r0, [pc, #144]	@ (8000a5c <handleUARTDataRequest+0xe8>)
 80009ca:	f004 faa1 	bl	8004f10 <HAL_SPI_Transmit>
 80009ce:	e03d      	b.n	8000a4c <handleUARTDataRequest+0xd8>
		return;
	}
	
	// Process message from queue
	if (osMessageQueueGet(uartQueueHandle, (void*)&packet, NULL, 0) == osOK) {
 80009d0:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <handleUARTDataRequest+0xe0>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	f107 0120 	add.w	r1, r7, #32
 80009d8:	2300      	movs	r3, #0
 80009da:	2200      	movs	r2, #0
 80009dc:	f006 fb70 	bl	80070c0 <osMessageQueueGet>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d132      	bne.n	8000a4c <handleUARTDataRequest+0xd8>
		Packet p = { .header = { .targetAddr = 0, .srcAddr = myAddr, .packetSize =
 80009e6:	463b      	mov	r3, r7
 80009e8:	2220      	movs	r2, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f009 fd5f 	bl	800a4b0 <memset>
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <handleUARTDataRequest+0xe4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	707b      	strb	r3, [r7, #1]
 80009f8:	2318      	movs	r3, #24
 80009fa:	70bb      	strb	r3, [r7, #2]
 80009fc:	2305      	movs	r3, #5
 80009fe:	713b      	strb	r3, [r7, #4]
		UART_WHOLEPACK_SIZE, .packetType = PACKET_TYPE_REQUEST_DATA, }, .data = { 0 } };
		p.requestDataPack.requestDataType = RQP_TYPE_UART_DATA;
 8000a00:	2302      	movs	r3, #2
 8000a02:	717b      	strb	r3, [r7, #5]
		
		// Copy UART data to packet
		memcpy(p.requestDataPack.data, &packet, UART_PACKET_SIZE);
 8000a04:	1dfd      	adds	r5, r7, #7
 8000a06:	f107 0420 	add.w	r4, r7, #32
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	7823      	ldrb	r3, [r4, #0]
 8000a16:	742b      	strb	r3, [r5, #16]
		p.requestDataPack.dataSize = UART_PACKET_SIZE;
 8000a18:	2311      	movs	r3, #17
 8000a1a:	71bb      	strb	r3, [r7, #6]
		
		// Calculate CRC for header
		p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 8000a1c:	793b      	ldrb	r3, [r7, #4]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	783b      	ldrb	r3, [r7, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	0049      	lsls	r1, r1, #1
 8000a28:	440b      	add	r3, r1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	787b      	ldrb	r3, [r7, #1]
 8000a32:	4619      	mov	r1, r3
 8000a34:	0089      	lsls	r1, r1, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	70fb      	strb	r3, [r7, #3]
		
		// Transmit with higher timeout to ensure completion
		HAL_SPI_Transmit(&slave, (uint8_t*) &p, PACKET_MAX_SIZE, 200);
 8000a40:	4639      	mov	r1, r7
 8000a42:	23c8      	movs	r3, #200	@ 0xc8
 8000a44:	2220      	movs	r2, #32
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <handleUARTDataRequest+0xe8>)
 8000a48:	f004 fa62 	bl	8004f10 <HAL_SPI_Transmit>
	}
}
 8000a4c:	3738      	adds	r7, #56	@ 0x38
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bdb0      	pop	{r4, r5, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000978 	.word	0x20000978
 8000a58:	20000006 	.word	0x20000006
 8000a5c:	20000084 	.word	0x20000084

08000a60 <detect_downstream>:

static bool detect_downstream(Packet *response, uint8_t prevNodes) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	// Create identification packet
	Packet ident = { 
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2220      	movs	r2, #32
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f009 fd1b 	bl	800a4b0 <memset>
 8000a7a:	23ff      	movs	r3, #255	@ 0xff
 8000a7c:	743b      	strb	r3, [r7, #16]
 8000a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8000bf0 <detect_downstream+0x190>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	747b      	strb	r3, [r7, #17]
 8000a84:	2307      	movs	r3, #7
 8000a86:	74bb      	strb	r3, [r7, #18]
 8000a88:	2302      	movs	r3, #2
 8000a8a:	753b      	strb	r3, [r7, #20]
			.srcAddr = myAddr 
		} 
	};

	// Calculate CRC for header
	ident.header.crc = ident.header.packetType * 2 + 
 8000a8c:	7d3b      	ldrb	r3, [r7, #20]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	b2da      	uxtb	r2, r3
	                   ident.header.targetAddr * 3 + 
 8000a92:	7c3b      	ldrb	r3, [r7, #16]
	ident.header.crc = ident.header.packetType * 2 + 
 8000a94:	4619      	mov	r1, r3
 8000a96:	0049      	lsls	r1, r1, #1
 8000a98:	440b      	add	r3, r1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b2da      	uxtb	r2, r3
	                   ident.header.srcAddr * 5;
 8000aa0:	7c7b      	ldrb	r3, [r7, #17]
	                   ident.header.targetAddr * 3 + 
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	0089      	lsls	r1, r1, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4413      	add	r3, r2
 8000aac:	b2db      	uxtb	r3, r3
	ident.header.crc = ident.header.packetType * 2 + 
 8000aae:	74fb      	strb	r3, [r7, #19]
	
	// Set identification packet data
	ident.identifyPack.identifiedDevices = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	757b      	strb	r3, [r7, #21]
	ident.identifyPack.searchDepth = prevNodes > 0 ? prevNodes - 1 : 0;
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <detect_downstream+0x62>
 8000aba:	78fb      	ldrb	r3, [r7, #3]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	e000      	b.n	8000ac4 <detect_downstream+0x64>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	75bb      	strb	r3, [r7, #22]

	// Start byte
	uint8_t byte = PACKET_START_BYTE;
 8000ac6:	23aa      	movs	r3, #170	@ 0xaa
 8000ac8:	73fb      	strb	r3, [r7, #15]

	// First transmission - send start byte and identification packet
	SPI2_NSS_LOW();
 8000aca:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf4 <detect_downstream+0x194>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a4a      	ldr	r2, [pc, #296]	@ (8000bf8 <detect_downstream+0x198>)
 8000ad0:	8811      	ldrh	r1, [r2, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fcc7 	bl	8004468 <HAL_GPIO_WritePin>
	HAL_Delay(2); // Slightly longer delay to ensure stable signal
 8000ada:	2002      	movs	r0, #2
 8000adc:	f002 f9bc 	bl	8002e58 <HAL_Delay>
	
	// Send start byte
	if (HAL_SPI_Transmit(&master, &byte, 1, 100) != HAL_OK) {
 8000ae0:	f107 010f 	add.w	r1, r7, #15
 8000ae4:	2364      	movs	r3, #100	@ 0x64
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4844      	ldr	r0, [pc, #272]	@ (8000bfc <detect_downstream+0x19c>)
 8000aea:	f004 fa11 	bl	8004f10 <HAL_SPI_Transmit>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d009      	beq.n	8000b08 <detect_downstream+0xa8>
		SPI2_NSS_HIGH();
 8000af4:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf4 <detect_downstream+0x194>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a3f      	ldr	r2, [pc, #252]	@ (8000bf8 <detect_downstream+0x198>)
 8000afa:	8811      	ldrh	r1, [r2, #0]
 8000afc:	2201      	movs	r2, #1
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fcb2 	bl	8004468 <HAL_GPIO_WritePin>
		return false; // Abort if transmission fails
 8000b04:	2300      	movs	r3, #0
 8000b06:	e06f      	b.n	8000be8 <detect_downstream+0x188>
	}
	
	// Send identification packet
	if (HAL_SPI_Transmit(&master, (uint8_t*)&ident, PACKET_MAX_SIZE, 200) != HAL_OK) {
 8000b08:	f107 0110 	add.w	r1, r7, #16
 8000b0c:	23c8      	movs	r3, #200	@ 0xc8
 8000b0e:	2220      	movs	r2, #32
 8000b10:	483a      	ldr	r0, [pc, #232]	@ (8000bfc <detect_downstream+0x19c>)
 8000b12:	f004 f9fd 	bl	8004f10 <HAL_SPI_Transmit>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d009      	beq.n	8000b30 <detect_downstream+0xd0>
		SPI2_NSS_HIGH();
 8000b1c:	4b35      	ldr	r3, [pc, #212]	@ (8000bf4 <detect_downstream+0x194>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a35      	ldr	r2, [pc, #212]	@ (8000bf8 <detect_downstream+0x198>)
 8000b22:	8811      	ldrh	r1, [r2, #0]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fc9e 	bl	8004468 <HAL_GPIO_WritePin>
		return false; // Abort if transmission fails
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e05b      	b.n	8000be8 <detect_downstream+0x188>
	}
	
	// End first transmission
	SPI2_NSS_HIGH();
 8000b30:	4b30      	ldr	r3, [pc, #192]	@ (8000bf4 <detect_downstream+0x194>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a30      	ldr	r2, [pc, #192]	@ (8000bf8 <detect_downstream+0x198>)
 8000b36:	8811      	ldrh	r1, [r2, #0]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fc94 	bl	8004468 <HAL_GPIO_WritePin>

	// Wait for downstream nodes to process the packet
	// Use a longer wait time for more reliability
	uint32_t wait_time = getWaitTime(prevNodes) + 50;
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fe34 	bl	80007b0 <getWaitTime>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	3332      	adds	r3, #50	@ 0x32
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
	osDelay(wait_time);
 8000b4e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000b50:	f006 f831 	bl	8006bb6 <osDelay>
	
	// Second transmission - receive response
	SPI2_NSS_LOW();
 8000b54:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <detect_downstream+0x194>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a27      	ldr	r2, [pc, #156]	@ (8000bf8 <detect_downstream+0x198>)
 8000b5a:	8811      	ldrh	r1, [r2, #0]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fc82 	bl	8004468 <HAL_GPIO_WritePin>
	HAL_Delay(2); // Slightly longer delay to ensure stable signal
 8000b64:	2002      	movs	r0, #2
 8000b66:	f002 f977 	bl	8002e58 <HAL_Delay>
	
	// Clear response buffer
	memset(response, 0, sizeof(Packet));
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f009 fc9e 	bl	800a4b0 <memset>
	
	// Receive response with longer timeout
	HAL_StatusTypeDef status = HAL_SPI_Receive(&master, (uint8_t*)response, 
 8000b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2220      	movs	r2, #32
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	481f      	ldr	r0, [pc, #124]	@ (8000bfc <detect_downstream+0x19c>)
 8000b7e:	f004 fb0b 	bl	8005198 <HAL_SPI_Receive>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	                                           PACKET_MAX_SIZE, wait_time * 2);
	
	// End second transmission
	SPI2_NSS_HIGH();
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <detect_downstream+0x194>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf8 <detect_downstream+0x198>)
 8000b8e:	8811      	ldrh	r1, [r2, #0]
 8000b90:	2201      	movs	r2, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fc68 	bl	8004468 <HAL_GPIO_WritePin>

	// Check if we received a valid acknowledgment
	if (status == HAL_OK && response->header.packetType == PACKET_TYPE_IDENTIFY_ACK) {
 8000b98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d122      	bne.n	8000be6 <detect_downstream+0x186>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	791b      	ldrb	r3, [r3, #4]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d11e      	bne.n	8000be6 <detect_downstream+0x186>
		// Validate CRC
		uint8_t crc = response->header.packetType * 2 + 
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	b2da      	uxtb	r2, r3
		              response->header.targetAddr * 3 + 
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
		uint8_t crc = response->header.packetType * 2 + 
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	0049      	lsls	r1, r1, #1
 8000bb8:	440b      	add	r3, r1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b2da      	uxtb	r2, r3
		              response->header.srcAddr * 5;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	785b      	ldrb	r3, [r3, #1]
		              response->header.targetAddr * 3 + 
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	0089      	lsls	r1, r1, #2
 8000bc8:	440b      	add	r3, r1
 8000bca:	b2db      	uxtb	r3, r3
		uint8_t crc = response->header.packetType * 2 + 
 8000bcc:	4413      	add	r3, r2
 8000bce:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		              
		return (crc == response->header.crc);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	78db      	ldrb	r3, [r3, #3]
 8000bd6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	bf0c      	ite	eq
 8000bde:	2301      	moveq	r3, #1
 8000be0:	2300      	movne	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	e000      	b.n	8000be8 <detect_downstream+0x188>
	}
	
	return false;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3738      	adds	r7, #56	@ 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000006 	.word	0x20000006
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000004 	.word	0x20000004
 8000bfc:	200000dc 	.word	0x200000dc

08000c00 <BusNode_Init>:

void BusNode_Init(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	myAddr = 0xFF; // Unassigned
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <BusNode_Init+0x34>)
 8000c06:	22ff      	movs	r2, #255	@ 0xff
 8000c08:	701a      	strb	r2, [r3, #0]
	downstreamDetected = false;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <BusNode_Init+0x38>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]

	master = hspi2;
 8000c10:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <BusNode_Init+0x3c>)
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <BusNode_Init+0x40>)
 8000c14:	4610      	mov	r0, r2
 8000c16:	4619      	mov	r1, r3
 8000c18:	2358      	movs	r3, #88	@ 0x58
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f009 fcd2 	bl	800a5c4 <memcpy>
	slave = hspi1;
 8000c20:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <BusNode_Init+0x44>)
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <BusNode_Init+0x48>)
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	2358      	movs	r3, #88	@ 0x58
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f009 fcca 	bl	800a5c4 <memcpy>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000006 	.word	0x20000006
 8000c38:	20000134 	.word	0x20000134
 8000c3c:	200000dc 	.word	0x200000dc
 8000c40:	200002c4 	.word	0x200002c4
 8000c44:	20000084 	.word	0x20000084
 8000c48:	2000026c 	.word	0x2000026c

08000c4c <forward_packet>:

static void forward_packet(const Packet *pkt) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	@ 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	// Buffer for response
	Packet response = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	2220      	movs	r2, #32
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f009 fc27 	bl	800a4b0 <memset>
	
	// Start byte
	uint8_t byte = PACKET_START_BYTE;
 8000c62:	23aa      	movs	r3, #170	@ 0xaa
 8000c64:	73fb      	strb	r3, [r7, #15]
	
	// First transmission - send start byte and packet
	SPI2_NSS_LOW();
 8000c66:	4b39      	ldr	r3, [pc, #228]	@ (8000d4c <forward_packet+0x100>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a39      	ldr	r2, [pc, #228]	@ (8000d50 <forward_packet+0x104>)
 8000c6c:	8811      	ldrh	r1, [r2, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fbf9 	bl	8004468 <HAL_GPIO_WritePin>
	HAL_Delay(2); // Slightly longer delay to ensure stable signal
 8000c76:	2002      	movs	r0, #2
 8000c78:	f002 f8ee 	bl	8002e58 <HAL_Delay>
	
	// Send start byte
	if (HAL_SPI_Transmit(&master, &byte, 1, 100) != HAL_OK) {
 8000c7c:	f107 010f 	add.w	r1, r7, #15
 8000c80:	2364      	movs	r3, #100	@ 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	4833      	ldr	r0, [pc, #204]	@ (8000d54 <forward_packet+0x108>)
 8000c86:	f004 f943 	bl	8004f10 <HAL_SPI_Transmit>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d008      	beq.n	8000ca2 <forward_packet+0x56>
		SPI2_NSS_HIGH();
 8000c90:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <forward_packet+0x100>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a2e      	ldr	r2, [pc, #184]	@ (8000d50 <forward_packet+0x104>)
 8000c96:	8811      	ldrh	r1, [r2, #0]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fbe4 	bl	8004468 <HAL_GPIO_WritePin>
		return; // Abort if transmission fails
 8000ca0:	e051      	b.n	8000d46 <forward_packet+0xfa>
	}
	
	// Send packet
	if (HAL_SPI_Transmit(&master, (uint8_t*)pkt, PACKET_MAX_SIZE, 200) != HAL_OK) {
 8000ca2:	23c8      	movs	r3, #200	@ 0xc8
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	482a      	ldr	r0, [pc, #168]	@ (8000d54 <forward_packet+0x108>)
 8000caa:	f004 f931 	bl	8004f10 <HAL_SPI_Transmit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d008      	beq.n	8000cc6 <forward_packet+0x7a>
		SPI2_NSS_HIGH();
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <forward_packet+0x100>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a25      	ldr	r2, [pc, #148]	@ (8000d50 <forward_packet+0x104>)
 8000cba:	8811      	ldrh	r1, [r2, #0]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 fbd2 	bl	8004468 <HAL_GPIO_WritePin>
		return; // Abort if transmission fails
 8000cc4:	e03f      	b.n	8000d46 <forward_packet+0xfa>
	}
	
	// End first transmission
	SPI2_NSS_HIGH();
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <forward_packet+0x100>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <forward_packet+0x104>)
 8000ccc:	8811      	ldrh	r1, [r2, #0]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f003 fbc9 	bl	8004468 <HAL_GPIO_WritePin>
	
	// Small delay between transmissions
	HAL_Delay(5);
 8000cd6:	2005      	movs	r0, #5
 8000cd8:	f002 f8be 	bl	8002e58 <HAL_Delay>
	
	// Second transmission - receive response
	SPI2_NSS_LOW();
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <forward_packet+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <forward_packet+0x104>)
 8000ce2:	8811      	ldrh	r1, [r2, #0]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fbbe 	bl	8004468 <HAL_GPIO_WritePin>
	HAL_Delay(2); // Slightly longer delay to ensure stable signal
 8000cec:	2002      	movs	r0, #2
 8000cee:	f002 f8b3 	bl	8002e58 <HAL_Delay>
	
	// Receive response with longer timeout
	HAL_SPI_Receive(&master, (uint8_t*)&response, PACKET_MAX_SIZE, 300);
 8000cf2:	f107 0110 	add.w	r1, r7, #16
 8000cf6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	4815      	ldr	r0, [pc, #84]	@ (8000d54 <forward_packet+0x108>)
 8000cfe:	f004 fa4b 	bl	8005198 <HAL_SPI_Receive>
	
	// End second transmission
	SPI2_NSS_HIGH();
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <forward_packet+0x100>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <forward_packet+0x104>)
 8000d08:	8811      	ldrh	r1, [r2, #0]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fbab 	bl	8004468 <HAL_GPIO_WritePin>
	
	// Calculate CRC for response header
	response.header.crc = response.header.packetType * 2 + 
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	b2da      	uxtb	r2, r3
	                      response.header.targetAddr * 3 + 
 8000d18:	7c3b      	ldrb	r3, [r7, #16]
	response.header.crc = response.header.packetType * 2 + 
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	0049      	lsls	r1, r1, #1
 8000d1e:	440b      	add	r3, r1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	b2da      	uxtb	r2, r3
	                      response.header.srcAddr * 5;
 8000d26:	7c7b      	ldrb	r3, [r7, #17]
	                      response.header.targetAddr * 3 + 
 8000d28:	4619      	mov	r1, r3
 8000d2a:	0089      	lsls	r1, r1, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4413      	add	r3, r2
 8000d32:	b2db      	uxtb	r3, r3
	response.header.crc = response.header.packetType * 2 + 
 8000d34:	74fb      	strb	r3, [r7, #19]
	
	// Forward response back to the slave
	HAL_SPI_Transmit(&slave, (uint8_t*)&response, PACKET_MAX_SIZE, 300);
 8000d36:	f107 0110 	add.w	r1, r7, #16
 8000d3a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000d3e:	2220      	movs	r2, #32
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <forward_packet+0x10c>)
 8000d42:	f004 f8e5 	bl	8004f10 <HAL_SPI_Transmit>
}
 8000d46:	3730      	adds	r7, #48	@ 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000004 	.word	0x20000004
 8000d54:	200000dc 	.word	0x200000dc
 8000d58:	20000084 	.word	0x20000084

08000d5c <BusNode_RunLoop>:
    	spi_finished = 1;
    	osThreadFlagsSet(logTaskHandle, 0x0001);
    }
}

void BusNode_RunLoop(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b09c      	sub	sp, #112	@ 0x70
 8000d60:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	static uint32_t last_uart_check = 0;
	uint32_t current_tick = osKernelGetTickCount();
 8000d68:	f005 fe7e 	bl	8006a68 <osKernelGetTickCount>
 8000d6c:	66f8      	str	r0, [r7, #108]	@ 0x6c
	
	// Check if there's UART data to process every 5ms
	// This ensures we don't miss UART data while waiting for SPI commands
	if (current_tick - last_uart_check >= 5) {
 8000d6e:	4b9a      	ldr	r3, [pc, #616]	@ (8000fd8 <BusNode_RunLoop+0x27c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d90c      	bls.n	8000d94 <BusNode_RunLoop+0x38>
		last_uart_check = current_tick;
 8000d7a:	4a97      	ldr	r2, [pc, #604]	@ (8000fd8 <BusNode_RunLoop+0x27c>)
 8000d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d7e:	6013      	str	r3, [r2, #0]
		
		// If there's data in the UART queue, process it immediately
		if (osMessageQueueGetCount(uartQueueHandle) > 0) {
 8000d80:	4b96      	ldr	r3, [pc, #600]	@ (8000fdc <BusNode_RunLoop+0x280>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f006 f9f9 	bl	800717c <osMessageQueueGetCount>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <BusNode_RunLoop+0x38>
			handleUARTDataRequest();
 8000d90:	f7ff fdf0 	bl	8000974 <handleUARTDataRequest>
		}
	}

	// Non-blocking check for start byte
	if (HAL_SPI_Receive(&slave, &byte, 1, 10) != HAL_OK || byte != PACKET_START_BYTE) {
 8000d94:	f107 0166 	add.w	r1, r7, #102	@ 0x66
 8000d98:	230a      	movs	r3, #10
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4890      	ldr	r0, [pc, #576]	@ (8000fe0 <BusNode_RunLoop+0x284>)
 8000d9e:	f004 f9fb 	bl	8005198 <HAL_SPI_Receive>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f040 810d 	bne.w	8000fc4 <BusNode_RunLoop+0x268>
 8000daa:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000dae:	2baa      	cmp	r3, #170	@ 0xaa
 8000db0:	f040 8108 	bne.w	8000fc4 <BusNode_RunLoop+0x268>
		return; // No valid start byte, return and try again next time
	}
	
	// We received a start byte, now get the full packet
	Packet rx = {0};
 8000db4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000db8:	2220      	movs	r2, #32
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f009 fb77 	bl	800a4b0 <memset>
	
	if (HAL_SPI_Receive(&slave, (uint8_t*)&rx, sizeof(Packet), 200) != HAL_OK) {
 8000dc2:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000dc6:	23c8      	movs	r3, #200	@ 0xc8
 8000dc8:	2220      	movs	r2, #32
 8000dca:	4885      	ldr	r0, [pc, #532]	@ (8000fe0 <BusNode_RunLoop+0x284>)
 8000dcc:	f004 f9e4 	bl	8005198 <HAL_SPI_Receive>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 80f8 	bne.w	8000fc8 <BusNode_RunLoop+0x26c>
		return;
	}

	PacketHeader *h = &rx.header;
 8000dd8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ddc:	66bb      	str	r3, [r7, #104]	@ 0x68

	// Validate packet
	if (h->packetSize < PACKET_HEADER_SIZE || h->packetSize > PACKET_MAX_SIZE) {
 8000dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000de0:	789b      	ldrb	r3, [r3, #2]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	f240 80f2 	bls.w	8000fcc <BusNode_RunLoop+0x270>
 8000de8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000dea:	789b      	ldrb	r3, [r3, #2]
 8000dec:	2b20      	cmp	r3, #32
 8000dee:	f200 80ed 	bhi.w	8000fcc <BusNode_RunLoop+0x270>
		return;
	}
	
	uint8_t crc = h->packetType * 2 + h->targetAddr * 3 + h->srcAddr * 5;
 8000df2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000df4:	791b      	ldrb	r3, [r3, #4]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	0049      	lsls	r1, r1, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4413      	add	r3, r2
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	0089      	lsls	r1, r1, #2
 8000e12:	440b      	add	r3, r1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (crc != h->crc) {
 8000e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e1e:	78db      	ldrb	r3, [r3, #3]
 8000e20:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f040 80d3 	bne.w	8000fd0 <BusNode_RunLoop+0x274>
		return;
	}

	// Handle ASSIGN_ADDR from master (only when unassigned)
	if (h->packetType == PACKET_TYPE_ASSIGN_ADDR && myAddr == 0xFF) {
 8000e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e2c:	791b      	ldrb	r3, [r3, #4]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d108      	bne.n	8000e44 <BusNode_RunLoop+0xe8>
 8000e32:	4b6c      	ldr	r3, [pc, #432]	@ (8000fe4 <BusNode_RunLoop+0x288>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2bff      	cmp	r3, #255	@ 0xff
 8000e38:	d104      	bne.n	8000e44 <BusNode_RunLoop+0xe8>
		myAddr = rx.data[0]; // Assigned address from master
 8000e3a:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8000e3e:	4b69      	ldr	r3, [pc, #420]	@ (8000fe4 <BusNode_RunLoop+0x288>)
 8000e40:	701a      	strb	r2, [r3, #0]
		return;
 8000e42:	e0c6      	b.n	8000fd2 <BusNode_RunLoop+0x276>
	}

	// Handle IDENTIFY query
	if (h->packetType == PACKET_TYPE_IDENTIFY && 
 8000e44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e46:	791b      	ldrb	r3, [r3, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d164      	bne.n	8000f16 <BusNode_RunLoop+0x1ba>
	    (h->targetAddr == myAddr || h->targetAddr == broadcast)) {
 8000e4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	4b64      	ldr	r3, [pc, #400]	@ (8000fe4 <BusNode_RunLoop+0x288>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
	if (h->packetType == PACKET_TYPE_IDENTIFY && 
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d004      	beq.n	8000e62 <BusNode_RunLoop+0x106>
	    (h->targetAddr == myAddr || h->targetAddr == broadcast)) {
 8000e58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	22ff      	movs	r2, #255	@ 0xff
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d159      	bne.n	8000f16 <BusNode_RunLoop+0x1ba>
		
		Packet response = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2220      	movs	r2, #32
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f009 fb21 	bl	800a4b0 <memset>
		Packet ack = {
 8000e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e72:	2220      	movs	r2, #32
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f009 fb1a 	bl	800a4b0 <memset>
			.header = {
				.targetAddr = h->srcAddr,
 8000e7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e7e:	785b      	ldrb	r3, [r3, #1]
		Packet ack = {
 8000e80:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000e84:	4b57      	ldr	r3, [pc, #348]	@ (8000fe4 <BusNode_RunLoop+0x288>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e92:	2303      	movs	r3, #3
 8000e94:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
				.packetType = PACKET_TYPE_IDENTIFY_ACK
			}
		};
		
		// Calculate CRC for header
		ack.header.crc = ack.header.packetType * 2 + ack.header.targetAddr * 3 + ack.header.srcAddr * 5;
 8000e98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	0049      	lsls	r1, r1, #1
 8000ea8:	440b      	add	r3, r1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	0089      	lsls	r1, r1, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		ack.identifyPack.identifiedDevices = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		ack.identifyPack.searchDepth = rx.identifyPack.searchDepth - 1;
 8000eca:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

		downstreamDetected = detect_downstream(&response, rx.identifyPack.searchDepth - 1);
 8000ed6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fdbc 	bl	8000a60 <detect_downstream>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe8 <BusNode_RunLoop+0x28c>)
 8000eee:	701a      	strb	r2, [r3, #0]
		if (downstreamDetected) {
 8000ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe8 <BusNode_RunLoop+0x28c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <BusNode_RunLoop+0x1aa>
			ack.identifyPack.identifiedDevices += response.identifyPack.identifiedDevices;
 8000ef8:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8000efc:	7a7b      	ldrb	r3, [r7, #9]
 8000efe:	4413      	add	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		}

		HAL_SPI_Transmit(&slave, (uint8_t*)&ack, PACKET_MAX_SIZE, 200);
 8000f06:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000f0a:	23c8      	movs	r3, #200	@ 0xc8
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	4834      	ldr	r0, [pc, #208]	@ (8000fe0 <BusNode_RunLoop+0x284>)
 8000f10:	f003 fffe 	bl	8004f10 <HAL_SPI_Transmit>
 8000f14:	e05d      	b.n	8000fd2 <BusNode_RunLoop+0x276>
		return;
	}

	// If it's for us, handle it here
	if (h->targetAddr == myAddr && myAddr != broadcast && 
 8000f16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	4b32      	ldr	r3, [pc, #200]	@ (8000fe4 <BusNode_RunLoop+0x288>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d140      	bne.n	8000fa4 <BusNode_RunLoop+0x248>
 8000f22:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <BusNode_RunLoop+0x288>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	22ff      	movs	r2, #255	@ 0xff
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d03b      	beq.n	8000fa4 <BusNode_RunLoop+0x248>
	    h->packetType == PACKET_TYPE_REQUEST_DATA) {
 8000f2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f2e:	791b      	ldrb	r3, [r3, #4]
	if (h->targetAddr == myAddr && myAddr != broadcast && 
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d137      	bne.n	8000fa4 <BusNode_RunLoop+0x248>
		
		switch (rx.requestDataPack.requestDataType) {
 8000f34:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b10      	cmp	r3, #16
 8000f3c:	d830      	bhi.n	8000fa0 <BusNode_RunLoop+0x244>
 8000f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f44 <BusNode_RunLoop+0x1e8>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f8f 	.word	0x08000f8f
 8000f48:	08000f95 	.word	0x08000f95
 8000f4c:	08000f89 	.word	0x08000f89
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	08000fa1 	.word	0x08000fa1
 8000f58:	08000fa1 	.word	0x08000fa1
 8000f5c:	08000fa1 	.word	0x08000fa1
 8000f60:	08000fa1 	.word	0x08000fa1
 8000f64:	08000fa1 	.word	0x08000fa1
 8000f68:	08000fa1 	.word	0x08000fa1
 8000f6c:	08000fa1 	.word	0x08000fa1
 8000f70:	08000fa1 	.word	0x08000fa1
 8000f74:	08000fa1 	.word	0x08000fa1
 8000f78:	08000fa1 	.word	0x08000fa1
 8000f7c:	08000fa1 	.word	0x08000fa1
 8000f80:	08000fa1 	.word	0x08000fa1
 8000f84:	08000f9b 	.word	0x08000f9b
		case RQP_TYPE_SAY_HI:
			handleSayHiRequest();
 8000f88:	f7ff fcae 	bl	80008e8 <handleSayHiRequest>
			break;
 8000f8c:	e009      	b.n	8000fa2 <BusNode_RunLoop+0x246>

		case RQP_TYPE_ADC_READINGS:
			handleADCDataRequest();
 8000f8e:	f7ff fc1f 	bl	80007d0 <handleADCDataRequest>
			break;
 8000f92:	e006      	b.n	8000fa2 <BusNode_RunLoop+0x246>

		case RQP_TYPE_UART_DATA:
			handleUARTDataRequest();
 8000f94:	f7ff fcee 	bl	8000974 <handleUARTDataRequest>
			break;
 8000f98:	e003      	b.n	8000fa2 <BusNode_RunLoop+0x246>

		case RQP_TYPE_EXT_ADC_READINGS:
			handleExternalADCDataRequest();
 8000f9a:	f7ff fc67 	bl	800086c <handleExternalADCDataRequest>
			break;
 8000f9e:	e000      	b.n	8000fa2 <BusNode_RunLoop+0x246>

		default:
			break;
 8000fa0:	bf00      	nop
		}
		return;
 8000fa2:	e016      	b.n	8000fd2 <BusNode_RunLoop+0x276>
	} else if (downstreamDetected && myAddr != h->targetAddr) {
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <BusNode_RunLoop+0x28c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d012      	beq.n	8000fd2 <BusNode_RunLoop+0x276>
 8000fac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <BusNode_RunLoop+0x288>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d00c      	beq.n	8000fd2 <BusNode_RunLoop+0x276>
		forward_packet(&rx);
 8000fb8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe45 	bl	8000c4c <forward_packet>
 8000fc2:	e006      	b.n	8000fd2 <BusNode_RunLoop+0x276>
		return; // No valid start byte, return and try again next time
 8000fc4:	bf00      	nop
 8000fc6:	e004      	b.n	8000fd2 <BusNode_RunLoop+0x276>
		return;
 8000fc8:	bf00      	nop
 8000fca:	e002      	b.n	8000fd2 <BusNode_RunLoop+0x276>
		return;
 8000fcc:	bf00      	nop
 8000fce:	e000      	b.n	8000fd2 <BusNode_RunLoop+0x276>
		return;
 8000fd0:	bf00      	nop
	}
}
 8000fd2:	3770      	adds	r7, #112	@ 0x70
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000138 	.word	0x20000138
 8000fdc:	20000978 	.word	0x20000978
 8000fe0:	20000084 	.word	0x20000084
 8000fe4:	20000006 	.word	0x20000006
 8000fe8:	20000134 	.word	0x20000134

08000fec <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart7;
extern UART_HandleTypeDef huart8;

extern osMessageQueueId_t uartQueueHandle;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < UART_COUNT; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e03d      	b.n	8001076 <HAL_UART_RxCpltCallback+0x8a>
		UART_HandleTypeDef *current = NULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
		switch (i) {
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b07      	cmp	r3, #7
 8001002:	d82b      	bhi.n	800105c <HAL_UART_RxCpltCallback+0x70>
 8001004:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <HAL_UART_RxCpltCallback+0x20>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	0800102d 	.word	0x0800102d
 8001010:	08001033 	.word	0x08001033
 8001014:	08001039 	.word	0x08001039
 8001018:	0800103f 	.word	0x0800103f
 800101c:	08001045 	.word	0x08001045
 8001020:	0800104b 	.word	0x0800104b
 8001024:	08001051 	.word	0x08001051
 8001028:	08001057 	.word	0x08001057
		case 0:
			current = &huart1;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HAL_UART_RxCpltCallback+0xa0>)
 800102e:	60bb      	str	r3, [r7, #8]
			break;
 8001030:	e014      	b.n	800105c <HAL_UART_RxCpltCallback+0x70>
		case 1:
			current = &huart2;
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_UART_RxCpltCallback+0xa4>)
 8001034:	60bb      	str	r3, [r7, #8]
			break;
 8001036:	e011      	b.n	800105c <HAL_UART_RxCpltCallback+0x70>
		case 2:
			current = &huart3;
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <HAL_UART_RxCpltCallback+0xa8>)
 800103a:	60bb      	str	r3, [r7, #8]
			break;
 800103c:	e00e      	b.n	800105c <HAL_UART_RxCpltCallback+0x70>
		case 3:
			current = &huart4;
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <HAL_UART_RxCpltCallback+0xac>)
 8001040:	60bb      	str	r3, [r7, #8]
			break;
 8001042:	e00b      	b.n	800105c <HAL_UART_RxCpltCallback+0x70>
		case 4:
			current = &huart5;
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_UART_RxCpltCallback+0xb0>)
 8001046:	60bb      	str	r3, [r7, #8]
			break;
 8001048:	e008      	b.n	800105c <HAL_UART_RxCpltCallback+0x70>
		case 5:
			current = &huart6;
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_UART_RxCpltCallback+0xb4>)
 800104c:	60bb      	str	r3, [r7, #8]
			break;
 800104e:	e005      	b.n	800105c <HAL_UART_RxCpltCallback+0x70>
		case 6:
			current = &huart7;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_UART_RxCpltCallback+0xb8>)
 8001052:	60bb      	str	r3, [r7, #8]
			break;
 8001054:	e002      	b.n	800105c <HAL_UART_RxCpltCallback+0x70>
		case 7:
			current = &huart8;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_UART_RxCpltCallback+0xbc>)
 8001058:	60bb      	str	r3, [r7, #8]
			break;
 800105a:	bf00      	nop
		}

		if (huart == current) {
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	429a      	cmp	r2, r3
 8001062:	d105      	bne.n	8001070 <HAL_UART_RxCpltCallback+0x84>
			uart_dma_ready[i] = true;
 8001064:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <HAL_UART_RxCpltCallback+0xc0>)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
			break;
 800106e:	e006      	b.n	800107e <HAL_UART_RxCpltCallback+0x92>
	for (int i = 0; i < UART_COUNT; i++) {
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3301      	adds	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b07      	cmp	r3, #7
 800107a:	ddbe      	ble.n	8000ffa <HAL_UART_RxCpltCallback+0xe>
		}
	}
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000544 	.word	0x20000544
 8001090:	2000058c 	.word	0x2000058c
 8001094:	200005d4 	.word	0x200005d4
 8001098:	20000424 	.word	0x20000424
 800109c:	2000046c 	.word	0x2000046c
 80010a0:	2000061c 	.word	0x2000061c
 80010a4:	200004b4 	.word	0x200004b4
 80010a8:	200004fc 	.word	0x200004fc
 80010ac:	2000013c 	.word	0x2000013c

080010b0 <huartTaskEntry>:

void huartTaskEntry(void *arg) {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b092      	sub	sp, #72	@ 0x48
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	static uint8_t uart_rx_buffers[UART_COUNT][UART_DATA_SIZE];

	UART_HandleTypeDef *huarts[UART_COUNT] = { &huart1, &huart2, &huart3,
 80010b8:	4b37      	ldr	r3, [pc, #220]	@ (8001198 <huartTaskEntry+0xe8>)
 80010ba:	f107 041c 	add.w	r4, r7, #28
 80010be:	461d      	mov	r5, r3
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&huart4, &huart5, &huart6, &huart7, &huart8};

	for (int i = 0; i < UART_COUNT; i++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80010d0:	e010      	b.n	80010f4 <huartTaskEntry+0x44>
		HAL_UART_Receive_DMA(huarts[i], uart_rx_buffers[i], UART_DATA_SIZE);
 80010d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	3348      	adds	r3, #72	@ 0x48
 80010d8:	443b      	add	r3, r7
 80010da:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 80010de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4a2e      	ldr	r2, [pc, #184]	@ (800119c <huartTaskEntry+0xec>)
 80010e4:	4413      	add	r3, r2
 80010e6:	2210      	movs	r2, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	f004 ff45 	bl	8005f78 <HAL_UART_Receive_DMA>
	for (int i = 0; i < UART_COUNT; i++) {
 80010ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010f0:	3301      	adds	r3, #1
 80010f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80010f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	ddeb      	ble.n	80010d2 <huartTaskEntry+0x22>
	}

	// Start loop
	UartPacket packet;
	while (1) {
		bool data_processed = false;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		
		for (int i = 0; i < UART_COUNT; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001104:	e03a      	b.n	800117c <huartTaskEntry+0xcc>
			if (uart_dma_ready[i]) {
 8001106:	4a26      	ldr	r2, [pc, #152]	@ (80011a0 <huartTaskEntry+0xf0>)
 8001108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d030      	beq.n	8001176 <huartTaskEntry+0xc6>
				uart_dma_ready[i] = false;
 8001114:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <huartTaskEntry+0xf0>)
 8001116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001118:	4413      	add	r3, r2
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
				data_processed = true;
 800111e:	2301      	movs	r3, #1
 8001120:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

				packet.uart_id = i + 1;
 8001124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	723b      	strb	r3, [r7, #8]
				memcpy(packet.data, uart_rx_buffers[i], UART_DATA_SIZE);
 800112e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <huartTaskEntry+0xec>)
 8001134:	441a      	add	r2, r3
 8001136:	f107 0309 	add.w	r3, r7, #9
 800113a:	6814      	ldr	r4, [r2, #0]
 800113c:	6850      	ldr	r0, [r2, #4]
 800113e:	6891      	ldr	r1, [r2, #8]
 8001140:	68d2      	ldr	r2, [r2, #12]
 8001142:	601c      	str	r4, [r3, #0]
 8001144:	6058      	str	r0, [r3, #4]
 8001146:	6099      	str	r1, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
				
				// Use higher priority for message queue to ensure it's processed quickly
				osMessageQueuePut(uartQueueHandle, &packet, 0, 0);
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <huartTaskEntry+0xf4>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f107 0108 	add.w	r1, r7, #8
 8001152:	2300      	movs	r3, #0
 8001154:	2200      	movs	r2, #0
 8001156:	f005 ff53 	bl	8007000 <osMessageQueuePut>

				// Restart DMA immediately
				HAL_UART_Receive_DMA(huarts[i], uart_rx_buffers[i], UART_DATA_SIZE);
 800115a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	3348      	adds	r3, #72	@ 0x48
 8001160:	443b      	add	r3, r7
 8001162:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8001166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <huartTaskEntry+0xec>)
 800116c:	4413      	add	r3, r2
 800116e:	2210      	movs	r2, #16
 8001170:	4619      	mov	r1, r3
 8001172:	f004 ff01 	bl	8005f78 <HAL_UART_Receive_DMA>
		for (int i = 0; i < UART_COUNT; i++) {
 8001176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001178:	3301      	adds	r3, #1
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800117c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800117e:	2b07      	cmp	r3, #7
 8001180:	ddc1      	ble.n	8001106 <huartTaskEntry+0x56>
			}
		}

		// Use a shorter delay if no data was processed to be more responsive
		// but still yield to other tasks
		osDelay(data_processed ? 5 : 10);
 8001182:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <huartTaskEntry+0xde>
 800118a:	2305      	movs	r3, #5
 800118c:	e000      	b.n	8001190 <huartTaskEntry+0xe0>
 800118e:	230a      	movs	r3, #10
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fd10 	bl	8006bb6 <osDelay>
	while (1) {
 8001196:	e7b0      	b.n	80010fa <huartTaskEntry+0x4a>
 8001198:	0800a6ac 	.word	0x0800a6ac
 800119c:	20000144 	.word	0x20000144
 80011a0:	2000013c 	.word	0x2000013c
 80011a4:	20000978 	.word	0x20000978

080011a8 <HAL_ADC_ConvCpltCallback>:

uint16_t adcReadings[12] = { 0 };
uint16_t externalADCReadings[11] = { 0 };
volatile int isADCFinished = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	isADCFinished = 1;
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200009b4 	.word	0x200009b4

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011cc:	f001 fe02 	bl	8002dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d0:	f000 f88e 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d4:	f000 fca8 	bl	8001b28 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d8:	f000 fc38 	bl	8001a4c <MX_DMA_Init>
  MX_SPI1_Init();
 80011dc:	f000 f9e0 	bl	80015a0 <MX_SPI1_Init>
  MX_UART4_Init();
 80011e0:	f000 fae4 	bl	80017ac <MX_UART4_Init>
  MX_UART5_Init();
 80011e4:	f000 fb0c 	bl	8001800 <MX_UART5_Init>
  MX_UART7_Init();
 80011e8:	f000 fb34 	bl	8001854 <MX_UART7_Init>
  MX_UART8_Init();
 80011ec:	f000 fb5c 	bl	80018a8 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80011f0:	f000 fb84 	bl	80018fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011f4:	f000 fbac 	bl	8001950 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80011f8:	f000 fbd4 	bl	80019a4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80011fc:	f000 fbfc 	bl	80019f8 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001200:	f000 fa36 	bl	8001670 <MX_SPI3_Init>
  MX_SPI4_Init();
 8001204:	f000 fa66 	bl	80016d4 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001208:	f000 fa9a 	bl	8001740 <MX_SPI5_Init>
  MX_ADC1_Init();
 800120c:	f000 f8dc 	bl	80013c8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001210:	f000 f9f8 	bl	8001604 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001214:	f005 fbde 	bl	80069d4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of adcBufReadMutex */
  adcBufReadMutexHandle = osMutexNew(&adcBufReadMutex_attributes);
 8001218:	4820      	ldr	r0, [pc, #128]	@ (800129c <main+0xd4>)
 800121a:	f005 fce7 	bl	8006bec <osMutexNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <main+0xd8>)
 8001222:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of spi_rx */
  spi_rxHandle = osSemaphoreNew(1, 0, &spi_rx_attributes);
 8001224:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <main+0xdc>)
 8001226:	2100      	movs	r1, #0
 8001228:	2001      	movs	r0, #1
 800122a:	f005 fded 	bl	8006e08 <osSemaphoreNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a1d      	ldr	r2, [pc, #116]	@ (80012a8 <main+0xe0>)
 8001232:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (20, 17, &uartQueue_attributes);
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <main+0xe4>)
 8001236:	2111      	movs	r1, #17
 8001238:	2014      	movs	r0, #20
 800123a:	f005 fe6e 	bl	8006f1a <osMessageQueueNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <main+0xe8>)
 8001242:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <main+0xec>)
 8001246:	2100      	movs	r1, #0
 8001248:	481b      	ldr	r0, [pc, #108]	@ (80012b8 <main+0xf0>)
 800124a:	f005 fc22 	bl	8006a92 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <main+0xf4>)
 8001252:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(logTaskEntry, NULL, &logTask_attributes);
 8001254:	4a1a      	ldr	r2, [pc, #104]	@ (80012c0 <main+0xf8>)
 8001256:	2100      	movs	r1, #0
 8001258:	481a      	ldr	r0, [pc, #104]	@ (80012c4 <main+0xfc>)
 800125a:	f005 fc1a 	bl	8006a92 <osThreadNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <main+0x100>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of adcReadTask */
  adcReadTaskHandle = osThreadNew(adcReadTaskEntry, NULL, &adcReadTask_attributes);
 8001264:	4a19      	ldr	r2, [pc, #100]	@ (80012cc <main+0x104>)
 8001266:	2100      	movs	r1, #0
 8001268:	4819      	ldr	r0, [pc, #100]	@ (80012d0 <main+0x108>)
 800126a:	f005 fc12 	bl	8006a92 <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <main+0x10c>)
 8001272:	6013      	str	r3, [r2, #0]

  /* creation of huartTask */
  huartTaskHandle = osThreadNew(huartTaskEntry, NULL, &huartTask_attributes);
 8001274:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <main+0x110>)
 8001276:	2100      	movs	r1, #0
 8001278:	4818      	ldr	r0, [pc, #96]	@ (80012dc <main+0x114>)
 800127a:	f005 fc0a 	bl	8006a92 <osThreadNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <main+0x118>)
 8001282:	6013      	str	r3, [r2, #0]

  /* creation of adsReadTask */
  adsReadTaskHandle = osThreadNew(adsTaskEntry, NULL, &adsReadTask_attributes);
 8001284:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <main+0x11c>)
 8001286:	2100      	movs	r1, #0
 8001288:	4817      	ldr	r0, [pc, #92]	@ (80012e8 <main+0x120>)
 800128a:	f005 fc02 	bl	8006a92 <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a16      	ldr	r2, [pc, #88]	@ (80012ec <main+0x124>)
 8001292:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001294:	f005 fbc2 	bl	8006a1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <main+0xd0>
 800129c:	0800a818 	.word	0x0800a818
 80012a0:	2000097c 	.word	0x2000097c
 80012a4:	0800a828 	.word	0x0800a828
 80012a8:	20000980 	.word	0x20000980
 80012ac:	0800a800 	.word	0x0800a800
 80012b0:	20000978 	.word	0x20000978
 80012b4:	0800a74c 	.word	0x0800a74c
 80012b8:	08001d5d 	.word	0x08001d5d
 80012bc:	20000964 	.word	0x20000964
 80012c0:	0800a770 	.word	0x0800a770
 80012c4:	08001d71 	.word	0x08001d71
 80012c8:	20000968 	.word	0x20000968
 80012cc:	0800a794 	.word	0x0800a794
 80012d0:	08001d9d 	.word	0x08001d9d
 80012d4:	2000096c 	.word	0x2000096c
 80012d8:	0800a7b8 	.word	0x0800a7b8
 80012dc:	080010b1 	.word	0x080010b1
 80012e0:	20000970 	.word	0x20000970
 80012e4:	0800a7dc 	.word	0x0800a7dc
 80012e8:	08001e51 	.word	0x08001e51
 80012ec:	20000974 	.word	0x20000974

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b094      	sub	sp, #80	@ 0x50
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2230      	movs	r2, #48	@ 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f009 f8d6 	bl	800a4b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <SystemClock_Config+0xd0>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	4a28      	ldr	r2, [pc, #160]	@ (80013c0 <SystemClock_Config+0xd0>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001322:	6413      	str	r3, [r2, #64]	@ 0x40
 8001324:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <SystemClock_Config+0xd0>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <SystemClock_Config+0xd4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a22      	ldr	r2, [pc, #136]	@ (80013c4 <SystemClock_Config+0xd4>)
 800133a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <SystemClock_Config+0xd4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134c:	2301      	movs	r3, #1
 800134e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001350:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001356:	2302      	movs	r3, #2
 8001358:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001360:	230d      	movs	r3, #13
 8001362:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001364:	23a8      	movs	r3, #168	@ 0xa8
 8001366:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800136c:	2307      	movs	r3, #7
 800136e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f891 	bl	800449c <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001380:	f000 fdce 	bl	8001f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001390:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2105      	movs	r1, #5
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 faf2 	bl	800498c <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ae:	f000 fdb7 	bl	8001f20 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80013b2:	f003 fbd1 	bl	8004b58 <HAL_RCC_EnableCSS>
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	@ 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013da:	4b6e      	ldr	r3, [pc, #440]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80013dc:	4a6e      	ldr	r2, [pc, #440]	@ (8001598 <MX_ADC1_Init+0x1d0>)
 80013de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80013e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013ee:	4b69      	ldr	r3, [pc, #420]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013f4:	4b67      	ldr	r3, [pc, #412]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fa:	4b66      	ldr	r3, [pc, #408]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001402:	4b64      	ldr	r3, [pc, #400]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001408:	4b62      	ldr	r3, [pc, #392]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 800140a:	4a64      	ldr	r2, [pc, #400]	@ (800159c <MX_ADC1_Init+0x1d4>)
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140e:	4b61      	ldr	r3, [pc, #388]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001414:	4b5f      	ldr	r3, [pc, #380]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 8001416:	220c      	movs	r2, #12
 8001418:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800141a:	4b5e      	ldr	r3, [pc, #376]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001422:	4b5c      	ldr	r3, [pc, #368]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001428:	485a      	ldr	r0, [pc, #360]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 800142a:	f001 fd39 	bl	8002ea0 <HAL_ADC_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001434:	f000 fd74 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4852      	ldr	r0, [pc, #328]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 800144a:	f001 feef 	bl	800322c <HAL_ADC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001454:	f000 fd64 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001458:	2301      	movs	r3, #1
 800145a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	484b      	ldr	r0, [pc, #300]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 8001466:	f001 fee1 	bl	800322c <HAL_ADC_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001470:	f000 fd56 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001474:	2302      	movs	r3, #2
 8001476:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001478:	2303      	movs	r3, #3
 800147a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	4619      	mov	r1, r3
 8001480:	4844      	ldr	r0, [pc, #272]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 8001482:	f001 fed3 	bl	800322c <HAL_ADC_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800148c:	f000 fd48 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001490:	2303      	movs	r3, #3
 8001492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001494:	2304      	movs	r3, #4
 8001496:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	483d      	ldr	r0, [pc, #244]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 800149e:	f001 fec5 	bl	800322c <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80014a8:	f000 fd3a 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014ac:	2308      	movs	r3, #8
 80014ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80014b0:	2305      	movs	r3, #5
 80014b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	4619      	mov	r1, r3
 80014b8:	4836      	ldr	r0, [pc, #216]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80014ba:	f001 feb7 	bl	800322c <HAL_ADC_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80014c4:	f000 fd2c 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014c8:	2309      	movs	r3, #9
 80014ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80014cc:	2306      	movs	r3, #6
 80014ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	482f      	ldr	r0, [pc, #188]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80014d6:	f001 fea9 	bl	800322c <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80014e0:	f000 fd1e 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014e4:	230a      	movs	r3, #10
 80014e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80014e8:	2307      	movs	r3, #7
 80014ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	4828      	ldr	r0, [pc, #160]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 80014f2:	f001 fe9b 	bl	800322c <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80014fc:	f000 fd10 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001500:	230b      	movs	r3, #11
 8001502:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001504:	2308      	movs	r3, #8
 8001506:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	4821      	ldr	r0, [pc, #132]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 800150e:	f001 fe8d 	bl	800322c <HAL_ADC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001518:	f000 fd02 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800151c:	230c      	movs	r3, #12
 800151e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001520:	2309      	movs	r3, #9
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	481a      	ldr	r0, [pc, #104]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 800152a:	f001 fe7f 	bl	800322c <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001534:	f000 fcf4 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001538:	230d      	movs	r3, #13
 800153a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800153c:	230a      	movs	r3, #10
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 8001546:	f001 fe71 	bl	800322c <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001550:	f000 fce6 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001554:	230e      	movs	r3, #14
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001558:	230b      	movs	r3, #11
 800155a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 8001562:	f001 fe63 	bl	800322c <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800156c:	f000 fcd8 	bl	8001f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001570:	230f      	movs	r3, #15
 8001572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001574:	230c      	movs	r3, #12
 8001576:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	@ (8001594 <MX_ADC1_Init+0x1cc>)
 800157e:	f001 fe55 	bl	800322c <HAL_ADC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001588:	f000 fcca 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200001c4 	.word	0x200001c4
 8001598:	40012000 	.word	0x40012000
 800159c:	0f000001 	.word	0x0f000001

080015a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015a6:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <MX_SPI1_Init+0x60>)
 80015a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015e2:	220a      	movs	r2, #10
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_SPI1_Init+0x5c>)
 80015e8:	f003 fc09 	bl	8004dfe <HAL_SPI_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 80015f2:	f000 fc95 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000026c 	.word	0x2000026c
 8001600:	40013000 	.word	0x40013000

08001604 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <MX_SPI2_Init+0x64>)
 800160a:	4a18      	ldr	r2, [pc, #96]	@ (800166c <MX_SPI2_Init+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <MX_SPI2_Init+0x64>)
 8001610:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_SPI2_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <MX_SPI2_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_SPI2_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_SPI2_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_SPI2_Init+0x64>)
 8001630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001634:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_SPI2_Init+0x64>)
 8001638:	2220      	movs	r2, #32
 800163a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <MX_SPI2_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_SPI2_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <MX_SPI2_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_SPI2_Init+0x64>)
 8001650:	220a      	movs	r2, #10
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	@ (8001668 <MX_SPI2_Init+0x64>)
 8001656:	f003 fbd2 	bl	8004dfe <HAL_SPI_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001660:	f000 fc5e 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200002c4 	.word	0x200002c4
 800166c:	40003800 	.word	0x40003800

08001670 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <MX_SPI3_Init+0x5c>)
 8001676:	4a16      	ldr	r2, [pc, #88]	@ (80016d0 <MX_SPI3_Init+0x60>)
 8001678:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_SPI3_Init+0x5c>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <MX_SPI3_Init+0x5c>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_SPI3_Init+0x5c>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_SPI3_Init+0x5c>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_SPI3_Init+0x5c>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_SPI3_Init+0x5c>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_SPI3_Init+0x5c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_SPI3_Init+0x5c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <MX_SPI3_Init+0x5c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_SPI3_Init+0x5c>)
 80016b2:	220a      	movs	r2, #10
 80016b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_SPI3_Init+0x5c>)
 80016b8:	f003 fba1 	bl	8004dfe <HAL_SPI_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 80016c2:	f000 fc2d 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000031c 	.word	0x2000031c
 80016d0:	40003c00 	.word	0x40003c00

080016d4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80016d8:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <MX_SPI4_Init+0x64>)
 80016da:	4a18      	ldr	r2, [pc, #96]	@ (800173c <MX_SPI4_Init+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MX_SPI4_Init+0x64>)
 80016e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016e4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <MX_SPI4_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_SPI4_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_SPI4_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <MX_SPI4_Init+0x64>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_SPI4_Init+0x64>)
 8001700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001704:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_SPI4_Init+0x64>)
 8001708:	2238      	movs	r2, #56	@ 0x38
 800170a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <MX_SPI4_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_SPI4_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <MX_SPI4_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <MX_SPI4_Init+0x64>)
 8001720:	220a      	movs	r2, #10
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	@ (8001738 <MX_SPI4_Init+0x64>)
 8001726:	f003 fb6a 	bl	8004dfe <HAL_SPI_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001730:	f000 fbf6 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000374 	.word	0x20000374
 800173c:	40013400 	.word	0x40013400

08001740 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001744:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <MX_SPI5_Init+0x64>)
 8001746:	4a18      	ldr	r2, [pc, #96]	@ (80017a8 <MX_SPI5_Init+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <MX_SPI5_Init+0x64>)
 800174c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001750:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_SPI5_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <MX_SPI5_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_SPI5_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <MX_SPI5_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_SPI5_Init+0x64>)
 800176c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001770:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_SPI5_Init+0x64>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <MX_SPI5_Init+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_SPI5_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <MX_SPI5_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_SPI5_Init+0x64>)
 800178c:	220a      	movs	r2, #10
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <MX_SPI5_Init+0x64>)
 8001792:	f003 fb34 	bl	8004dfe <HAL_SPI_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800179c:	f000 fbc0 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200003cc 	.word	0x200003cc
 80017a8:	40015000 	.word	0x40015000

080017ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <MX_UART4_Init+0x50>)
 80017b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = mbus_uart_baud;
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017b8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80017bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017d2:	220c      	movs	r2, #12
 80017d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <MX_UART4_Init+0x4c>)
 80017e4:	f004 fb78 	bl	8005ed8 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80017ee:	f000 fb97 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000424 	.word	0x20000424
 80017fc:	40004c00 	.word	0x40004c00

08001800 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_UART5_Init+0x4c>)
 8001806:	4a12      	ldr	r2, [pc, #72]	@ (8001850 <MX_UART5_Init+0x50>)
 8001808:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = mbus_uart_baud;
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <MX_UART5_Init+0x4c>)
 800180c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001810:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_UART5_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_UART5_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_UART5_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_UART5_Init+0x4c>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_UART5_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_UART5_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_UART5_Init+0x4c>)
 8001838:	f004 fb4e 	bl	8005ed8 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001842:	f000 fb6d 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000046c 	.word	0x2000046c
 8001850:	40005000 	.word	0x40005000

08001854 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_UART7_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MX_UART7_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = mbus_uart_baud;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <MX_UART7_Init+0x4c>)
 8001860:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001864:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_UART7_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_UART7_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_UART7_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_UART7_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_UART7_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_UART7_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_UART7_Init+0x4c>)
 800188c:	f004 fb24 	bl	8005ed8 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001896:	f000 fb43 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200004b4 	.word	0x200004b4
 80018a4:	40007800 	.word	0x40007800

080018a8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_UART8_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = mbus_uart_baud;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018b4:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80018b8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_UART8_Init+0x4c>)
 80018e0:	f004 fafa 	bl	8005ed8 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80018ea:	f000 fb19 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200004fc 	.word	0x200004fc
 80018f8:	40007c00 	.word	0x40007c00

080018fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <MX_USART1_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = mbus_uart_baud;
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 8001908:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800190c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_USART1_UART_Init+0x4c>)
 8001934:	f004 fad0 	bl	8005ed8 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800193e:	f000 faef 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000544 	.word	0x20000544
 800194c:	40011000 	.word	0x40011000

08001950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <MX_USART2_UART_Init+0x50>)
 8001958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = mbus_uart_baud;
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 800195c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_USART2_UART_Init+0x4c>)
 8001988:	f004 faa6 	bl	8005ed8 <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001992:	f000 fac5 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000058c 	.word	0x2000058c
 80019a0:	40004400 	.word	0x40004400

080019a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <MX_USART3_UART_Init+0x50>)
 80019ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = mbus_uart_baud;
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019b0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80019b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_USART3_UART_Init+0x4c>)
 80019dc:	f004 fa7c 	bl	8005ed8 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019e6:	f000 fa9b 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200005d4 	.word	0x200005d4
 80019f4:	40004800 	.word	0x40004800

080019f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <MX_USART6_UART_Init+0x50>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = mbus_uart_baud;
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a04:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001a08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a30:	f004 fa52 	bl	8005ed8 <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a3a:	f000 fa71 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000061c 	.word	0x2000061c
 8001a48:	40011400 	.word	0x40011400

08001a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4b33      	ldr	r3, [pc, #204]	@ (8001b24 <MX_DMA_Init+0xd8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a32      	ldr	r2, [pc, #200]	@ (8001b24 <MX_DMA_Init+0xd8>)
 8001a5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b30      	ldr	r3, [pc, #192]	@ (8001b24 <MX_DMA_Init+0xd8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <MX_DMA_Init+0xd8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <MX_DMA_Init+0xd8>)
 8001a78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <MX_DMA_Init+0xd8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2105      	movs	r1, #5
 8001a8e:	200b      	movs	r0, #11
 8001a90:	f001 ff34 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a94:	200b      	movs	r0, #11
 8001a96:	f001 ff4d 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f001 ff2c 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001aa4:	200c      	movs	r0, #12
 8001aa6:	f001 ff45 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	200d      	movs	r0, #13
 8001ab0:	f001 ff24 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ab4:	200d      	movs	r0, #13
 8001ab6:	f001 ff3d 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2105      	movs	r1, #5
 8001abe:	200e      	movs	r0, #14
 8001ac0:	f001 ff1c 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ac4:	200e      	movs	r0, #14
 8001ac6:	f001 ff35 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	2010      	movs	r0, #16
 8001ad0:	f001 ff14 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f001 ff2d 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	2011      	movs	r0, #17
 8001ae0:	f001 ff0c 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ae4:	2011      	movs	r0, #17
 8001ae6:	f001 ff25 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	2038      	movs	r0, #56	@ 0x38
 8001af0:	f001 ff04 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001af4:	2038      	movs	r0, #56	@ 0x38
 8001af6:	f001 ff1d 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2105      	movs	r1, #5
 8001afe:	2039      	movs	r0, #57	@ 0x39
 8001b00:	f001 fefc 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b04:	2039      	movs	r0, #57	@ 0x39
 8001b06:	f001 ff15 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	203a      	movs	r0, #58	@ 0x3a
 8001b10:	f001 fef4 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b14:	203a      	movs	r0, #58	@ 0x3a
 8001b16:	f001 ff0d 	bl	8003934 <HAL_NVIC_EnableIRQ>

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	@ 0x38
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a7e      	ldr	r2, [pc, #504]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	4b78      	ldr	r3, [pc, #480]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a77      	ldr	r2, [pc, #476]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b75      	ldr	r3, [pc, #468]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	4b71      	ldr	r3, [pc, #452]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a70      	ldr	r2, [pc, #448]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b6e      	ldr	r3, [pc, #440]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	4b6a      	ldr	r3, [pc, #424]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a69      	ldr	r2, [pc, #420]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b67      	ldr	r3, [pc, #412]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b63      	ldr	r3, [pc, #396]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a62      	ldr	r2, [pc, #392]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b60      	ldr	r3, [pc, #384]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b5c      	ldr	r3, [pc, #368]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b59      	ldr	r3, [pc, #356]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b55      	ldr	r3, [pc, #340]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a54      	ldr	r2, [pc, #336]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b52      	ldr	r3, [pc, #328]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b4e      	ldr	r3, [pc, #312]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b4b      	ldr	r3, [pc, #300]	@ (8001d40 <MX_GPIO_Init+0x218>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|SPI4_SoftNSS_Pin, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2118      	movs	r1, #24
 8001c22:	4848      	ldr	r0, [pc, #288]	@ (8001d44 <MX_GPIO_Init+0x21c>)
 8001c24:	f002 fc20 	bl	8004468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c2e:	4846      	ldr	r0, [pc, #280]	@ (8001d48 <MX_GPIO_Init+0x220>)
 8001c30:	f002 fc1a 	bl	8004468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001c34:	2200      	movs	r2, #0
 8001c36:	f240 413b 	movw	r1, #1083	@ 0x43b
 8001c3a:	4844      	ldr	r0, [pc, #272]	@ (8001d4c <MX_GPIO_Init+0x224>)
 8001c3c:	f002 fc14 	bl	8004468 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_SoftNSS_Pin|LED_ONBOARD_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001c46:	4842      	ldr	r0, [pc, #264]	@ (8001d50 <MX_GPIO_Init+0x228>)
 8001c48:	f002 fc0e 	bl	8004468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ADS_RESET_Pin|ADS_START_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2114      	movs	r1, #20
 8001c50:	4840      	ldr	r0, [pc, #256]	@ (8001d54 <MX_GPIO_Init+0x22c>)
 8001c52:	f002 fc09 	bl	8004468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001c5c:	483d      	ldr	r0, [pc, #244]	@ (8001d54 <MX_GPIO_Init+0x22c>)
 8001c5e:	f002 fc03 	bl	8004468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001c68:	483b      	ldr	r0, [pc, #236]	@ (8001d58 <MX_GPIO_Init+0x230>)
 8001c6a:	f002 fbfd 	bl	8004468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 SPI4_SoftNSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPI4_SoftNSS_Pin;
 8001c6e:	2318      	movs	r3, #24
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	482f      	ldr	r0, [pc, #188]	@ (8001d44 <MX_GPIO_Init+0x21c>)
 8001c86:	f002 fa43 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4829      	ldr	r0, [pc, #164]	@ (8001d48 <MX_GPIO_Init+0x220>)
 8001ca4:	f002 fa34 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF3 PF4
                           PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001ca8:	f240 433b 	movw	r3, #1083	@ 0x43b
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4822      	ldr	r0, [pc, #136]	@ (8001d4c <MX_GPIO_Init+0x224>)
 8001cc2:	f002 fa25 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SoftNSS_Pin LED_ONBOARD_Pin */
  GPIO_InitStruct.Pin = SPI2_SoftNSS_Pin|LED_ONBOARD_Pin;
 8001cc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481c      	ldr	r0, [pc, #112]	@ (8001d50 <MX_GPIO_Init+0x228>)
 8001ce0:	f002 fa16 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADS_RESET_Pin ADS_START_Pin PG7 PG15 */
  GPIO_InitStruct.Pin = ADS_RESET_Pin|ADS_START_Pin|GPIO_PIN_7|GPIO_PIN_15;
 8001ce4:	f248 0394 	movw	r3, #32916	@ 0x8094
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4815      	ldr	r0, [pc, #84]	@ (8001d54 <MX_GPIO_Init+0x22c>)
 8001cfe:	f002 fa07 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d02:	2308      	movs	r3, #8
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	480f      	ldr	r0, [pc, #60]	@ (8001d54 <MX_GPIO_Init+0x22c>)
 8001d16:	f002 f9fb 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001d1a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d30:	4619      	mov	r1, r3
 8001d32:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <MX_GPIO_Init+0x230>)
 8001d34:	f002 f9ec 	bl	8004110 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d38:	bf00      	nop
 8001d3a:	3738      	adds	r7, #56	@ 0x38
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021800 	.word	0x40021800
 8001d58:	40020400 	.word	0x40020400

08001d5c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(osWaitForever);
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f004 ff25 	bl	8006bb6 <osDelay>
 8001d6c:	e7fa      	b.n	8001d64 <StartDefaultTask+0x8>
	...

08001d70 <logTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_logTaskEntry */
void logTaskEntry(void *argument)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN logTaskEntry */

	BusNode_Init();
 8001d78:	f7fe ff42 	bl	8000c00 <BusNode_Init>

	HAL_GPIO_WritePin(SPI2_SoftNSS_GPIO_Port, SPI2_SoftNSS_Pin, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <logTaskEntry+0x28>)
 8001d84:	f002 fb70 	bl	8004468 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {
		BusNode_RunLoop();
 8001d88:	f7fe ffe8 	bl	8000d5c <BusNode_RunLoop>
		osDelay(1);
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f004 ff12 	bl	8006bb6 <osDelay>
		BusNode_RunLoop();
 8001d92:	bf00      	nop
 8001d94:	e7f8      	b.n	8001d88 <logTaskEntry+0x18>
 8001d96:	bf00      	nop
 8001d98:	40020c00 	.word	0x40020c00

08001d9c <adcReadTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_adcReadTaskEntry */
void adcReadTaskEntry(void *argument)
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adcReadTaskEntry */
	/* Infinite loop */

	// Initialize ADC readings array
	memset(adcReadings, 0, sizeof(adcReadings));
 8001da4:	2218      	movs	r2, #24
 8001da6:	2100      	movs	r1, #0
 8001da8:	4824      	ldr	r0, [pc, #144]	@ (8001e3c <adcReadTaskEntry+0xa0>)
 8001daa:	f008 fb81 	bl	800a4b0 <memset>
	
	// Use static buffer to avoid stack issues
	static uint16_t adcBuf[12] = { 0 };
	
	// Start ADC with DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 8001dae:	220c      	movs	r2, #12
 8001db0:	4923      	ldr	r1, [pc, #140]	@ (8001e40 <adcReadTaskEntry+0xa4>)
 8001db2:	4824      	ldr	r0, [pc, #144]	@ (8001e44 <adcReadTaskEntry+0xa8>)
 8001db4:	f001 f8b8 	bl	8002f28 <HAL_ADC_Start_DMA>
	
	// Variables for timing
	uint32_t last_adc_update = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
	const uint32_t ADC_UPDATE_INTERVAL = 500; // 500ms interval for ADC updates
 8001dbc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001dc0:	613b      	str	r3, [r7, #16]
	
	for (;;) {
		uint32_t current_tick = osKernelGetTickCount();
 8001dc2:	f004 fe51 	bl	8006a68 <osKernelGetTickCount>
 8001dc6:	60f8      	str	r0, [r7, #12]
		
		// Check if ADC conversion is complete
		if (isADCFinished == 1) {
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <adcReadTaskEntry+0xac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d121      	bne.n	8001e14 <adcReadTaskEntry+0x78>
			isADCFinished = 0;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <adcReadTaskEntry+0xac>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
			
			// Acquire mutex before updating shared data
			if (osMutexAcquire(adcBufReadMutexHandle, 100) == osOK) {
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <adcReadTaskEntry+0xb0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2164      	movs	r1, #100	@ 0x64
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 ff8b 	bl	8006cf8 <osMutexAcquire>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d110      	bne.n	8001e0a <adcReadTaskEntry+0x6e>
				// Copy ADC readings to shared buffer
				memcpy(adcReadings, adcBuf, sizeof(adcReadings));
 8001de8:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <adcReadTaskEntry+0xa0>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <adcReadTaskEntry+0xa4>)
 8001dec:	4614      	mov	r4, r2
 8001dee:	461d      	mov	r5, r3
 8001df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001df8:	e884 0003 	stmia.w	r4, {r0, r1}
				osMutexRelease(adcBufReadMutexHandle);
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <adcReadTaskEntry+0xb0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 ffc4 	bl	8006d8e <osMutexRelease>
				
				// Update timestamp
				last_adc_update = current_tick;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	617b      	str	r3, [r7, #20]
			}
			
			// Restart ADC conversion
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	490c      	ldr	r1, [pc, #48]	@ (8001e40 <adcReadTaskEntry+0xa4>)
 8001e0e:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <adcReadTaskEntry+0xa8>)
 8001e10:	f001 f88a 	bl	8002f28 <HAL_ADC_Start_DMA>
		}
		
		// If it's been too long since the last update, force a new conversion
		if (current_tick - last_adc_update > ADC_UPDATE_INTERVAL) {
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d209      	bcs.n	8001e34 <adcReadTaskEntry+0x98>
			// Stop any ongoing conversion
			HAL_ADC_Stop_DMA(&hadc1);
 8001e20:	4808      	ldr	r0, [pc, #32]	@ (8001e44 <adcReadTaskEntry+0xa8>)
 8001e22:	f001 f995 	bl	8003150 <HAL_ADC_Stop_DMA>
			
			// Restart ADC conversion
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 8001e26:	220c      	movs	r2, #12
 8001e28:	4905      	ldr	r1, [pc, #20]	@ (8001e40 <adcReadTaskEntry+0xa4>)
 8001e2a:	4806      	ldr	r0, [pc, #24]	@ (8001e44 <adcReadTaskEntry+0xa8>)
 8001e2c:	f001 f87c 	bl	8002f28 <HAL_ADC_Start_DMA>
			
			// Update timestamp to prevent multiple forced conversions
			last_adc_update = current_tick;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	617b      	str	r3, [r7, #20]
		}
		
		// Short delay to yield to other tasks
		osDelay(20);
 8001e34:	2014      	movs	r0, #20
 8001e36:	f004 febe 	bl	8006bb6 <osDelay>
	for (;;) {
 8001e3a:	e7c2      	b.n	8001dc2 <adcReadTaskEntry+0x26>
 8001e3c:	20000984 	.word	0x20000984
 8001e40:	200009b8 	.word	0x200009b8
 8001e44:	200001c4 	.word	0x200001c4
 8001e48:	200009b4 	.word	0x200009b4
 8001e4c:	2000097c 	.word	0x2000097c

08001e50 <adsTaskEntry>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
/* USER CODE END Header_adsTaskEntry */
void adsTaskEntry(void *argument)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adsTaskEntry */
	/* Infinite loop */
	
	// Initialize the external ADC
	ADS124S08 adc = { .hspi = &hspi4, .nss_pin = SPI4_SoftNSS_Pin, .nss_port = GPIOE};
 8001e58:	4a26      	ldr	r2, [pc, #152]	@ (8001ef4 <adsTaskEntry+0xa4>)
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ADS124S08_Init(&adc);
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb5f 	bl	800052c <ADS124S08_Init>
	
	// Set initial channel
	ADS124S08_SetInputChannel(&adc, 0, 13);
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	220d      	movs	r2, #13
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fc16 	bl	80006a8 <ADS124S08_SetInputChannel>
	
	// Start conversion
	ADS124S08_StartConversion(&adc);
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fbb0 	bl	80005e6 <ADS124S08_StartConversion>
	
	// Variables for timing
	uint32_t last_update = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
	const uint32_t UPDATE_INTERVAL = 500; // 500ms interval for updates
 8001e8a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e8e:	61fb      	str	r3, [r7, #28]
	
	for (;;) {
		uint32_t current_tick = osKernelGetTickCount();
 8001e90:	f004 fdea 	bl	8006a68 <osKernelGetTickCount>
 8001e94:	61b8      	str	r0, [r7, #24]
		
		// Only update readings at the specified interval
		if (current_tick - last_update >= UPDATE_INTERVAL) {
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d823      	bhi.n	8001eea <adsTaskEntry+0x9a>
			// Read all channels
			for (size_t i = 0; i < 11; i++) {
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	e01b      	b.n	8001ee0 <adsTaskEntry+0x90>
				// Set channel
				ADS124S08_SetInputChannel(&adc, i, 12);
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	b2d9      	uxtb	r1, r3
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	220c      	movs	r2, #12
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fbf8 	bl	80006a8 <ADS124S08_SetInputChannel>
				
				// Read data and shift right by 8 bits (to get 16-bit value)
				int32_t reading = ADS124S08_ReadData(&adc) >> 8;
 8001eb8:	f107 0308 	add.w	r3, r7, #8
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fc37 	bl	8000730 <ADS124S08_ReadData>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	617b      	str	r3, [r7, #20]
				
				// Store reading
				externalADCReadings[i] = reading;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	b299      	uxth	r1, r3
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <adsTaskEntry+0xa8>)
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				
				// Small delay between channel readings to avoid SPI conflicts
				osDelay(5);
 8001ed4:	2005      	movs	r0, #5
 8001ed6:	f004 fe6e 	bl	8006bb6 <osDelay>
			for (size_t i = 0; i < 11; i++) {
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	3301      	adds	r3, #1
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2b0a      	cmp	r3, #10
 8001ee4:	d9e0      	bls.n	8001ea8 <adsTaskEntry+0x58>
			}
			
			// Update timestamp
			last_update = current_tick;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		
		// Yield to other tasks
		osDelay(20);
 8001eea:	2014      	movs	r0, #20
 8001eec:	f004 fe63 	bl	8006bb6 <osDelay>
	for (;;) {
 8001ef0:	e7ce      	b.n	8001e90 <adsTaskEntry+0x40>
 8001ef2:	bf00      	nop
 8001ef4:	0800a728 	.word	0x0800a728
 8001ef8:	2000099c 	.word	0x2000099c

08001efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001f0e:	f000 ff83 	bl	8002e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40001000 	.word	0x40001000

08001f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <Error_Handler+0x8>

08001f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_MspInit+0x54>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_MspInit+0x54>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_MspInit+0x54>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_MspInit+0x54>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <HAL_MspInit+0x54>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_MspInit+0x54>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	f06f 0001 	mvn.w	r0, #1
 8001f72:	f001 fcc3 	bl	80038fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	@ 0x30
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a49      	ldr	r2, [pc, #292]	@ (80020c8 <HAL_ADC_MspInit+0x144>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	f040 808b 	bne.w	80020be <HAL_ADC_MspInit+0x13a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	4b47      	ldr	r3, [pc, #284]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	4a46      	ldr	r2, [pc, #280]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb8:	4b44      	ldr	r3, [pc, #272]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	4b39      	ldr	r3, [pc, #228]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	4a38      	ldr	r2, [pc, #224]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff0:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b32      	ldr	r3, [pc, #200]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	4a31      	ldr	r2, [pc, #196]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	6313      	str	r3, [r2, #48]	@ 0x30
 800200c:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <HAL_ADC_MspInit+0x148>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002018:	233f      	movs	r3, #63	@ 0x3f
 800201a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201c:	2303      	movs	r3, #3
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	4829      	ldr	r0, [pc, #164]	@ (80020d0 <HAL_ADC_MspInit+0x14c>)
 800202c:	f002 f870 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002030:	230f      	movs	r3, #15
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4824      	ldr	r0, [pc, #144]	@ (80020d4 <HAL_ADC_MspInit+0x150>)
 8002044:	f002 f864 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002048:	2303      	movs	r3, #3
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204c:	2303      	movs	r3, #3
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	481f      	ldr	r0, [pc, #124]	@ (80020d8 <HAL_ADC_MspInit+0x154>)
 800205c:	f002 f858 	bl	8004110 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002060:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 8002062:	4a1f      	ldr	r2, [pc, #124]	@ (80020e0 <HAL_ADC_MspInit+0x15c>)
 8002064:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002066:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002072:	4b1a      	ldr	r3, [pc, #104]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002078:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 800207a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800207e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 8002082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002086:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002088:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 800208a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800208e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209c:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020a2:	480e      	ldr	r0, [pc, #56]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 80020a4:	f001 fc54 	bl	8003950 <HAL_DMA_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80020ae:	f7ff ff37 	bl	8001f20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a09      	ldr	r2, [pc, #36]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 80020b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80020b8:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_ADC_MspInit+0x158>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020be:	bf00      	nop
 80020c0:	3730      	adds	r7, #48	@ 0x30
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40012000 	.word	0x40012000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40020400 	.word	0x40020400
 80020dc:	2000020c 	.word	0x2000020c
 80020e0:	40026410 	.word	0x40026410

080020e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	@ 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a8d      	ldr	r2, [pc, #564]	@ (8002338 <HAL_SPI_MspInit+0x254>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12c      	bne.n	8002160 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
 800210a:	4b8c      	ldr	r3, [pc, #560]	@ (800233c <HAL_SPI_MspInit+0x258>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a8b      	ldr	r2, [pc, #556]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800211e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002126:	4b85      	ldr	r3, [pc, #532]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	4a84      	ldr	r2, [pc, #528]	@ (800233c <HAL_SPI_MspInit+0x258>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	@ 0x30
 8002132:	4b82      	ldr	r3, [pc, #520]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800213c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800213e:	23f0      	movs	r3, #240	@ 0xf0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800214e:	2305      	movs	r3, #5
 8002150:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002156:	4619      	mov	r1, r3
 8002158:	4879      	ldr	r0, [pc, #484]	@ (8002340 <HAL_SPI_MspInit+0x25c>)
 800215a:	f001 ffd9 	bl	8004110 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 800215e:	e0e7      	b.n	8002330 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a77      	ldr	r2, [pc, #476]	@ (8002344 <HAL_SPI_MspInit+0x260>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d12d      	bne.n	80021c6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800216e:	4b73      	ldr	r3, [pc, #460]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a72      	ldr	r2, [pc, #456]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b70      	ldr	r3, [pc, #448]	@ (800233c <HAL_SPI_MspInit+0x258>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
 800218a:	4b6c      	ldr	r3, [pc, #432]	@ (800233c <HAL_SPI_MspInit+0x258>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a6b      	ldr	r2, [pc, #428]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b69      	ldr	r3, [pc, #420]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021a2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021b4:	2305      	movs	r3, #5
 80021b6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021bc:	4619      	mov	r1, r3
 80021be:	4862      	ldr	r0, [pc, #392]	@ (8002348 <HAL_SPI_MspInit+0x264>)
 80021c0:	f001 ffa6 	bl	8004110 <HAL_GPIO_Init>
}
 80021c4:	e0b4      	b.n	8002330 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI3)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a60      	ldr	r2, [pc, #384]	@ (800234c <HAL_SPI_MspInit+0x268>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d14b      	bne.n	8002268 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
 80021d4:	4b59      	ldr	r3, [pc, #356]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	4a58      	ldr	r2, [pc, #352]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80021da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021de:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e0:	4b56      	ldr	r3, [pc, #344]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021e8:	623b      	str	r3, [r7, #32]
 80021ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	4b52      	ldr	r3, [pc, #328]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f4:	4a51      	ldr	r2, [pc, #324]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fc:	4b4f      	ldr	r3, [pc, #316]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <HAL_SPI_MspInit+0x258>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	4a4a      	ldr	r2, [pc, #296]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	6313      	str	r3, [r2, #48]	@ 0x30
 8002218:	4b48      	ldr	r3, [pc, #288]	@ (800233c <HAL_SPI_MspInit+0x258>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002228:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002236:	2306      	movs	r3, #6
 8002238:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800223e:	4619      	mov	r1, r3
 8002240:	483f      	ldr	r0, [pc, #252]	@ (8002340 <HAL_SPI_MspInit+0x25c>)
 8002242:	f001 ff65 	bl	8004110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002246:	2338      	movs	r3, #56	@ 0x38
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002256:	2306      	movs	r3, #6
 8002258:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800225e:	4619      	mov	r1, r3
 8002260:	4839      	ldr	r0, [pc, #228]	@ (8002348 <HAL_SPI_MspInit+0x264>)
 8002262:	f001 ff55 	bl	8004110 <HAL_GPIO_Init>
}
 8002266:	e063      	b.n	8002330 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI4)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a38      	ldr	r2, [pc, #224]	@ (8002350 <HAL_SPI_MspInit+0x26c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12c      	bne.n	80022cc <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	4b31      	ldr	r3, [pc, #196]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	4a30      	ldr	r2, [pc, #192]	@ (800233c <HAL_SPI_MspInit+0x258>)
 800227c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002280:	6453      	str	r3, [r2, #68]	@ 0x44
 8002282:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	4a29      	ldr	r2, [pc, #164]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002298:	f043 0310 	orr.w	r3, r3, #16
 800229c:	6313      	str	r3, [r2, #48]	@ 0x30
 800229e:	4b27      	ldr	r3, [pc, #156]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80022aa:	2364      	movs	r3, #100	@ 0x64
 80022ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80022ba:	2305      	movs	r3, #5
 80022bc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022c2:	4619      	mov	r1, r3
 80022c4:	4823      	ldr	r0, [pc, #140]	@ (8002354 <HAL_SPI_MspInit+0x270>)
 80022c6:	f001 ff23 	bl	8004110 <HAL_GPIO_Init>
}
 80022ca:	e031      	b.n	8002330 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI5)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a21      	ldr	r2, [pc, #132]	@ (8002358 <HAL_SPI_MspInit+0x274>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12c      	bne.n	8002330 <HAL_SPI_MspInit+0x24c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80022e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a10      	ldr	r2, [pc, #64]	@ (800233c <HAL_SPI_MspInit+0x258>)
 80022fc:	f043 0320 	orr.w	r3, r3, #32
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <HAL_SPI_MspInit+0x258>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800230e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002312:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002320:	2305      	movs	r3, #5
 8002322:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002324:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002328:	4619      	mov	r1, r3
 800232a:	480c      	ldr	r0, [pc, #48]	@ (800235c <HAL_SPI_MspInit+0x278>)
 800232c:	f001 fef0 	bl	8004110 <HAL_GPIO_Init>
}
 8002330:	bf00      	nop
 8002332:	3748      	adds	r7, #72	@ 0x48
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40013000 	.word	0x40013000
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000
 8002344:	40003800 	.word	0x40003800
 8002348:	40020400 	.word	0x40020400
 800234c:	40003c00 	.word	0x40003c00
 8002350:	40013400 	.word	0x40013400
 8002354:	40021000 	.word	0x40021000
 8002358:	40015000 	.word	0x40015000
 800235c:	40021400 	.word	0x40021400

08002360 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b098      	sub	sp, #96	@ 0x60
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6f      	ldr	r2, [pc, #444]	@ (800253c <HAL_UART_MspInit+0x1dc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d15b      	bne.n	800243a <HAL_UART_MspInit+0xda>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002386:	4b6e      	ldr	r3, [pc, #440]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	4a6d      	ldr	r2, [pc, #436]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 800238c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002390:	6413      	str	r3, [r2, #64]	@ 0x40
 8002392:	4b6b      	ldr	r3, [pc, #428]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800239a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800239c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023a2:	4b67      	ldr	r3, [pc, #412]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a66      	ldr	r2, [pc, #408]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b64      	ldr	r3, [pc, #400]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023cc:	2308      	movs	r3, #8
 80023ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023d4:	4619      	mov	r1, r3
 80023d6:	485b      	ldr	r0, [pc, #364]	@ (8002544 <HAL_UART_MspInit+0x1e4>)
 80023d8:	f001 fe9a 	bl	8004110 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80023dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 80023de:	4a5b      	ldr	r2, [pc, #364]	@ (800254c <HAL_UART_MspInit+0x1ec>)
 80023e0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80023e2:	4b59      	ldr	r3, [pc, #356]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 80023e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023e8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ea:	4b57      	ldr	r3, [pc, #348]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f0:	4b55      	ldr	r3, [pc, #340]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023f6:	4b54      	ldr	r3, [pc, #336]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 80023f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023fc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023fe:	4b52      	ldr	r3, [pc, #328]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002404:	4b50      	ldr	r3, [pc, #320]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800240a:	4b4f      	ldr	r3, [pc, #316]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 800240c:	2200      	movs	r2, #0
 800240e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002410:	4b4d      	ldr	r3, [pc, #308]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 8002412:	2200      	movs	r2, #0
 8002414:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002416:	4b4c      	ldr	r3, [pc, #304]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 8002418:	2200      	movs	r2, #0
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800241c:	484a      	ldr	r0, [pc, #296]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 800241e:	f001 fa97 	bl	8003950 <HAL_DMA_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002428:	f7ff fd7a 	bl	8001f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a46      	ldr	r2, [pc, #280]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 8002430:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002432:	4a45      	ldr	r2, [pc, #276]	@ (8002548 <HAL_UART_MspInit+0x1e8>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002438:	e2ec      	b.n	8002a14 <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==UART5)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a44      	ldr	r2, [pc, #272]	@ (8002550 <HAL_UART_MspInit+0x1f0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	f040 808d 	bne.w	8002560 <HAL_UART_MspInit+0x200>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	643b      	str	r3, [r7, #64]	@ 0x40
 800244a:	4b3d      	ldr	r3, [pc, #244]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a3c      	ldr	r2, [pc, #240]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002450:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
 8002456:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002466:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	4a35      	ldr	r2, [pc, #212]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6313      	str	r3, [r2, #48]	@ 0x30
 8002472:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800247c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002482:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	4a2e      	ldr	r2, [pc, #184]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	6313      	str	r3, [r2, #48]	@ 0x30
 800248e:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <HAL_UART_MspInit+0x1e0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800249a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800249e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024ac:	2308      	movs	r3, #8
 80024ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024b4:	4619      	mov	r1, r3
 80024b6:	4823      	ldr	r0, [pc, #140]	@ (8002544 <HAL_UART_MspInit+0x1e4>)
 80024b8:	f001 fe2a 	bl	8004110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024bc:	2304      	movs	r3, #4
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024cc:	2308      	movs	r3, #8
 80024ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024d4:	4619      	mov	r1, r3
 80024d6:	481f      	ldr	r0, [pc, #124]	@ (8002554 <HAL_UART_MspInit+0x1f4>)
 80024d8:	f001 fe1a 	bl	8004110 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80024dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <HAL_UART_MspInit+0x1fc>)
 80024e0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80024e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 80024e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024e8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 80024f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024fc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024fe:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 8002500:	2200      	movs	r2, #0
 8002502:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002504:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 800250c:	2200      	movs	r2, #0
 800250e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800251c:	480e      	ldr	r0, [pc, #56]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 800251e:	f001 fa17 	bl	8003950 <HAL_DMA_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8002528:	f7ff fcfa 	bl	8001f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 8002530:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002532:	4a09      	ldr	r2, [pc, #36]	@ (8002558 <HAL_UART_MspInit+0x1f8>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002538:	e26c      	b.n	8002a14 <HAL_UART_MspInit+0x6b4>
 800253a:	bf00      	nop
 800253c:	40004c00 	.word	0x40004c00
 8002540:	40023800 	.word	0x40023800
 8002544:	40020800 	.word	0x40020800
 8002548:	20000664 	.word	0x20000664
 800254c:	40026040 	.word	0x40026040
 8002550:	40005000 	.word	0x40005000
 8002554:	40020c00 	.word	0x40020c00
 8002558:	200006c4 	.word	0x200006c4
 800255c:	40026010 	.word	0x40026010
  else if(huart->Instance==UART7)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a8f      	ldr	r2, [pc, #572]	@ (80027a4 <HAL_UART_MspInit+0x444>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d15b      	bne.n	8002622 <HAL_UART_MspInit+0x2c2>
    __HAL_RCC_UART7_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
 800256e:	4b8e      	ldr	r3, [pc, #568]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	4a8d      	ldr	r2, [pc, #564]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 8002574:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002578:	6413      	str	r3, [r2, #64]	@ 0x40
 800257a:	4b8b      	ldr	r3, [pc, #556]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002582:	637b      	str	r3, [r7, #52]	@ 0x34
 8002584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	633b      	str	r3, [r7, #48]	@ 0x30
 800258a:	4b87      	ldr	r3, [pc, #540]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4a86      	ldr	r2, [pc, #536]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	6313      	str	r3, [r2, #48]	@ 0x30
 8002596:	4b84      	ldr	r3, [pc, #528]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80025a2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80025b4:	2308      	movs	r3, #8
 80025b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80025bc:	4619      	mov	r1, r3
 80025be:	487b      	ldr	r0, [pc, #492]	@ (80027ac <HAL_UART_MspInit+0x44c>)
 80025c0:	f001 fda6 	bl	8004110 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80025c4:	4b7a      	ldr	r3, [pc, #488]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025c6:	4a7b      	ldr	r2, [pc, #492]	@ (80027b4 <HAL_UART_MspInit+0x454>)
 80025c8:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80025ca:	4b79      	ldr	r3, [pc, #484]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025cc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80025d0:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025d2:	4b77      	ldr	r3, [pc, #476]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d8:	4b75      	ldr	r3, [pc, #468]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025de:	4b74      	ldr	r3, [pc, #464]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025e4:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e6:	4b72      	ldr	r3, [pc, #456]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ec:	4b70      	ldr	r3, [pc, #448]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80025f2:	4b6f      	ldr	r3, [pc, #444]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025f8:	4b6d      	ldr	r3, [pc, #436]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025fe:	4b6c      	ldr	r3, [pc, #432]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 8002600:	2200      	movs	r2, #0
 8002602:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002604:	486a      	ldr	r0, [pc, #424]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 8002606:	f001 f9a3 	bl	8003950 <HAL_DMA_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8002610:	f7ff fc86 	bl	8001f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a66      	ldr	r2, [pc, #408]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 8002618:	63da      	str	r2, [r3, #60]	@ 0x3c
 800261a:	4a65      	ldr	r2, [pc, #404]	@ (80027b0 <HAL_UART_MspInit+0x450>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002620:	e1f8      	b.n	8002a14 <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==UART8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a64      	ldr	r2, [pc, #400]	@ (80027b8 <HAL_UART_MspInit+0x458>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d15a      	bne.n	80026e2 <HAL_UART_MspInit+0x382>
    __HAL_RCC_UART8_CLK_ENABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002630:	4b5d      	ldr	r3, [pc, #372]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	4a5c      	ldr	r2, [pc, #368]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 8002636:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800263a:	6413      	str	r3, [r2, #64]	@ 0x40
 800263c:	4b5a      	ldr	r3, [pc, #360]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800264c:	4b56      	ldr	r3, [pc, #344]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	4a55      	ldr	r2, [pc, #340]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	6313      	str	r3, [r2, #48]	@ 0x30
 8002658:	4b53      	ldr	r3, [pc, #332]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002664:	2303      	movs	r3, #3
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002674:	2308      	movs	r3, #8
 8002676:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002678:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800267c:	4619      	mov	r1, r3
 800267e:	484b      	ldr	r0, [pc, #300]	@ (80027ac <HAL_UART_MspInit+0x44c>)
 8002680:	f001 fd46 	bl	8004110 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8002684:	4b4d      	ldr	r3, [pc, #308]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 8002686:	4a4e      	ldr	r2, [pc, #312]	@ (80027c0 <HAL_UART_MspInit+0x460>)
 8002688:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 800268a:	4b4c      	ldr	r3, [pc, #304]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 800268c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002690:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002692:	4b4a      	ldr	r3, [pc, #296]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002698:	4b48      	ldr	r3, [pc, #288]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800269e:	4b47      	ldr	r3, [pc, #284]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026a4:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a6:	4b45      	ldr	r3, [pc, #276]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ac:	4b43      	ldr	r3, [pc, #268]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80026b2:	4b42      	ldr	r3, [pc, #264]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b8:	4b40      	ldr	r3, [pc, #256]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026be:	4b3f      	ldr	r3, [pc, #252]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80026c4:	483d      	ldr	r0, [pc, #244]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026c6:	f001 f943 	bl	8003950 <HAL_DMA_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_MspInit+0x374>
      Error_Handler();
 80026d0:	f7ff fc26 	bl	8001f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a39      	ldr	r2, [pc, #228]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026da:	4a38      	ldr	r2, [pc, #224]	@ (80027bc <HAL_UART_MspInit+0x45c>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80026e0:	e198      	b.n	8002a14 <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a37      	ldr	r2, [pc, #220]	@ (80027c4 <HAL_UART_MspInit+0x464>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d173      	bne.n	80027d4 <HAL_UART_MspInit+0x474>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f0:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 80026f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f4:	4a2c      	ldr	r2, [pc, #176]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 80026f6:	f043 0310 	orr.w	r3, r3, #16
 80026fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fc:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	4b26      	ldr	r3, [pc, #152]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	4a25      	ldr	r2, [pc, #148]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6313      	str	r3, [r2, #48]	@ 0x30
 8002718:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <HAL_UART_MspInit+0x448>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002724:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002728:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002736:	2307      	movs	r3, #7
 8002738:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800273e:	4619      	mov	r1, r3
 8002740:	4821      	ldr	r0, [pc, #132]	@ (80027c8 <HAL_UART_MspInit+0x468>)
 8002742:	f001 fce5 	bl	8004110 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002746:	4b21      	ldr	r3, [pc, #132]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 8002748:	4a21      	ldr	r2, [pc, #132]	@ (80027d0 <HAL_UART_MspInit+0x470>)
 800274a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 800274e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002752:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800275a:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 800275c:	2200      	movs	r2, #0
 800275e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002760:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 8002762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002766:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 800276a:	2200      	movs	r2, #0
 800276c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002774:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002786:	4811      	ldr	r0, [pc, #68]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 8002788:	f001 f8e2 	bl	8003950 <HAL_DMA_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_UART_MspInit+0x436>
      Error_Handler();
 8002792:	f7ff fbc5 	bl	8001f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a0c      	ldr	r2, [pc, #48]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 800279a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800279c:	4a0b      	ldr	r2, [pc, #44]	@ (80027cc <HAL_UART_MspInit+0x46c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80027a2:	e137      	b.n	8002a14 <HAL_UART_MspInit+0x6b4>
 80027a4:	40007800 	.word	0x40007800
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40021000 	.word	0x40021000
 80027b0:	20000724 	.word	0x20000724
 80027b4:	40026058 	.word	0x40026058
 80027b8:	40007c00 	.word	0x40007c00
 80027bc:	20000784 	.word	0x20000784
 80027c0:	400260a0 	.word	0x400260a0
 80027c4:	40011000 	.word	0x40011000
 80027c8:	40020000 	.word	0x40020000
 80027cc:	200007e4 	.word	0x200007e4
 80027d0:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a90      	ldr	r2, [pc, #576]	@ (8002a1c <HAL_UART_MspInit+0x6bc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d15a      	bne.n	8002894 <HAL_UART_MspInit+0x534>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a8e      	ldr	r2, [pc, #568]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	4b88      	ldr	r3, [pc, #544]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a87      	ldr	r2, [pc, #540]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 8002804:	f043 0308 	orr.w	r3, r3, #8
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b85      	ldr	r3, [pc, #532]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002816:	2360      	movs	r3, #96	@ 0x60
 8002818:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002826:	2307      	movs	r3, #7
 8002828:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800282e:	4619      	mov	r1, r3
 8002830:	487c      	ldr	r0, [pc, #496]	@ (8002a24 <HAL_UART_MspInit+0x6c4>)
 8002832:	f001 fc6d 	bl	8004110 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002836:	4b7c      	ldr	r3, [pc, #496]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 8002838:	4a7c      	ldr	r2, [pc, #496]	@ (8002a2c <HAL_UART_MspInit+0x6cc>)
 800283a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800283c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 800283e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002842:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002844:	4b78      	ldr	r3, [pc, #480]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284a:	4b77      	ldr	r3, [pc, #476]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002850:	4b75      	ldr	r3, [pc, #468]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 8002852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002856:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002858:	4b73      	ldr	r3, [pc, #460]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285e:	4b72      	ldr	r3, [pc, #456]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002864:	4b70      	ldr	r3, [pc, #448]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800286a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002870:	4b6d      	ldr	r3, [pc, #436]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002876:	486c      	ldr	r0, [pc, #432]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 8002878:	f001 f86a 	bl	8003950 <HAL_DMA_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_MspInit+0x526>
      Error_Handler();
 8002882:	f7ff fb4d 	bl	8001f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a67      	ldr	r2, [pc, #412]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 800288a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800288c:	4a66      	ldr	r2, [pc, #408]	@ (8002a28 <HAL_UART_MspInit+0x6c8>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002892:	e0bf      	b.n	8002a14 <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a65      	ldr	r2, [pc, #404]	@ (8002a30 <HAL_UART_MspInit+0x6d0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d15b      	bne.n	8002956 <HAL_UART_MspInit+0x5f6>
    __HAL_RCC_USART3_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4b58      	ldr	r3, [pc, #352]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	4a57      	ldr	r2, [pc, #348]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ca:	4b55      	ldr	r3, [pc, #340]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028e8:	2307      	movs	r3, #7
 80028ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80028f0:	4619      	mov	r1, r3
 80028f2:	4850      	ldr	r0, [pc, #320]	@ (8002a34 <HAL_UART_MspInit+0x6d4>)
 80028f4:	f001 fc0c 	bl	8004110 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80028f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 80028fa:	4a50      	ldr	r2, [pc, #320]	@ (8002a3c <HAL_UART_MspInit+0x6dc>)
 80028fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80028fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 8002900:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002904:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002906:	4b4c      	ldr	r3, [pc, #304]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800290c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002912:	4b49      	ldr	r3, [pc, #292]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 8002914:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002918:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800291a:	4b47      	ldr	r3, [pc, #284]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002920:	4b45      	ldr	r3, [pc, #276]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 8002928:	2200      	movs	r2, #0
 800292a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800292c:	4b42      	ldr	r3, [pc, #264]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002932:	4b41      	ldr	r3, [pc, #260]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002938:	483f      	ldr	r0, [pc, #252]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 800293a:	f001 f809 	bl	8003950 <HAL_DMA_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_UART_MspInit+0x5e8>
      Error_Handler();
 8002944:	f7ff faec 	bl	8001f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 800294c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800294e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a38 <HAL_UART_MspInit+0x6d8>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002954:	e05e      	b.n	8002a14 <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART6)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a39      	ldr	r2, [pc, #228]	@ (8002a40 <HAL_UART_MspInit+0x6e0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d159      	bne.n	8002a14 <HAL_UART_MspInit+0x6b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	4a2d      	ldr	r2, [pc, #180]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002970:	4b2b      	ldr	r3, [pc, #172]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	4b27      	ldr	r3, [pc, #156]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	4a26      	ldr	r2, [pc, #152]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6313      	str	r3, [r2, #48]	@ 0x30
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_UART_MspInit+0x6c0>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002998:	23c0      	movs	r3, #192	@ 0xc0
 800299a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029a8:	2308      	movs	r3, #8
 80029aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029b0:	4619      	mov	r1, r3
 80029b2:	4824      	ldr	r0, [pc, #144]	@ (8002a44 <HAL_UART_MspInit+0x6e4>)
 80029b4:	f001 fbac 	bl	8004110 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80029b8:	4b23      	ldr	r3, [pc, #140]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029ba:	4a24      	ldr	r2, [pc, #144]	@ (8002a4c <HAL_UART_MspInit+0x6ec>)
 80029bc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80029be:	4b22      	ldr	r3, [pc, #136]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029c0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80029c4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c6:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029d8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029da:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e0:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80029e6:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ec:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80029f8:	4813      	ldr	r0, [pc, #76]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 80029fa:	f000 ffa9 	bl	8003950 <HAL_DMA_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_UART_MspInit+0x6a8>
      Error_Handler();
 8002a04:	f7ff fa8c 	bl	8001f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 8002a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a48 <HAL_UART_MspInit+0x6e8>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a14:	bf00      	nop
 8002a16:	3760      	adds	r7, #96	@ 0x60
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40004400 	.word	0x40004400
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40020c00 	.word	0x40020c00
 8002a28:	20000844 	.word	0x20000844
 8002a2c:	40026088 	.word	0x40026088
 8002a30:	40004800 	.word	0x40004800
 8002a34:	40020400 	.word	0x40020400
 8002a38:	200008a4 	.word	0x200008a4
 8002a3c:	40026028 	.word	0x40026028
 8002a40:	40011400 	.word	0x40011400
 8002a44:	40020800 	.word	0x40020800
 8002a48:	20000904 	.word	0x20000904
 8002a4c:	40026428 	.word	0x40026428

08002a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	@ 0x38
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	4b33      	ldr	r3, [pc, #204]	@ (8002b34 <HAL_InitTick+0xe4>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <HAL_InitTick+0xe4>)
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a70:	4b30      	ldr	r3, [pc, #192]	@ (8002b34 <HAL_InitTick+0xe4>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a7c:	f107 0210 	add.w	r2, r7, #16
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 f96c 	bl	8004d64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a96:	f002 f93d 	bl	8004d14 <HAL_RCC_GetPCLK1Freq>
 8002a9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8002a9c:	e004      	b.n	8002aa8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a9e:	f002 f939 	bl	8004d14 <HAL_RCC_GetPCLK1Freq>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aaa:	4a23      	ldr	r2, [pc, #140]	@ (8002b38 <HAL_InitTick+0xe8>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	0c9b      	lsrs	r3, r3, #18
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ab6:	4b21      	ldr	r3, [pc, #132]	@ (8002b3c <HAL_InitTick+0xec>)
 8002ab8:	4a21      	ldr	r2, [pc, #132]	@ (8002b40 <HAL_InitTick+0xf0>)
 8002aba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002abc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <HAL_InitTick+0xec>)
 8002abe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ac2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b3c <HAL_InitTick+0xec>)
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <HAL_InitTick+0xec>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_InitTick+0xec>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_InitTick+0xec>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002adc:	4817      	ldr	r0, [pc, #92]	@ (8002b3c <HAL_InitTick+0xec>)
 8002ade:	f002 ff5f 	bl	80059a0 <HAL_TIM_Base_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11b      	bne.n	8002b28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002af0:	4812      	ldr	r0, [pc, #72]	@ (8002b3c <HAL_InitTick+0xec>)
 8002af2:	f002 ffaf 	bl	8005a54 <HAL_TIM_Base_Start_IT>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002afc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d111      	bne.n	8002b28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b04:	2036      	movs	r0, #54	@ 0x36
 8002b06:	f000 ff15 	bl	8003934 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d808      	bhi.n	8002b22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002b10:	2200      	movs	r2, #0
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	2036      	movs	r0, #54	@ 0x36
 8002b16:	f000 fef1 	bl	80038fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <HAL_InitTick+0xf4>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e002      	b.n	8002b28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3738      	adds	r7, #56	@ 0x38
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40023800 	.word	0x40023800
 8002b38:	431bde83 	.word	0x431bde83
 8002b3c:	200009d0 	.word	0x200009d0
 8002b40:	40001000 	.word	0x40001000
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002b4c:	f002 f93c 	bl	8004dc8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <NMI_Handler+0x8>

08002b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <HardFault_Handler+0x4>

08002b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <MemManage_Handler+0x4>

08002b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b68:	bf00      	nop
 8002b6a:	e7fd      	b.n	8002b68 <BusFault_Handler+0x4>

08002b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b70:	bf00      	nop
 8002b72:	e7fd      	b.n	8002b70 <UsageFault_Handler+0x4>

08002b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <DMA1_Stream0_IRQHandler+0x10>)
 8002b8a:	f001 f857 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200006c4 	.word	0x200006c4

08002b98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <DMA1_Stream1_IRQHandler+0x10>)
 8002b9e:	f001 f84d 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200008a4 	.word	0x200008a4

08002bac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <DMA1_Stream2_IRQHandler+0x10>)
 8002bb2:	f001 f843 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000664 	.word	0x20000664

08002bc0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002bc4:	4802      	ldr	r0, [pc, #8]	@ (8002bd0 <DMA1_Stream3_IRQHandler+0x10>)
 8002bc6:	f001 f839 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000724 	.word	0x20000724

08002bd4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bd8:	4802      	ldr	r0, [pc, #8]	@ (8002be4 <DMA1_Stream5_IRQHandler+0x10>)
 8002bda:	f001 f82f 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000844 	.word	0x20000844

08002be8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002bec:	4802      	ldr	r0, [pc, #8]	@ (8002bf8 <DMA1_Stream6_IRQHandler+0x10>)
 8002bee:	f001 f825 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000784 	.word	0x20000784

08002bfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <TIM6_DAC_IRQHandler+0x10>)
 8002c02:	f002 ff97 	bl	8005b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200009d0 	.word	0x200009d0

08002c10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <DMA2_Stream0_IRQHandler+0x10>)
 8002c16:	f001 f811 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000020c 	.word	0x2000020c

08002c24 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <DMA2_Stream1_IRQHandler+0x10>)
 8002c2a:	f001 f807 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000904 	.word	0x20000904

08002c38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c3c:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <DMA2_Stream2_IRQHandler+0x10>)
 8002c3e:	f000 fffd 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200007e4 	.word	0x200007e4

08002c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <SystemInit+0x20>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c56:	4a05      	ldr	r2, [pc, #20]	@ (8002c6c <SystemInit+0x20>)
 8002c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c74:	f7ff ffea 	bl	8002c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c78:	480c      	ldr	r0, [pc, #48]	@ (8002cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c7a:	490d      	ldr	r1, [pc, #52]	@ (8002cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c80:	e002      	b.n	8002c88 <LoopCopyDataInit>

08002c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c86:	3304      	adds	r3, #4

08002c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c8c:	d3f9      	bcc.n	8002c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c90:	4c0a      	ldr	r4, [pc, #40]	@ (8002cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c94:	e001      	b.n	8002c9a <LoopFillZerobss>

08002c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c98:	3204      	adds	r2, #4

08002c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c9c:	d3fb      	bcc.n	8002c96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f007 fc6d 	bl	800a57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7fe fa91 	bl	80011c8 <main>
  bx  lr    
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002cb4:	0800a868 	.word	0x0800a868
  ldr r2, =_sbss
 8002cb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002cbc:	2000554c 	.word	0x2000554c

08002cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC_IRQHandler>

08002cc2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd0:	b672      	cpsid	i
}
 8002cd2:	bf00      	nop
 8002cd4:	f7ff f924 	bl	8001f20 <Error_Handler>
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7a1b      	ldrb	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d905      	bls.n	8002cf0 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce4:	b672      	cpsid	i
}
 8002ce6:	bf00      	nop
 8002ce8:	f7ff f91a 	bl	8001f20 <Error_Handler>
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7a1b      	ldrb	r3, [r3, #8]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	b2d1      	uxtb	r1, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	7211      	strb	r1, [r2, #8]
 8002cfc:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cfe:	f3ef 8211 	mrs	r2, BASEPRI
 8002d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	60fa      	str	r2, [r7, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
 8002d38:	f7ff f8f2 	bl	8001f20 <Error_Handler>
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7a1b      	ldrb	r3, [r3, #8]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7a1b      	ldrb	r3, [r3, #8]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d905      	bls.n	8002d60 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	bf00      	nop
 8002d58:	f7ff f8e2 	bl	8001f20 <Error_Handler>
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a1b      	ldrb	r3, [r3, #8]
 8002d64:	461a      	mov	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d74:	bf00      	nop
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d8c:	b672      	cpsid	i
}
 8002d8e:	bf00      	nop
 8002d90:	f7ff f8c6 	bl	8001f20 <Error_Handler>
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff91 	bl	8002cc2 <stm32_lock_acquire>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002db6:	b672      	cpsid	i
}
 8002db8:	bf00      	nop
 8002dba:	f7ff f8b1 	bl	8001f20 <Error_Handler>
 8002dbe:	bf00      	nop
 8002dc0:	e7fd      	b.n	8002dbe <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ffae 	bl	8002d26 <stm32_lock_release>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e14 <HAL_Init+0x40>)
 8002dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <HAL_Init+0x40>)
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	@ (8002e14 <HAL_Init+0x40>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f000 fd72 	bl	80038e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e02:	200f      	movs	r0, #15
 8002e04:	f7ff fe24 	bl	8002a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e08:	f7ff f890 	bl	8001f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00

08002e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_IncTick+0x20>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000010 	.word	0x20000010
 8002e3c:	20000a24 	.word	0x20000a24

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000a24 	.word	0x20000a24

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff ffee 	bl	8002e40 <HAL_GetTick>
 8002e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d005      	beq.n	8002e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_Delay+0x44>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7e:	bf00      	nop
 8002e80:	f7ff ffde 	bl	8002e40 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f7      	bhi.n	8002e80 <HAL_Delay+0x28>
  {
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000010 	.word	0x20000010

08002ea0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e033      	b.n	8002f1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff f860 	bl	8001f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ee6:	f023 0302 	bic.w	r3, r3, #2
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 facc 	bl	8003490 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f0e:	e001      	b.n	8002f14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x22>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0eb      	b.n	8003122 <HAL_ADC_Start_DMA+0x1fa>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d018      	beq.n	8002f92 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f70:	4b6e      	ldr	r3, [pc, #440]	@ (800312c <HAL_ADC_Start_DMA+0x204>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6e      	ldr	r2, [pc, #440]	@ (8003130 <HAL_ADC_Start_DMA+0x208>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9a      	lsrs	r2, r3, #18
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f9      	bne.n	8002f86 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa0:	d107      	bne.n	8002fb2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fb0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f040 80a3 	bne.w	8003108 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003000:	d106      	bne.n	8003010 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f023 0206 	bic.w	r2, r3, #6
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
 800300e:	e002      	b.n	8003016 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800301e:	4b45      	ldr	r3, [pc, #276]	@ (8003134 <HAL_ADC_Start_DMA+0x20c>)
 8003020:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	4a44      	ldr	r2, [pc, #272]	@ (8003138 <HAL_ADC_Start_DMA+0x210>)
 8003028:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	4a43      	ldr	r2, [pc, #268]	@ (800313c <HAL_ADC_Start_DMA+0x214>)
 8003030:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	4a42      	ldr	r2, [pc, #264]	@ (8003140 <HAL_ADC_Start_DMA+0x218>)
 8003038:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003042:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003052:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003062:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	334c      	adds	r3, #76	@ 0x4c
 800306e:	4619      	mov	r1, r3
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f000 fd1a 	bl	8003aac <HAL_DMA_Start_IT>
 8003078:	4603      	mov	r3, r0
 800307a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2b00      	cmp	r3, #0
 8003086:	d12a      	bne.n	80030de <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2d      	ldr	r2, [pc, #180]	@ (8003144 <HAL_ADC_Start_DMA+0x21c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d015      	beq.n	80030be <HAL_ADC_Start_DMA+0x196>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2c      	ldr	r2, [pc, #176]	@ (8003148 <HAL_ADC_Start_DMA+0x220>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d105      	bne.n	80030a8 <HAL_ADC_Start_DMA+0x180>
 800309c:	4b25      	ldr	r3, [pc, #148]	@ (8003134 <HAL_ADC_Start_DMA+0x20c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a27      	ldr	r2, [pc, #156]	@ (800314c <HAL_ADC_Start_DMA+0x224>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d136      	bne.n	8003120 <HAL_ADC_Start_DMA+0x1f8>
 80030b2:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <HAL_ADC_Start_DMA+0x20c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d130      	bne.n	8003120 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d129      	bne.n	8003120 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	e020      	b.n	8003120 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_ADC_Start_DMA+0x21c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d11b      	bne.n	8003120 <HAL_ADC_Start_DMA+0x1f8>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d114      	bne.n	8003120 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	e00b      	b.n	8003120 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f043 0210 	orr.w	r2, r3, #16
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003120:	7ffb      	ldrb	r3, [r7, #31]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000008 	.word	0x20000008
 8003130:	431bde83 	.word	0x431bde83
 8003134:	40012300 	.word	0x40012300
 8003138:	08003689 	.word	0x08003689
 800313c:	08003743 	.word	0x08003743
 8003140:	0800375f 	.word	0x0800375f
 8003144:	40012000 	.word	0x40012000
 8003148:	40012100 	.word	0x40012100
 800314c:	40012200 	.word	0x40012200

08003150 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADC_Stop_DMA+0x1a>
 8003166:	2302      	movs	r3, #2
 8003168:	e048      	b.n	80031fc <HAL_ADC_Stop_DMA+0xac>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d130      	bne.n	80031f2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800319e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d10f      	bne.n	80031ce <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fcd2 	bl	8003b5c <HAL_DMA_Abort>
 80031b8:	4603      	mov	r3, r0
 80031ba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80031dc:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x1c>
 8003244:	2302      	movs	r3, #2
 8003246:	e113      	b.n	8003470 <HAL_ADC_ConfigChannel+0x244>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b09      	cmp	r3, #9
 8003256:	d925      	bls.n	80032a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68d9      	ldr	r1, [r3, #12]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	3b1e      	subs	r3, #30
 800326e:	2207      	movs	r2, #7
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43da      	mvns	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	400a      	ands	r2, r1
 800327c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68d9      	ldr	r1, [r3, #12]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	4618      	mov	r0, r3
 8003290:	4603      	mov	r3, r0
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4403      	add	r3, r0
 8003296:	3b1e      	subs	r3, #30
 8003298:	409a      	lsls	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	e022      	b.n	80032ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6919      	ldr	r1, [r3, #16]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	2207      	movs	r2, #7
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6919      	ldr	r1, [r3, #16]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4618      	mov	r0, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4403      	add	r3, r0
 80032e0:	409a      	lsls	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d824      	bhi.n	800333c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	3b05      	subs	r3, #5
 8003304:	221f      	movs	r2, #31
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43da      	mvns	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	400a      	ands	r2, r1
 8003312:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	4618      	mov	r0, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	3b05      	subs	r3, #5
 800332e:	fa00 f203 	lsl.w	r2, r0, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	635a      	str	r2, [r3, #52]	@ 0x34
 800333a:	e04c      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d824      	bhi.n	800338e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	3b23      	subs	r3, #35	@ 0x23
 8003356:	221f      	movs	r2, #31
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43da      	mvns	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	400a      	ands	r2, r1
 8003364:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	4618      	mov	r0, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	3b23      	subs	r3, #35	@ 0x23
 8003380:	fa00 f203 	lsl.w	r2, r0, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	631a      	str	r2, [r3, #48]	@ 0x30
 800338c:	e023      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	3b41      	subs	r3, #65	@ 0x41
 80033a0:	221f      	movs	r2, #31
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	400a      	ands	r2, r1
 80033ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	3b41      	subs	r3, #65	@ 0x41
 80033ca:	fa00 f203 	lsl.w	r2, r0, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033d6:	4b29      	ldr	r3, [pc, #164]	@ (800347c <HAL_ADC_ConfigChannel+0x250>)
 80033d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a28      	ldr	r2, [pc, #160]	@ (8003480 <HAL_ADC_ConfigChannel+0x254>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10f      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x1d8>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b12      	cmp	r3, #18
 80033ea:	d10b      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <HAL_ADC_ConfigChannel+0x254>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d12b      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x23a>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1c      	ldr	r2, [pc, #112]	@ (8003484 <HAL_ADC_ConfigChannel+0x258>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <HAL_ADC_ConfigChannel+0x1f4>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b11      	cmp	r3, #17
 800341e:	d122      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a11      	ldr	r2, [pc, #68]	@ (8003484 <HAL_ADC_ConfigChannel+0x258>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d111      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003442:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_ADC_ConfigChannel+0x25c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a11      	ldr	r2, [pc, #68]	@ (800348c <HAL_ADC_ConfigChannel+0x260>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	0c9a      	lsrs	r2, r3, #18
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003458:	e002      	b.n	8003460 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	3b01      	subs	r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f9      	bne.n	800345a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40012300 	.word	0x40012300
 8003480:	40012000 	.word	0x40012000
 8003484:	10000012 	.word	0x10000012
 8003488:	20000008 	.word	0x20000008
 800348c:	431bde83 	.word	0x431bde83

08003490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003498:	4b79      	ldr	r3, [pc, #484]	@ (8003680 <ADC_Init+0x1f0>)
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	021a      	lsls	r2, r3, #8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80034e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800350a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6899      	ldr	r1, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	4a58      	ldr	r2, [pc, #352]	@ (8003684 <ADC_Init+0x1f4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d022      	beq.n	800356e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6899      	ldr	r1, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	e00f      	b.n	800358e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800357c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800358c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0202 	bic.w	r2, r2, #2
 800359c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6899      	ldr	r1, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	7e1b      	ldrb	r3, [r3, #24]
 80035a8:	005a      	lsls	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80035da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	3b01      	subs	r3, #1
 80035e8:	035a      	lsls	r2, r3, #13
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	e007      	b.n	8003604 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003602:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	3b01      	subs	r3, #1
 8003620:	051a      	lsls	r2, r3, #20
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6899      	ldr	r1, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003646:	025a      	lsls	r2, r3, #9
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800365e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	029a      	lsls	r2, r3, #10
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40012300 	.word	0x40012300
 8003684:	0f000001 	.word	0x0f000001

08003688 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d13c      	bne.n	800371c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d12b      	bne.n	8003714 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d127      	bne.n	8003714 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d119      	bne.n	8003714 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0220 	bic.w	r2, r2, #32
 80036ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	f043 0201 	orr.w	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7fd fd47 	bl	80011a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800371a:	e00e      	b.n	800373a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fd75 	bl	8003218 <HAL_ADC_ErrorCallback>
}
 800372e:	e004      	b.n	800373a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff fd57 	bl	8003204 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	@ 0x40
 8003770:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	f043 0204 	orr.w	r2, r3, #4
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff fd4a 	bl	8003218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800379c:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <__NVIC_SetPriorityGrouping+0x44>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037a8:	4013      	ands	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037be:	4a04      	ldr	r2, [pc, #16]	@ (80037d0 <__NVIC_SetPriorityGrouping+0x44>)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	60d3      	str	r3, [r2, #12]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d8:	4b04      	ldr	r3, [pc, #16]	@ (80037ec <__NVIC_GetPriorityGrouping+0x18>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f003 0307 	and.w	r3, r3, #7
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	db0b      	blt.n	800381a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	4907      	ldr	r1, [pc, #28]	@ (8003828 <__NVIC_EnableIRQ+0x38>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2001      	movs	r0, #1
 8003812:	fa00 f202 	lsl.w	r2, r0, r2
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000e100 	.word	0xe000e100

0800382c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	6039      	str	r1, [r7, #0]
 8003836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383c:	2b00      	cmp	r3, #0
 800383e:	db0a      	blt.n	8003856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	490c      	ldr	r1, [pc, #48]	@ (8003878 <__NVIC_SetPriority+0x4c>)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	0112      	lsls	r2, r2, #4
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	440b      	add	r3, r1
 8003850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003854:	e00a      	b.n	800386c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4908      	ldr	r1, [pc, #32]	@ (800387c <__NVIC_SetPriority+0x50>)
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	3b04      	subs	r3, #4
 8003864:	0112      	lsls	r2, r2, #4
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	440b      	add	r3, r1
 800386a:	761a      	strb	r2, [r3, #24]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000e100 	.word	0xe000e100
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003880:	b480      	push	{r7}
 8003882:	b089      	sub	sp, #36	@ 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f1c3 0307 	rsb	r3, r3, #7
 800389a:	2b04      	cmp	r3, #4
 800389c:	bf28      	it	cs
 800389e:	2304      	movcs	r3, #4
 80038a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2b06      	cmp	r3, #6
 80038a8:	d902      	bls.n	80038b0 <NVIC_EncodePriority+0x30>
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3b03      	subs	r3, #3
 80038ae:	e000      	b.n	80038b2 <NVIC_EncodePriority+0x32>
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43da      	mvns	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	401a      	ands	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c8:	f04f 31ff 	mov.w	r1, #4294967295
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa01 f303 	lsl.w	r3, r1, r3
 80038d2:	43d9      	mvns	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d8:	4313      	orrs	r3, r2
         );
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3724      	adds	r7, #36	@ 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff4c 	bl	800378c <__NVIC_SetPriorityGrouping>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800390e:	f7ff ff61 	bl	80037d4 <__NVIC_GetPriorityGrouping>
 8003912:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f7ff ffb1 	bl	8003880 <NVIC_EncodePriority>
 800391e:	4602      	mov	r2, r0
 8003920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff ff80 	bl	800382c <__NVIC_SetPriority>
}
 800392c:	bf00      	nop
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ff54 	bl	80037f0 <__NVIC_EnableIRQ>
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff fa70 	bl	8002e40 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e099      	b.n	8003aa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800398c:	e00f      	b.n	80039ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800398e:	f7ff fa57 	bl	8002e40 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b05      	cmp	r3, #5
 800399a:	d908      	bls.n	80039ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e078      	b.n	8003aa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e8      	bne.n	800398e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4b38      	ldr	r3, [pc, #224]	@ (8003aa8 <HAL_DMA_Init+0x158>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d107      	bne.n	8003a18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	4313      	orrs	r3, r2
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0307 	bic.w	r3, r3, #7
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d117      	bne.n	8003a72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fadf 	bl	8004018 <DMA_CheckFifoParam>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2240      	movs	r2, #64	@ 0x40
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e016      	b.n	8003aa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa96 	bl	8003fac <DMA_CalcBaseAndBitshift>
 8003a80:	4603      	mov	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	223f      	movs	r2, #63	@ 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	f010803f 	.word	0xf010803f

08003aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Start_IT+0x26>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e040      	b.n	8003b54 <HAL_DMA_Start_IT+0xa8>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d12f      	bne.n	8003b46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fa28 	bl	8003f50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b04:	223f      	movs	r2, #63	@ 0x3f
 8003b06:	409a      	lsls	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0216 	orr.w	r2, r2, #22
 8003b1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e005      	b.n	8003b52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b6a:	f7ff f969 	bl	8002e40 <HAL_GetTick>
 8003b6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d008      	beq.n	8003b8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2280      	movs	r2, #128	@ 0x80
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e052      	b.n	8003c34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0216 	bic.w	r2, r2, #22
 8003b9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_DMA_Abort+0x62>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0208 	bic.w	r2, r2, #8
 8003bcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bde:	e013      	b.n	8003c08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003be0:	f7ff f92e 	bl	8002e40 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d90c      	bls.n	8003c08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e015      	b.n	8003c34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e4      	bne.n	8003be0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1a:	223f      	movs	r2, #63	@ 0x3f
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c48:	4b8e      	ldr	r3, [pc, #568]	@ (8003e84 <HAL_DMA_IRQHandler+0x248>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8003e88 <HAL_DMA_IRQHandler+0x24c>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	2208      	movs	r2, #8
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01a      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	2208      	movs	r2, #8
 8003c96:	409a      	lsls	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d012      	beq.n	8003cde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	f043 0202 	orr.w	r2, r3, #2
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d012      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d00:	2204      	movs	r2, #4
 8003d02:	409a      	lsls	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	2210      	movs	r2, #16
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d043      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d03c      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	2210      	movs	r2, #16
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d108      	bne.n	8003d6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d024      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
 8003d6a:	e01f      	b.n	8003dac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01b      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
 8003d7c:	e016      	b.n	8003dac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d107      	bne.n	8003d9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0208 	bic.w	r2, r2, #8
 8003d9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	2220      	movs	r2, #32
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 808f 	beq.w	8003edc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8087 	beq.w	8003edc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d136      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0216 	bic.w	r2, r2, #22
 8003df4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_DMA_IRQHandler+0x1da>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0208 	bic.w	r2, r2, #8
 8003e24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	223f      	movs	r2, #63	@ 0x3f
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d07e      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
        }
        return;
 8003e52:	e079      	b.n	8003f48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01d      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d031      	beq.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
 8003e80:	e02c      	b.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
 8003e82:	bf00      	nop
 8003e84:	20000008 	.word	0x20000008
 8003e88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d023      	beq.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
 8003e9c:	e01e      	b.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10f      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0210 	bic.w	r2, r2, #16
 8003eba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d032      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d022      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d307      	bcc.n	8003f24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f2      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x2cc>
 8003f22:	e000      	b.n	8003f26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
 8003f46:	e000      	b.n	8003f4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f48:	bf00      	nop
    }
  }
}
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b40      	cmp	r3, #64	@ 0x40
 8003f7c:	d108      	bne.n	8003f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f8e:	e007      	b.n	8003fa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3b10      	subs	r3, #16
 8003fbc:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <DMA_CalcBaseAndBitshift+0x64>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fc6:	4a13      	ldr	r2, [pc, #76]	@ (8004014 <DMA_CalcBaseAndBitshift+0x68>)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d909      	bls.n	8003fee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fec:	e007      	b.n	8003ffe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	aaaaaaab 	.word	0xaaaaaaab
 8004014:	0800a850 	.word	0x0800a850

08004018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11f      	bne.n	8004072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d856      	bhi.n	80040e6 <DMA_CheckFifoParam+0xce>
 8004038:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <DMA_CheckFifoParam+0x28>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004051 	.word	0x08004051
 8004044:	08004063 	.word	0x08004063
 8004048:	08004051 	.word	0x08004051
 800404c:	080040e7 	.word	0x080040e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d046      	beq.n	80040ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004060:	e043      	b.n	80040ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800406a:	d140      	bne.n	80040ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e03d      	b.n	80040ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407a:	d121      	bne.n	80040c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d837      	bhi.n	80040f2 <DMA_CheckFifoParam+0xda>
 8004082:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <DMA_CheckFifoParam+0x70>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	08004099 	.word	0x08004099
 800408c:	0800409f 	.word	0x0800409f
 8004090:	08004099 	.word	0x08004099
 8004094:	080040b1 	.word	0x080040b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e030      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d025      	beq.n	80040f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ae:	e022      	b.n	80040f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040b8:	d11f      	bne.n	80040fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040be:	e01c      	b.n	80040fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d903      	bls.n	80040ce <DMA_CheckFifoParam+0xb6>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040cc:	e018      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
      break;
 80040d2:	e015      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e00b      	b.n	80040fe <DMA_CheckFifoParam+0xe6>
      break;
 80040e6:	bf00      	nop
 80040e8:	e00a      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e008      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e006      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;   
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	@ 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004122:	2300      	movs	r3, #0
 8004124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	e177      	b.n	800441c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800412c:	2201      	movs	r2, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	429a      	cmp	r2, r3
 8004146:	f040 8166 	bne.w	8004416 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d005      	beq.n	8004162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415e:	2b02      	cmp	r3, #2
 8004160:	d130      	bne.n	80041c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004198:	2201      	movs	r2, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0201 	and.w	r2, r3, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d017      	beq.n	8004200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2203      	movs	r2, #3
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d123      	bne.n	8004254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	08da      	lsrs	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3208      	adds	r2, #8
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	220f      	movs	r2, #15
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	08da      	lsrs	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3208      	adds	r2, #8
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0203 	and.w	r2, r3, #3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80c0 	beq.w	8004416 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	4b66      	ldr	r3, [pc, #408]	@ (8004434 <HAL_GPIO_Init+0x324>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	4a65      	ldr	r2, [pc, #404]	@ (8004434 <HAL_GPIO_Init+0x324>)
 80042a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042a6:	4b63      	ldr	r3, [pc, #396]	@ (8004434 <HAL_GPIO_Init+0x324>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042b2:	4a61      	ldr	r2, [pc, #388]	@ (8004438 <HAL_GPIO_Init+0x328>)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	220f      	movs	r2, #15
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a58      	ldr	r2, [pc, #352]	@ (800443c <HAL_GPIO_Init+0x32c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d037      	beq.n	800434e <HAL_GPIO_Init+0x23e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a57      	ldr	r2, [pc, #348]	@ (8004440 <HAL_GPIO_Init+0x330>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d031      	beq.n	800434a <HAL_GPIO_Init+0x23a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a56      	ldr	r2, [pc, #344]	@ (8004444 <HAL_GPIO_Init+0x334>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d02b      	beq.n	8004346 <HAL_GPIO_Init+0x236>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a55      	ldr	r2, [pc, #340]	@ (8004448 <HAL_GPIO_Init+0x338>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d025      	beq.n	8004342 <HAL_GPIO_Init+0x232>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a54      	ldr	r2, [pc, #336]	@ (800444c <HAL_GPIO_Init+0x33c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01f      	beq.n	800433e <HAL_GPIO_Init+0x22e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a53      	ldr	r2, [pc, #332]	@ (8004450 <HAL_GPIO_Init+0x340>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d019      	beq.n	800433a <HAL_GPIO_Init+0x22a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a52      	ldr	r2, [pc, #328]	@ (8004454 <HAL_GPIO_Init+0x344>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_GPIO_Init+0x226>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a51      	ldr	r2, [pc, #324]	@ (8004458 <HAL_GPIO_Init+0x348>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00d      	beq.n	8004332 <HAL_GPIO_Init+0x222>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a50      	ldr	r2, [pc, #320]	@ (800445c <HAL_GPIO_Init+0x34c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <HAL_GPIO_Init+0x21e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a4f      	ldr	r2, [pc, #316]	@ (8004460 <HAL_GPIO_Init+0x350>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_GPIO_Init+0x21a>
 8004326:	2309      	movs	r3, #9
 8004328:	e012      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800432a:	230a      	movs	r3, #10
 800432c:	e010      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800432e:	2308      	movs	r3, #8
 8004330:	e00e      	b.n	8004350 <HAL_GPIO_Init+0x240>
 8004332:	2307      	movs	r3, #7
 8004334:	e00c      	b.n	8004350 <HAL_GPIO_Init+0x240>
 8004336:	2306      	movs	r3, #6
 8004338:	e00a      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800433a:	2305      	movs	r3, #5
 800433c:	e008      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800433e:	2304      	movs	r3, #4
 8004340:	e006      	b.n	8004350 <HAL_GPIO_Init+0x240>
 8004342:	2303      	movs	r3, #3
 8004344:	e004      	b.n	8004350 <HAL_GPIO_Init+0x240>
 8004346:	2302      	movs	r3, #2
 8004348:	e002      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800434e:	2300      	movs	r3, #0
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	f002 0203 	and.w	r2, r2, #3
 8004356:	0092      	lsls	r2, r2, #2
 8004358:	4093      	lsls	r3, r2
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004360:	4935      	ldr	r1, [pc, #212]	@ (8004438 <HAL_GPIO_Init+0x328>)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	3302      	adds	r3, #2
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800436e:	4b3d      	ldr	r3, [pc, #244]	@ (8004464 <HAL_GPIO_Init+0x354>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004392:	4a34      	ldr	r2, [pc, #208]	@ (8004464 <HAL_GPIO_Init+0x354>)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004398:	4b32      	ldr	r3, [pc, #200]	@ (8004464 <HAL_GPIO_Init+0x354>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043bc:	4a29      	ldr	r2, [pc, #164]	@ (8004464 <HAL_GPIO_Init+0x354>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043c2:	4b28      	ldr	r3, [pc, #160]	@ (8004464 <HAL_GPIO_Init+0x354>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004464 <HAL_GPIO_Init+0x354>)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <HAL_GPIO_Init+0x354>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004410:	4a14      	ldr	r2, [pc, #80]	@ (8004464 <HAL_GPIO_Init+0x354>)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3301      	adds	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b0f      	cmp	r3, #15
 8004420:	f67f ae84 	bls.w	800412c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3724      	adds	r7, #36	@ 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	40013800 	.word	0x40013800
 800443c:	40020000 	.word	0x40020000
 8004440:	40020400 	.word	0x40020400
 8004444:	40020800 	.word	0x40020800
 8004448:	40020c00 	.word	0x40020c00
 800444c:	40021000 	.word	0x40021000
 8004450:	40021400 	.word	0x40021400
 8004454:	40021800 	.word	0x40021800
 8004458:	40021c00 	.word	0x40021c00
 800445c:	40022000 	.word	0x40022000
 8004460:	40022400 	.word	0x40022400
 8004464:	40013c00 	.word	0x40013c00

08004468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
 8004474:	4613      	mov	r3, r2
 8004476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004478:	787b      	ldrb	r3, [r7, #1]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800447e:	887a      	ldrh	r2, [r7, #2]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004484:	e003      	b.n	800448e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004486:	887b      	ldrh	r3, [r7, #2]
 8004488:	041a      	lsls	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	619a      	str	r2, [r3, #24]
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e267      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d075      	beq.n	80045a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ba:	4b88      	ldr	r3, [pc, #544]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d00c      	beq.n	80044e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c6:	4b85      	ldr	r3, [pc, #532]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d112      	bne.n	80044f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d2:	4b82      	ldr	r3, [pc, #520]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044de:	d10b      	bne.n	80044f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e0:	4b7e      	ldr	r3, [pc, #504]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d05b      	beq.n	80045a4 <HAL_RCC_OscConfig+0x108>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d157      	bne.n	80045a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e242      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004500:	d106      	bne.n	8004510 <HAL_RCC_OscConfig+0x74>
 8004502:	4b76      	ldr	r3, [pc, #472]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a75      	ldr	r2, [pc, #468]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e01d      	b.n	800454c <HAL_RCC_OscConfig+0xb0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x98>
 800451a:	4b70      	ldr	r3, [pc, #448]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6f      	ldr	r2, [pc, #444]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	4b6d      	ldr	r3, [pc, #436]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6c      	ldr	r2, [pc, #432]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e00b      	b.n	800454c <HAL_RCC_OscConfig+0xb0>
 8004534:	4b69      	ldr	r3, [pc, #420]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a68      	ldr	r2, [pc, #416]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800453a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b66      	ldr	r3, [pc, #408]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a65      	ldr	r2, [pc, #404]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d013      	beq.n	800457c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe fc74 	bl	8002e40 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fe fc70 	bl	8002e40 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	@ 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e207      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	4b5b      	ldr	r3, [pc, #364]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0xc0>
 800457a:	e014      	b.n	80045a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fe fc60 	bl	8002e40 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7fe fc5c 	bl	8002e40 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	@ 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1f3      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	4b51      	ldr	r3, [pc, #324]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0xe8>
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d063      	beq.n	800467a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b2:	4b4a      	ldr	r3, [pc, #296]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045be:	4b47      	ldr	r3, [pc, #284]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d11c      	bne.n	8004604 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ca:	4b44      	ldr	r3, [pc, #272]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d116      	bne.n	8004604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_RCC_OscConfig+0x152>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e1c7      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ee:	4b3b      	ldr	r3, [pc, #236]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4937      	ldr	r1, [pc, #220]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	e03a      	b.n	800467a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d020      	beq.n	800464e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800460c:	4b34      	ldr	r3, [pc, #208]	@ (80046e0 <HAL_RCC_OscConfig+0x244>)
 800460e:	2201      	movs	r2, #1
 8004610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fe fc15 	bl	8002e40 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461a:	f7fe fc11 	bl	8002e40 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e1a8      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b28      	ldr	r3, [pc, #160]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4925      	ldr	r1, [pc, #148]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]
 800464c:	e015      	b.n	800467a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464e:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <HAL_RCC_OscConfig+0x244>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe fbf4 	bl	8002e40 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465c:	f7fe fbf0 	bl	8002e40 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e187      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d036      	beq.n	80046f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468e:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <HAL_RCC_OscConfig+0x248>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fe fbd4 	bl	8002e40 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fe fbd0 	bl	8002e40 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e167      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x200>
 80046ba:	e01b      	b.n	80046f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046bc:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <HAL_RCC_OscConfig+0x248>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fe fbbd 	bl	8002e40 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	e00e      	b.n	80046e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ca:	f7fe fbb9 	bl	8002e40 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d907      	bls.n	80046e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e150      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	42470000 	.word	0x42470000
 80046e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e8:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ea      	bne.n	80046ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8097 	beq.w	8004830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004706:	4b81      	ldr	r3, [pc, #516]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10f      	bne.n	8004732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	4b7d      	ldr	r3, [pc, #500]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	4a7c      	ldr	r2, [pc, #496]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	@ 0x40
 8004722:	4b7a      	ldr	r3, [pc, #488]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004732:	4b77      	ldr	r3, [pc, #476]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d118      	bne.n	8004770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473e:	4b74      	ldr	r3, [pc, #464]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a73      	ldr	r2, [pc, #460]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474a:	f7fe fb79 	bl	8002e40 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fe fb75 	bl	8002e40 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e10c      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	4b6a      	ldr	r3, [pc, #424]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x2ea>
 8004778:	4b64      	ldr	r3, [pc, #400]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4a63      	ldr	r2, [pc, #396]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	@ 0x70
 8004784:	e01c      	b.n	80047c0 <HAL_RCC_OscConfig+0x324>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b05      	cmp	r3, #5
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x30c>
 800478e:	4b5f      	ldr	r3, [pc, #380]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	4a5e      	ldr	r2, [pc, #376]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	6713      	str	r3, [r2, #112]	@ 0x70
 800479a:	4b5c      	ldr	r3, [pc, #368]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	4a5b      	ldr	r2, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0x324>
 80047a8:	4b58      	ldr	r3, [pc, #352]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	4a57      	ldr	r2, [pc, #348]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b4:	4b55      	ldr	r3, [pc, #340]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a54      	ldr	r2, [pc, #336]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 0304 	bic.w	r3, r3, #4
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d015      	beq.n	80047f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fe fb3a 	bl	8002e40 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fe fb36 	bl	8002e40 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0cb      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e6:	4b49      	ldr	r3, [pc, #292]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ee      	beq.n	80047d0 <HAL_RCC_OscConfig+0x334>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f4:	f7fe fb24 	bl	8002e40 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fe fb20 	bl	8002e40 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0b5      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004812:	4b3e      	ldr	r3, [pc, #248]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ee      	bne.n	80047fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800481e:	7dfb      	ldrb	r3, [r7, #23]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004824:	4b39      	ldr	r3, [pc, #228]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	4a38      	ldr	r2, [pc, #224]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800482a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800482e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80a1 	beq.w	800497c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483a:	4b34      	ldr	r3, [pc, #208]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b08      	cmp	r3, #8
 8004844:	d05c      	beq.n	8004900 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d141      	bne.n	80048d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fe faf4 	bl	8002e40 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fe faf0 	bl	8002e40 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e087      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	4b27      	ldr	r3, [pc, #156]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	491b      	ldr	r1, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fe fac9 	bl	8002e40 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fe fac5 	bl	8002e40 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e05c      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x416>
 80048d0:	e054      	b.n	800497c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fe fab2 	bl	8002e40 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fe faae 	bl	8002e40 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e045      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x444>
 80048fe:	e03d      	b.n	800497c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e038      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
 800490c:	40023800 	.word	0x40023800
 8004910:	40007000 	.word	0x40007000
 8004914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004918:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <HAL_RCC_OscConfig+0x4ec>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d028      	beq.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d121      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d11a      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800494e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004950:	4293      	cmp	r3, r2
 8004952:	d111      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	3b01      	subs	r3, #1
 8004962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800

0800498c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0cc      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b68      	ldr	r3, [pc, #416]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d90c      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b65      	ldr	r3, [pc, #404]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b63      	ldr	r3, [pc, #396]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0b8      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e0:	4b59      	ldr	r3, [pc, #356]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a58      	ldr	r2, [pc, #352]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f8:	4b53      	ldr	r3, [pc, #332]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a52      	ldr	r2, [pc, #328]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a04:	4b50      	ldr	r3, [pc, #320]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	494d      	ldr	r1, [pc, #308]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d044      	beq.n	8004aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	4b47      	ldr	r3, [pc, #284]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d119      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e067      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6a:	4b37      	ldr	r3, [pc, #220]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 0203 	bic.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4934      	ldr	r1, [pc, #208]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a7c:	f7fe f9e0 	bl	8002e40 <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a84:	f7fe f9dc 	bl	8002e40 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e04f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 020c 	and.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1eb      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aac:	4b25      	ldr	r3, [pc, #148]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d20c      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b22      	ldr	r3, [pc, #136]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b20      	ldr	r3, [pc, #128]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e032      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae0:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4916      	ldr	r1, [pc, #88]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afe:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	490e      	ldr	r1, [pc, #56]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b12:	f000 f82d 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b16:	4602      	mov	r2, r0
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	490a      	ldr	r1, [pc, #40]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	5ccb      	ldrb	r3, [r1, r3]
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b2e:	4b09      	ldr	r3, [pc, #36]	@ (8004b54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd ff8c 	bl	8002a50 <HAL_InitTick>

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023c00 	.word	0x40023c00
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	0800a838 	.word	0x0800a838
 8004b50:	20000008 	.word	0x20000008
 8004b54:	2000000c 	.word	0x2000000c

08004b58 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <HAL_RCC_EnableCSS+0x14>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	4247004c 	.word	0x4247004c

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b090      	sub	sp, #64	@ 0x40
 8004b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b88:	4b59      	ldr	r3, [pc, #356]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d00d      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	f200 80a1 	bhi.w	8004cdc <HAL_RCC_GetSysClockFreq+0x16c>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ba2:	e09b      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b53      	ldr	r3, [pc, #332]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ba8:	e09b      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bae:	e098      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bba:	4b4d      	ldr	r3, [pc, #308]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d028      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	099b      	lsrs	r3, r3, #6
 8004bcc:	2200      	movs	r2, #0
 8004bce:	623b      	str	r3, [r7, #32]
 8004bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bdc:	fb03 f201 	mul.w	r2, r3, r1
 8004be0:	2300      	movs	r3, #0
 8004be2:	fb00 f303 	mul.w	r3, r0, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	4a43      	ldr	r2, [pc, #268]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bea:	fba0 1202 	umull	r1, r2, r0, r2
 8004bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf0:	460a      	mov	r2, r1
 8004bf2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf6:	4413      	add	r3, r2
 8004bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	61fa      	str	r2, [r7, #28]
 8004c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c0a:	f7fb faf9 	bl	8000200 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4613      	mov	r3, r2
 8004c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c16:	e053      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c18:	4b35      	ldr	r3, [pc, #212]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	099b      	lsrs	r3, r3, #6
 8004c1e:	2200      	movs	r2, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	617a      	str	r2, [r7, #20]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c2a:	f04f 0b00 	mov.w	fp, #0
 8004c2e:	4652      	mov	r2, sl
 8004c30:	465b      	mov	r3, fp
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	0159      	lsls	r1, r3, #5
 8004c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c40:	0150      	lsls	r0, r2, #5
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	ebb2 080a 	subs.w	r8, r2, sl
 8004c4a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c62:	ebb2 0408 	subs.w	r4, r2, r8
 8004c66:	eb63 0509 	sbc.w	r5, r3, r9
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	00eb      	lsls	r3, r5, #3
 8004c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c78:	00e2      	lsls	r2, r4, #3
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	eb14 030a 	adds.w	r3, r4, sl
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	eb45 030b 	adc.w	r3, r5, fp
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c96:	4629      	mov	r1, r5
 8004c98:	028b      	lsls	r3, r1, #10
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	028a      	lsls	r2, r1, #10
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004caa:	2200      	movs	r2, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	60fa      	str	r2, [r7, #12]
 8004cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb4:	f7fb faa4 	bl	8000200 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3740      	adds	r7, #64	@ 0x40
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	00f42400 	.word	0x00f42400
 8004cf8:	018cba80 	.word	0x018cba80

08004cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d00:	4b03      	ldr	r3, [pc, #12]	@ (8004d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d02:	681b      	ldr	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000008 	.word	0x20000008

08004d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d18:	f7ff fff0 	bl	8004cfc <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0a9b      	lsrs	r3, r3, #10
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4903      	ldr	r1, [pc, #12]	@ (8004d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	0800a848 	.word	0x0800a848

08004d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d40:	f7ff ffdc 	bl	8004cfc <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0b5b      	lsrs	r3, r3, #13
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4903      	ldr	r1, [pc, #12]	@ (8004d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	0800a848 	.word	0x0800a848

08004d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	220f      	movs	r2, #15
 8004d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d74:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0203 	and.w	r2, r3, #3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d80:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	08db      	lsrs	r3, r3, #3
 8004d9e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004da6:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <HAL_RCC_GetClockConfig+0x60>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 020f 	and.w	r2, r3, #15
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	601a      	str	r2, [r3, #0]
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40023c00 	.word	0x40023c00

08004dc8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004dcc:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd4:	2b80      	cmp	r3, #128	@ 0x80
 8004dd6:	d104      	bne.n	8004de2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004dd8:	f000 f80a 	bl	8004df0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004ddc:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <HAL_RCC_NMI_IRQHandler+0x24>)
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	701a      	strb	r2, [r3, #0]
  }
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800
 8004dec:	4002380e 	.word	0x4002380e

08004df0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e07b      	b.n	8004f08 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d108      	bne.n	8004e2a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e20:	d009      	beq.n	8004e36 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	61da      	str	r2, [r3, #28]
 8004e28:	e005      	b.n	8004e36 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7fd f947 	bl	80020e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	f003 0104 	and.w	r1, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	f003 0210 	and.w	r2, r3, #16
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ef6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f20:	f7fd ff8e 	bl	8002e40 <HAL_GetTick>
 8004f24:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d001      	beq.n	8004f3a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
 8004f38:	e12a      	b.n	8005190 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_Transmit+0x36>
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e122      	b.n	8005190 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_SPI_Transmit+0x48>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e11b      	b.n	8005190 <HAL_SPI_Transmit+0x280>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2203      	movs	r2, #3
 8004f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	88fa      	ldrh	r2, [r7, #6]
 8004f7e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fa6:	d10f      	bne.n	8004fc8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b40      	cmp	r3, #64	@ 0x40
 8004fd4:	d007      	beq.n	8004fe6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fee:	d152      	bne.n	8005096 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_SPI_Transmit+0xee>
 8004ff8:	8b7b      	ldrh	r3, [r7, #26]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d145      	bne.n	800508a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005022:	e032      	b.n	800508a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d112      	bne.n	8005058 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	881a      	ldrh	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005042:	1c9a      	adds	r2, r3, #2
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005056:	e018      	b.n	800508a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005058:	f7fd fef2 	bl	8002e40 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d803      	bhi.n	8005070 <HAL_SPI_Transmit+0x160>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d102      	bne.n	8005076 <HAL_SPI_Transmit+0x166>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e082      	b.n	8005190 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1c7      	bne.n	8005024 <HAL_SPI_Transmit+0x114>
 8005094:	e053      	b.n	800513e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_Transmit+0x194>
 800509e:	8b7b      	ldrh	r3, [r7, #26]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d147      	bne.n	8005134 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	7812      	ldrb	r2, [r2, #0]
 80050b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050ca:	e033      	b.n	8005134 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d113      	bne.n	8005102 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005100:	e018      	b.n	8005134 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005102:	f7fd fe9d 	bl	8002e40 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d803      	bhi.n	800511a <HAL_SPI_Transmit+0x20a>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d102      	bne.n	8005120 <HAL_SPI_Transmit+0x210>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e02d      	b.n	8005190 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1c6      	bne.n	80050cc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fbd8 	bl	80058f8 <SPI_EndRxTxTransaction>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800518e:	2300      	movs	r3, #0
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
 80051b6:	e104      	b.n	80053c2 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_SPI_Receive+0x2c>
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0fc      	b.n	80053c2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051d0:	d112      	bne.n	80051f8 <HAL_SPI_Receive+0x60>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10e      	bne.n	80051f8 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2204      	movs	r2, #4
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051e2:	88fa      	ldrh	r2, [r7, #6]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	4613      	mov	r3, r2
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f8eb 	bl	80053ca <HAL_SPI_TransmitReceive>
 80051f4:	4603      	mov	r3, r0
 80051f6:	e0e4      	b.n	80053c2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051f8:	f7fd fe22 	bl	8002e40 <HAL_GetTick>
 80051fc:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_SPI_Receive+0x74>
 8005208:	2302      	movs	r3, #2
 800520a:	e0da      	b.n	80053c2 <HAL_SPI_Receive+0x22a>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2204      	movs	r2, #4
 8005218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	88fa      	ldrh	r2, [r7, #6]
 8005232:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800525a:	d10f      	bne.n	800527c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800526a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800527a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005286:	2b40      	cmp	r3, #64	@ 0x40
 8005288:	d007      	beq.n	800529a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005298:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d170      	bne.n	8005384 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052a2:	e035      	b.n	8005310 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d115      	bne.n	80052de <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f103 020c 	add.w	r2, r3, #12
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052dc:	e018      	b.n	8005310 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052de:	f7fd fdaf 	bl	8002e40 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d803      	bhi.n	80052f6 <HAL_SPI_Receive+0x15e>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d102      	bne.n	80052fc <HAL_SPI_Receive+0x164>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e058      	b.n	80053c2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1c4      	bne.n	80052a4 <HAL_SPI_Receive+0x10c>
 800531a:	e038      	b.n	800538e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d113      	bne.n	8005352 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	b292      	uxth	r2, r2
 8005336:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533c:	1c9a      	adds	r2, r3, #2
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005350:	e018      	b.n	8005384 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005352:	f7fd fd75 	bl	8002e40 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d803      	bhi.n	800536a <HAL_SPI_Receive+0x1d2>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d102      	bne.n	8005370 <HAL_SPI_Receive+0x1d8>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e01e      	b.n	80053c2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1c6      	bne.n	800531c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa4a 	bl	800582c <SPI_EndRxTransaction>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80053c0:	2300      	movs	r3, #0
  }
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b08a      	sub	sp, #40	@ 0x28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053d8:	2301      	movs	r3, #1
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053dc:	f7fd fd30 	bl	8002e40 <HAL_GetTick>
 80053e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80053f0:	887b      	ldrh	r3, [r7, #2]
 80053f2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053f4:	7ffb      	ldrb	r3, [r7, #31]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d00c      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x4a>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005400:	d106      	bne.n	8005410 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <HAL_SPI_TransmitReceive+0x46>
 800540a:	7ffb      	ldrb	r3, [r7, #31]
 800540c:	2b04      	cmp	r3, #4
 800540e:	d001      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
 8005412:	e17f      	b.n	8005714 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_SPI_TransmitReceive+0x5c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_SPI_TransmitReceive+0x5c>
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e174      	b.n	8005714 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_SPI_TransmitReceive+0x6e>
 8005434:	2302      	movs	r3, #2
 8005436:	e16d      	b.n	8005714 <HAL_SPI_TransmitReceive+0x34a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b04      	cmp	r3, #4
 800544a:	d003      	beq.n	8005454 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2205      	movs	r2, #5
 8005450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	887a      	ldrh	r2, [r7, #2]
 8005464:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	887a      	ldrh	r2, [r7, #2]
 800546a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	887a      	ldrh	r2, [r7, #2]
 8005476:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	887a      	ldrh	r2, [r7, #2]
 800547c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005494:	2b40      	cmp	r3, #64	@ 0x40
 8005496:	d007      	beq.n	80054a8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b0:	d17e      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0xf6>
 80054ba:	8afb      	ldrh	r3, [r7, #22]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d16c      	bne.n	800559a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c4:	881a      	ldrh	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d0:	1c9a      	adds	r2, r3, #2
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e4:	e059      	b.n	800559a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d11b      	bne.n	800552c <HAL_SPI_TransmitReceive+0x162>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d016      	beq.n	800552c <HAL_SPI_TransmitReceive+0x162>
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	2b01      	cmp	r3, #1
 8005502:	d113      	bne.n	800552c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	1c9a      	adds	r2, r3, #2
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b01      	cmp	r3, #1
 8005538:	d119      	bne.n	800556e <HAL_SPI_TransmitReceive+0x1a4>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d014      	beq.n	800556e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554e:	b292      	uxth	r2, r2
 8005550:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800556a:	2301      	movs	r3, #1
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800556e:	f7fd fc67 	bl	8002e40 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800557a:	429a      	cmp	r2, r3
 800557c:	d80d      	bhi.n	800559a <HAL_SPI_TransmitReceive+0x1d0>
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d009      	beq.n	800559a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e0bc      	b.n	8005714 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1a0      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x11c>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d19b      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x11c>
 80055ae:	e082      	b.n	80056b6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_SPI_TransmitReceive+0x1f4>
 80055b8:	8afb      	ldrh	r3, [r7, #22]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d171      	bne.n	80056a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e4:	e05d      	b.n	80056a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d11c      	bne.n	800562e <HAL_SPI_TransmitReceive+0x264>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <HAL_SPI_TransmitReceive+0x264>
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	2b01      	cmp	r3, #1
 8005602:	d114      	bne.n	800562e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d119      	bne.n	8005670 <HAL_SPI_TransmitReceive+0x2a6>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d014      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800566c:	2301      	movs	r3, #1
 800566e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005670:	f7fd fbe6 	bl	8002e40 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800567c:	429a      	cmp	r2, r3
 800567e:	d803      	bhi.n	8005688 <HAL_SPI_TransmitReceive+0x2be>
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d102      	bne.n	800568e <HAL_SPI_TransmitReceive+0x2c4>
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e038      	b.n	8005714 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d19c      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x21c>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d197      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056b6:	6a3a      	ldr	r2, [r7, #32]
 80056b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f91c 	bl	80058f8 <SPI_EndRxTxTransaction>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e01d      	b.n	8005714 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005712:	2300      	movs	r3, #0
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	3728      	adds	r7, #40	@ 0x28
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800572c:	f7fd fb88 	bl	8002e40 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	4413      	add	r3, r2
 800573a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800573c:	f7fd fb80 	bl	8002e40 <HAL_GetTick>
 8005740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005742:	4b39      	ldr	r3, [pc, #228]	@ (8005828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	015b      	lsls	r3, r3, #5
 8005748:	0d1b      	lsrs	r3, r3, #20
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	fb02 f303 	mul.w	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005752:	e055      	b.n	8005800 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d051      	beq.n	8005800 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800575c:	f7fd fb70 	bl	8002e40 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	429a      	cmp	r2, r3
 800576a:	d902      	bls.n	8005772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d13d      	bne.n	80057ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800578a:	d111      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005794:	d004      	beq.n	80057a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579e:	d107      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b8:	d10f      	bne.n	80057da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e018      	b.n	8005820 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	e002      	b.n	8005800 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4013      	ands	r3, r2
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	429a      	cmp	r2, r3
 800581c:	d19a      	bne.n	8005754 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000008 	.word	0x20000008

0800582c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005840:	d111      	bne.n	8005866 <SPI_EndRxTransaction+0x3a>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800584a:	d004      	beq.n	8005856 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005854:	d107      	bne.n	8005866 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005864:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800586e:	d12a      	bne.n	80058c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005878:	d012      	beq.n	80058a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2200      	movs	r2, #0
 8005882:	2180      	movs	r1, #128	@ 0x80
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ff49 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02d      	beq.n	80058ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e026      	b.n	80058ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2101      	movs	r1, #1
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff ff36 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d01a      	beq.n	80058ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e013      	b.n	80058ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2101      	movs	r1, #1
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff ff23 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e000      	b.n	80058ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2201      	movs	r2, #1
 800590c:	2102      	movs	r1, #2
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7ff ff04 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e032      	b.n	8005990 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800592a:	4b1b      	ldr	r3, [pc, #108]	@ (8005998 <SPI_EndRxTxTransaction+0xa0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1b      	ldr	r2, [pc, #108]	@ (800599c <SPI_EndRxTxTransaction+0xa4>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	0d5b      	lsrs	r3, r3, #21
 8005936:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005948:	d112      	bne.n	8005970 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2200      	movs	r2, #0
 8005952:	2180      	movs	r1, #128	@ 0x80
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff fee1 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d016      	beq.n	800598e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e00f      	b.n	8005990 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	3b01      	subs	r3, #1
 800597a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005986:	2b80      	cmp	r3, #128	@ 0x80
 8005988:	d0f2      	beq.n	8005970 <SPI_EndRxTxTransaction+0x78>
 800598a:	e000      	b.n	800598e <SPI_EndRxTxTransaction+0x96>
        break;
 800598c:	bf00      	nop
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000008 	.word	0x20000008
 800599c:	165e9f81 	.word	0x165e9f81

080059a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e041      	b.n	8005a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f839 	bl	8005a3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f000 f9c0 	bl	8005d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d001      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e04e      	b.n	8005b0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a23      	ldr	r2, [pc, #140]	@ (8005b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a96:	d01d      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1b      	ldr	r2, [pc, #108]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	@ (8005b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a18      	ldr	r2, [pc, #96]	@ (8005b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d111      	bne.n	8005af8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d010      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af6:	e007      	b.n	8005b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40000400 	.word	0x40000400
 8005b20:	40000800 	.word	0x40000800
 8005b24:	40000c00 	.word	0x40000c00
 8005b28:	40010400 	.word	0x40010400
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40001800 	.word	0x40001800

08005b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d020      	beq.n	8005b98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01b      	beq.n	8005b98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0202 	mvn.w	r2, #2
 8005b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8d2 	bl	8005d28 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8c4 	bl	8005d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f8d5 	bl	8005d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d020      	beq.n	8005be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01b      	beq.n	8005be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0204 	mvn.w	r2, #4
 8005bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f8ac 	bl	8005d28 <HAL_TIM_IC_CaptureCallback>
 8005bd0:	e005      	b.n	8005bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f89e 	bl	8005d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8af 	bl	8005d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d020      	beq.n	8005c30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01b      	beq.n	8005c30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0208 	mvn.w	r2, #8
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2204      	movs	r2, #4
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f886 	bl	8005d28 <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f878 	bl	8005d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f889 	bl	8005d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d020      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01b      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0210 	mvn.w	r2, #16
 8005c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2208      	movs	r2, #8
 8005c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f860 	bl	8005d28 <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f852 	bl	8005d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f863 	bl	8005d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0201 	mvn.w	r2, #1
 8005c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fc f92e 	bl	8001efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f900 	bl	8005ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f834 	bl	8005d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00c      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0220 	mvn.w	r2, #32
 8005d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8d2 	bl	8005eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a43      	ldr	r2, [pc, #268]	@ (8005e84 <TIM_Base_SetConfig+0x120>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d82:	d00f      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a40      	ldr	r2, [pc, #256]	@ (8005e88 <TIM_Base_SetConfig+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e8c <TIM_Base_SetConfig+0x128>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3e      	ldr	r2, [pc, #248]	@ (8005e90 <TIM_Base_SetConfig+0x12c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8005e94 <TIM_Base_SetConfig+0x130>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a32      	ldr	r2, [pc, #200]	@ (8005e84 <TIM_Base_SetConfig+0x120>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc4:	d027      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8005e88 <TIM_Base_SetConfig+0x124>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d023      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8005e8c <TIM_Base_SetConfig+0x128>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01f      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005e90 <TIM_Base_SetConfig+0x12c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d01b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2c      	ldr	r2, [pc, #176]	@ (8005e94 <TIM_Base_SetConfig+0x130>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d017      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2b      	ldr	r2, [pc, #172]	@ (8005e98 <TIM_Base_SetConfig+0x134>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e9c <TIM_Base_SetConfig+0x138>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00f      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a29      	ldr	r2, [pc, #164]	@ (8005ea0 <TIM_Base_SetConfig+0x13c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a28      	ldr	r2, [pc, #160]	@ (8005ea4 <TIM_Base_SetConfig+0x140>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a27      	ldr	r2, [pc, #156]	@ (8005ea8 <TIM_Base_SetConfig+0x144>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a26      	ldr	r2, [pc, #152]	@ (8005eac <TIM_Base_SetConfig+0x148>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a0e      	ldr	r2, [pc, #56]	@ (8005e84 <TIM_Base_SetConfig+0x120>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <TIM_Base_SetConfig+0xf2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a10      	ldr	r2, [pc, #64]	@ (8005e94 <TIM_Base_SetConfig+0x130>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d103      	bne.n	8005e5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f043 0204 	orr.w	r2, r3, #4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	601a      	str	r2, [r3, #0]
}
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40010400 	.word	0x40010400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400
 8005ea0:	40014800 	.word	0x40014800
 8005ea4:	40001800 	.word	0x40001800
 8005ea8:	40001c00 	.word	0x40001c00
 8005eac:	40002000 	.word	0x40002000

08005eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e042      	b.n	8005f70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fc fa2e 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2224      	movs	r2, #36	@ 0x24
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 faa1 	bl	8006464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d112      	bne.n	8005fb8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_UART_Receive_DMA+0x26>
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e00b      	b.n	8005fba <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	461a      	mov	r2, r3
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f926 	bl	8006200 <UART_Start_Receive_DMA>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	e000      	b.n	8005fba <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b09c      	sub	sp, #112	@ 0x70
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d172      	bne.n	8006104 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800601e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006020:	2200      	movs	r2, #0
 8006022:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006036:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800603a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800603c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006044:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006046:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800604a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e5      	bne.n	8006024 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3314      	adds	r3, #20
 800605e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3314      	adds	r3, #20
 8006076:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006078:	647a      	str	r2, [r7, #68]	@ 0x44
 800607a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800607e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3314      	adds	r3, #20
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	623b      	str	r3, [r7, #32]
   return(result);
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80060a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3314      	adds	r3, #20
 80060aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80060ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e5      	bne.n	800608c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d119      	bne.n	8006104 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	60fb      	str	r3, [r7, #12]
   return(result);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0310 	bic.w	r3, r3, #16
 80060e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80060f0:	61fa      	str	r2, [r7, #28]
 80060f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	69b9      	ldr	r1, [r7, #24]
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	617b      	str	r3, [r7, #20]
   return(result);
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e5      	bne.n	80060d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006106:	2200      	movs	r2, #0
 8006108:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	2b01      	cmp	r3, #1
 8006110:	d106      	bne.n	8006120 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006116:	4619      	mov	r1, r3
 8006118:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800611a:	f7ff ff66 	bl	8005fea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800611e:	e002      	b.n	8006126 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006120:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006122:	f7fa ff63 	bl	8000fec <HAL_UART_RxCpltCallback>
}
 8006126:	bf00      	nop
 8006128:	3770      	adds	r7, #112	@ 0x70
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	2b01      	cmp	r3, #1
 8006148:	d108      	bne.n	800615c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff ff48 	bl	8005fea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800615a:	e002      	b.n	8006162 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff ff30 	bl	8005fc2 <HAL_UART_RxHalfCpltCallback>
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006186:	2b80      	cmp	r3, #128	@ 0x80
 8006188:	bf0c      	ite	eq
 800618a:	2301      	moveq	r3, #1
 800618c:	2300      	movne	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b21      	cmp	r3, #33	@ 0x21
 800619c:	d108      	bne.n	80061b0 <UART_DMAError+0x46>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80061aa:	68b8      	ldr	r0, [r7, #8]
 80061ac:	f000 f8ce 	bl	800634c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	bf0c      	ite	eq
 80061be:	2301      	moveq	r3, #1
 80061c0:	2300      	movne	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b22      	cmp	r3, #34	@ 0x22
 80061d0:	d108      	bne.n	80061e4 <UART_DMAError+0x7a>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80061de:	68b8      	ldr	r0, [r7, #8]
 80061e0:	f000 f8dc 	bl	800639c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e8:	f043 0210 	orr.w	r2, r3, #16
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f0:	68b8      	ldr	r0, [r7, #8]
 80061f2:	f7ff fef0 	bl	8005fd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b098      	sub	sp, #96	@ 0x60
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	4613      	mov	r3, r2
 800620c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	88fa      	ldrh	r2, [r7, #6]
 8006218:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2222      	movs	r2, #34	@ 0x22
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	4a44      	ldr	r2, [pc, #272]	@ (8006340 <UART_Start_Receive_DMA+0x140>)
 800622e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006234:	4a43      	ldr	r2, [pc, #268]	@ (8006344 <UART_Start_Receive_DMA+0x144>)
 8006236:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623c:	4a42      	ldr	r2, [pc, #264]	@ (8006348 <UART_Start_Receive_DMA+0x148>)
 800623e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006244:	2200      	movs	r2, #0
 8006246:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006248:	f107 0308 	add.w	r3, r7, #8
 800624c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	f7fd fc24 	bl	8003aac <HAL_DMA_Start_IT>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d008      	beq.n	800627c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2210      	movs	r2, #16
 800626e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e05d      	b.n	8006338 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d019      	beq.n	80062ce <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80062bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80062c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80062c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3314      	adds	r3, #20
 80062d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3314      	adds	r3, #20
 80062ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80062f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80062f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3314      	adds	r3, #20
 8006308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	617b      	str	r3, [r7, #20]
   return(result);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006318:	653b      	str	r3, [r7, #80]	@ 0x50
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3314      	adds	r3, #20
 8006320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006322:	627a      	str	r2, [r7, #36]	@ 0x24
 8006324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6a39      	ldr	r1, [r7, #32]
 8006328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e5      	bne.n	8006302 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3760      	adds	r7, #96	@ 0x60
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	08006003 	.word	0x08006003
 8006344:	0800612f 	.word	0x0800612f
 8006348:	0800616b 	.word	0x0800616b

0800634c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b089      	sub	sp, #36	@ 0x24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	330c      	adds	r3, #12
 800635a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	60bb      	str	r3, [r7, #8]
   return(result);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	61ba      	str	r2, [r7, #24]
 8006376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6979      	ldr	r1, [r7, #20]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	613b      	str	r3, [r7, #16]
   return(result);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006390:	bf00      	nop
 8006392:	3724      	adds	r7, #36	@ 0x24
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b095      	sub	sp, #84	@ 0x54
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3314      	adds	r3, #20
 80063de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3314      	adds	r3, #20
 80063f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e5      	bne.n	80063d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006410:	2b01      	cmp	r3, #1
 8006412:	d119      	bne.n	8006448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	60bb      	str	r3, [r7, #8]
   return(result);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f023 0310 	bic.w	r3, r3, #16
 800642a:	647b      	str	r3, [r7, #68]	@ 0x44
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006434:	61ba      	str	r2, [r7, #24]
 8006436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6979      	ldr	r1, [r7, #20]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	613b      	str	r3, [r7, #16]
   return(result);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e5      	bne.n	8006414 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006456:	bf00      	nop
 8006458:	3754      	adds	r7, #84	@ 0x54
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006468:	b0c0      	sub	sp, #256	@ 0x100
 800646a:	af00      	add	r7, sp, #0
 800646c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006480:	68d9      	ldr	r1, [r3, #12]
 8006482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	ea40 0301 	orr.w	r3, r0, r1
 800648c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800648e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	431a      	orrs	r2, r3
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80064bc:	f021 010c 	bic.w	r1, r1, #12
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064ca:	430b      	orrs	r3, r1
 80064cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064de:	6999      	ldr	r1, [r3, #24]
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	ea40 0301 	orr.w	r3, r0, r1
 80064ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4b8f      	ldr	r3, [pc, #572]	@ (8006730 <UART_SetConfig+0x2cc>)
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d005      	beq.n	8006504 <UART_SetConfig+0xa0>
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006734 <UART_SetConfig+0x2d0>)
 8006500:	429a      	cmp	r2, r3
 8006502:	d104      	bne.n	800650e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006504:	f7fe fc1a 	bl	8004d3c <HAL_RCC_GetPCLK2Freq>
 8006508:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800650c:	e003      	b.n	8006516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800650e:	f7fe fc01 	bl	8004d14 <HAL_RCC_GetPCLK1Freq>
 8006512:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006520:	f040 810c 	bne.w	800673c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006528:	2200      	movs	r2, #0
 800652a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800652e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006536:	4622      	mov	r2, r4
 8006538:	462b      	mov	r3, r5
 800653a:	1891      	adds	r1, r2, r2
 800653c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800653e:	415b      	adcs	r3, r3
 8006540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006546:	4621      	mov	r1, r4
 8006548:	eb12 0801 	adds.w	r8, r2, r1
 800654c:	4629      	mov	r1, r5
 800654e:	eb43 0901 	adc.w	r9, r3, r1
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800655e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006566:	4690      	mov	r8, r2
 8006568:	4699      	mov	r9, r3
 800656a:	4623      	mov	r3, r4
 800656c:	eb18 0303 	adds.w	r3, r8, r3
 8006570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006574:	462b      	mov	r3, r5
 8006576:	eb49 0303 	adc.w	r3, r9, r3
 800657a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800658a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800658e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006592:	460b      	mov	r3, r1
 8006594:	18db      	adds	r3, r3, r3
 8006596:	653b      	str	r3, [r7, #80]	@ 0x50
 8006598:	4613      	mov	r3, r2
 800659a:	eb42 0303 	adc.w	r3, r2, r3
 800659e:	657b      	str	r3, [r7, #84]	@ 0x54
 80065a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80065a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80065a8:	f7f9 fe2a 	bl	8000200 <__aeabi_uldivmod>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4b61      	ldr	r3, [pc, #388]	@ (8006738 <UART_SetConfig+0x2d4>)
 80065b2:	fba3 2302 	umull	r2, r3, r3, r2
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	011c      	lsls	r4, r3, #4
 80065ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80065c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80065cc:	4642      	mov	r2, r8
 80065ce:	464b      	mov	r3, r9
 80065d0:	1891      	adds	r1, r2, r2
 80065d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80065d4:	415b      	adcs	r3, r3
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065dc:	4641      	mov	r1, r8
 80065de:	eb12 0a01 	adds.w	sl, r2, r1
 80065e2:	4649      	mov	r1, r9
 80065e4:	eb43 0b01 	adc.w	fp, r3, r1
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065fc:	4692      	mov	sl, r2
 80065fe:	469b      	mov	fp, r3
 8006600:	4643      	mov	r3, r8
 8006602:	eb1a 0303 	adds.w	r3, sl, r3
 8006606:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800660a:	464b      	mov	r3, r9
 800660c:	eb4b 0303 	adc.w	r3, fp, r3
 8006610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006620:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006628:	460b      	mov	r3, r1
 800662a:	18db      	adds	r3, r3, r3
 800662c:	643b      	str	r3, [r7, #64]	@ 0x40
 800662e:	4613      	mov	r3, r2
 8006630:	eb42 0303 	adc.w	r3, r2, r3
 8006634:	647b      	str	r3, [r7, #68]	@ 0x44
 8006636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800663a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800663e:	f7f9 fddf 	bl	8000200 <__aeabi_uldivmod>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4611      	mov	r1, r2
 8006648:	4b3b      	ldr	r3, [pc, #236]	@ (8006738 <UART_SetConfig+0x2d4>)
 800664a:	fba3 2301 	umull	r2, r3, r3, r1
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	2264      	movs	r2, #100	@ 0x64
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	1acb      	subs	r3, r1, r3
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800665e:	4b36      	ldr	r3, [pc, #216]	@ (8006738 <UART_SetConfig+0x2d4>)
 8006660:	fba3 2302 	umull	r2, r3, r3, r2
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800666c:	441c      	add	r4, r3
 800666e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006672:	2200      	movs	r2, #0
 8006674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006678:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800667c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	1891      	adds	r1, r2, r2
 8006686:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006688:	415b      	adcs	r3, r3
 800668a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800668c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006690:	4641      	mov	r1, r8
 8006692:	1851      	adds	r1, r2, r1
 8006694:	6339      	str	r1, [r7, #48]	@ 0x30
 8006696:	4649      	mov	r1, r9
 8006698:	414b      	adcs	r3, r1
 800669a:	637b      	str	r3, [r7, #52]	@ 0x34
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80066a8:	4659      	mov	r1, fp
 80066aa:	00cb      	lsls	r3, r1, #3
 80066ac:	4651      	mov	r1, sl
 80066ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066b2:	4651      	mov	r1, sl
 80066b4:	00ca      	lsls	r2, r1, #3
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	4642      	mov	r2, r8
 80066be:	189b      	adds	r3, r3, r2
 80066c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066c4:	464b      	mov	r3, r9
 80066c6:	460a      	mov	r2, r1
 80066c8:	eb42 0303 	adc.w	r3, r2, r3
 80066cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066e4:	460b      	mov	r3, r1
 80066e6:	18db      	adds	r3, r3, r3
 80066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ea:	4613      	mov	r3, r2
 80066ec:	eb42 0303 	adc.w	r3, r2, r3
 80066f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066fa:	f7f9 fd81 	bl	8000200 <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4b0d      	ldr	r3, [pc, #52]	@ (8006738 <UART_SetConfig+0x2d4>)
 8006704:	fba3 1302 	umull	r1, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	2164      	movs	r1, #100	@ 0x64
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	3332      	adds	r3, #50	@ 0x32
 8006716:	4a08      	ldr	r2, [pc, #32]	@ (8006738 <UART_SetConfig+0x2d4>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f003 0207 	and.w	r2, r3, #7
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4422      	add	r2, r4
 800672a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800672c:	e106      	b.n	800693c <UART_SetConfig+0x4d8>
 800672e:	bf00      	nop
 8006730:	40011000 	.word	0x40011000
 8006734:	40011400 	.word	0x40011400
 8006738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800673c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006740:	2200      	movs	r2, #0
 8006742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800674a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800674e:	4642      	mov	r2, r8
 8006750:	464b      	mov	r3, r9
 8006752:	1891      	adds	r1, r2, r2
 8006754:	6239      	str	r1, [r7, #32]
 8006756:	415b      	adcs	r3, r3
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
 800675a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800675e:	4641      	mov	r1, r8
 8006760:	1854      	adds	r4, r2, r1
 8006762:	4649      	mov	r1, r9
 8006764:	eb43 0501 	adc.w	r5, r3, r1
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	00eb      	lsls	r3, r5, #3
 8006772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006776:	00e2      	lsls	r2, r4, #3
 8006778:	4614      	mov	r4, r2
 800677a:	461d      	mov	r5, r3
 800677c:	4643      	mov	r3, r8
 800677e:	18e3      	adds	r3, r4, r3
 8006780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006784:	464b      	mov	r3, r9
 8006786:	eb45 0303 	adc.w	r3, r5, r3
 800678a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800679a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067aa:	4629      	mov	r1, r5
 80067ac:	008b      	lsls	r3, r1, #2
 80067ae:	4621      	mov	r1, r4
 80067b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067b4:	4621      	mov	r1, r4
 80067b6:	008a      	lsls	r2, r1, #2
 80067b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80067bc:	f7f9 fd20 	bl	8000200 <__aeabi_uldivmod>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4b60      	ldr	r3, [pc, #384]	@ (8006948 <UART_SetConfig+0x4e4>)
 80067c6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	011c      	lsls	r4, r3, #4
 80067ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80067e0:	4642      	mov	r2, r8
 80067e2:	464b      	mov	r3, r9
 80067e4:	1891      	adds	r1, r2, r2
 80067e6:	61b9      	str	r1, [r7, #24]
 80067e8:	415b      	adcs	r3, r3
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067f0:	4641      	mov	r1, r8
 80067f2:	1851      	adds	r1, r2, r1
 80067f4:	6139      	str	r1, [r7, #16]
 80067f6:	4649      	mov	r1, r9
 80067f8:	414b      	adcs	r3, r1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006808:	4659      	mov	r1, fp
 800680a:	00cb      	lsls	r3, r1, #3
 800680c:	4651      	mov	r1, sl
 800680e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006812:	4651      	mov	r1, sl
 8006814:	00ca      	lsls	r2, r1, #3
 8006816:	4610      	mov	r0, r2
 8006818:	4619      	mov	r1, r3
 800681a:	4603      	mov	r3, r0
 800681c:	4642      	mov	r2, r8
 800681e:	189b      	adds	r3, r3, r2
 8006820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006824:	464b      	mov	r3, r9
 8006826:	460a      	mov	r2, r1
 8006828:	eb42 0303 	adc.w	r3, r2, r3
 800682c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	67bb      	str	r3, [r7, #120]	@ 0x78
 800683a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006848:	4649      	mov	r1, r9
 800684a:	008b      	lsls	r3, r1, #2
 800684c:	4641      	mov	r1, r8
 800684e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006852:	4641      	mov	r1, r8
 8006854:	008a      	lsls	r2, r1, #2
 8006856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800685a:	f7f9 fcd1 	bl	8000200 <__aeabi_uldivmod>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4611      	mov	r1, r2
 8006864:	4b38      	ldr	r3, [pc, #224]	@ (8006948 <UART_SetConfig+0x4e4>)
 8006866:	fba3 2301 	umull	r2, r3, r3, r1
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	2264      	movs	r2, #100	@ 0x64
 800686e:	fb02 f303 	mul.w	r3, r2, r3
 8006872:	1acb      	subs	r3, r1, r3
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	3332      	adds	r3, #50	@ 0x32
 8006878:	4a33      	ldr	r2, [pc, #204]	@ (8006948 <UART_SetConfig+0x4e4>)
 800687a:	fba2 2303 	umull	r2, r3, r2, r3
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006884:	441c      	add	r4, r3
 8006886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800688a:	2200      	movs	r2, #0
 800688c:	673b      	str	r3, [r7, #112]	@ 0x70
 800688e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006890:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006894:	4642      	mov	r2, r8
 8006896:	464b      	mov	r3, r9
 8006898:	1891      	adds	r1, r2, r2
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	415b      	adcs	r3, r3
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068a4:	4641      	mov	r1, r8
 80068a6:	1851      	adds	r1, r2, r1
 80068a8:	6039      	str	r1, [r7, #0]
 80068aa:	4649      	mov	r1, r9
 80068ac:	414b      	adcs	r3, r1
 80068ae:	607b      	str	r3, [r7, #4]
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068bc:	4659      	mov	r1, fp
 80068be:	00cb      	lsls	r3, r1, #3
 80068c0:	4651      	mov	r1, sl
 80068c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068c6:	4651      	mov	r1, sl
 80068c8:	00ca      	lsls	r2, r1, #3
 80068ca:	4610      	mov	r0, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	4642      	mov	r2, r8
 80068d2:	189b      	adds	r3, r3, r2
 80068d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068d6:	464b      	mov	r3, r9
 80068d8:	460a      	mov	r2, r1
 80068da:	eb42 0303 	adc.w	r3, r2, r3
 80068de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80068ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068f8:	4649      	mov	r1, r9
 80068fa:	008b      	lsls	r3, r1, #2
 80068fc:	4641      	mov	r1, r8
 80068fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006902:	4641      	mov	r1, r8
 8006904:	008a      	lsls	r2, r1, #2
 8006906:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800690a:	f7f9 fc79 	bl	8000200 <__aeabi_uldivmod>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <UART_SetConfig+0x4e4>)
 8006914:	fba3 1302 	umull	r1, r3, r3, r2
 8006918:	095b      	lsrs	r3, r3, #5
 800691a:	2164      	movs	r1, #100	@ 0x64
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	3332      	adds	r3, #50	@ 0x32
 8006926:	4a08      	ldr	r2, [pc, #32]	@ (8006948 <UART_SetConfig+0x4e4>)
 8006928:	fba2 2303 	umull	r2, r3, r2, r3
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	f003 020f 	and.w	r2, r3, #15
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4422      	add	r2, r4
 800693a:	609a      	str	r2, [r3, #8]
}
 800693c:	bf00      	nop
 800693e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006942:	46bd      	mov	sp, r7
 8006944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006948:	51eb851f 	.word	0x51eb851f

0800694c <__NVIC_SetPriority>:
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	6039      	str	r1, [r7, #0]
 8006956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695c:	2b00      	cmp	r3, #0
 800695e:	db0a      	blt.n	8006976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	490c      	ldr	r1, [pc, #48]	@ (8006998 <__NVIC_SetPriority+0x4c>)
 8006966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696a:	0112      	lsls	r2, r2, #4
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	440b      	add	r3, r1
 8006970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006974:	e00a      	b.n	800698c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	b2da      	uxtb	r2, r3
 800697a:	4908      	ldr	r1, [pc, #32]	@ (800699c <__NVIC_SetPriority+0x50>)
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	3b04      	subs	r3, #4
 8006984:	0112      	lsls	r2, r2, #4
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	440b      	add	r3, r1
 800698a:	761a      	strb	r2, [r3, #24]
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	e000e100 	.word	0xe000e100
 800699c:	e000ed00 	.word	0xe000ed00

080069a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80069a4:	4b05      	ldr	r3, [pc, #20]	@ (80069bc <SysTick_Handler+0x1c>)
 80069a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069a8:	f002 fbfc 	bl	80091a4 <xTaskGetSchedulerState>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d001      	beq.n	80069b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80069b2:	f003 faf1 	bl	8009f98 <xPortSysTickHandler>
  }
}
 80069b6:	bf00      	nop
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	e000e010 	.word	0xe000e010

080069c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80069c4:	2100      	movs	r1, #0
 80069c6:	f06f 0004 	mvn.w	r0, #4
 80069ca:	f7ff ffbf 	bl	800694c <__NVIC_SetPriority>
#endif
}
 80069ce:	bf00      	nop
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069da:	f3ef 8305 	mrs	r3, IPSR
 80069de:	603b      	str	r3, [r7, #0]
  return(result);
 80069e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80069e6:	f06f 0305 	mvn.w	r3, #5
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	e00c      	b.n	8006a08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <osKernelInitialize+0x44>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d105      	bne.n	8006a02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069f6:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <osKernelInitialize+0x44>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	607b      	str	r3, [r7, #4]
 8006a00:	e002      	b.n	8006a08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a02:	f04f 33ff 	mov.w	r3, #4294967295
 8006a06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a08:	687b      	ldr	r3, [r7, #4]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	20000a28 	.word	0x20000a28

08006a1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a22:	f3ef 8305 	mrs	r3, IPSR
 8006a26:	603b      	str	r3, [r7, #0]
  return(result);
 8006a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a2e:	f06f 0305 	mvn.w	r3, #5
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	e010      	b.n	8006a58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a36:	4b0b      	ldr	r3, [pc, #44]	@ (8006a64 <osKernelStart+0x48>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d109      	bne.n	8006a52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a3e:	f7ff ffbf 	bl	80069c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a42:	4b08      	ldr	r3, [pc, #32]	@ (8006a64 <osKernelStart+0x48>)
 8006a44:	2202      	movs	r2, #2
 8006a46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a48:	f001 ff26 	bl	8008898 <vTaskStartScheduler>
      stat = osOK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	607b      	str	r3, [r7, #4]
 8006a50:	e002      	b.n	8006a58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a52:	f04f 33ff 	mov.w	r3, #4294967295
 8006a56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a58:	687b      	ldr	r3, [r7, #4]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000a28 	.word	0x20000a28

08006a68 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a6e:	f3ef 8305 	mrs	r3, IPSR
 8006a72:	603b      	str	r3, [r7, #0]
  return(result);
 8006a74:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006a7a:	f002 f839 	bl	8008af0 <xTaskGetTickCountFromISR>
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	e002      	b.n	8006a88 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006a82:	f002 f825 	bl	8008ad0 <xTaskGetTickCount>
 8006a86:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006a88:	687b      	ldr	r3, [r7, #4]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b08e      	sub	sp, #56	@ 0x38
 8006a96:	af04      	add	r7, sp, #16
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa2:	f3ef 8305 	mrs	r3, IPSR
 8006aa6:	617b      	str	r3, [r7, #20]
  return(result);
 8006aa8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d17e      	bne.n	8006bac <osThreadNew+0x11a>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d07b      	beq.n	8006bac <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ab4:	2380      	movs	r3, #128	@ 0x80
 8006ab6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ab8:	2318      	movs	r3, #24
 8006aba:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d045      	beq.n	8006b58 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <osThreadNew+0x48>
        name = attr->name;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <osThreadNew+0x6e>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2b38      	cmp	r3, #56	@ 0x38
 8006af2:	d805      	bhi.n	8006b00 <osThreadNew+0x6e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <osThreadNew+0x72>
        return (NULL);
 8006b00:	2300      	movs	r3, #0
 8006b02:	e054      	b.n	8006bae <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	089b      	lsrs	r3, r3, #2
 8006b12:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00e      	beq.n	8006b3a <osThreadNew+0xa8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2ba7      	cmp	r3, #167	@ 0xa7
 8006b22:	d90a      	bls.n	8006b3a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <osThreadNew+0xa8>
        mem = 1;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e010      	b.n	8006b5c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10c      	bne.n	8006b5c <osThreadNew+0xca>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d108      	bne.n	8006b5c <osThreadNew+0xca>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d104      	bne.n	8006b5c <osThreadNew+0xca>
          mem = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	e001      	b.n	8006b5c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d110      	bne.n	8006b84 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b6a:	9202      	str	r2, [sp, #8]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6a3a      	ldr	r2, [r7, #32]
 8006b76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f001 fc99 	bl	80084b0 <xTaskCreateStatic>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	e013      	b.n	8006bac <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d110      	bne.n	8006bac <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	f107 0310 	add.w	r3, r7, #16
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f001 fce7 	bl	8008570 <xTaskCreate>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d001      	beq.n	8006bac <osThreadNew+0x11a>
            hTask = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bac:	693b      	ldr	r3, [r7, #16]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3728      	adds	r7, #40	@ 0x28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bbe:	f3ef 8305 	mrs	r3, IPSR
 8006bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <osDelay+0x1c>
    stat = osErrorISR;
 8006bca:	f06f 0305 	mvn.w	r3, #5
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e007      	b.n	8006be2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fe25 	bl	800882c <vTaskDelay>
    }
  }

  return (stat);
 8006be2:	68fb      	ldr	r3, [r7, #12]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf8:	f3ef 8305 	mrs	r3, IPSR
 8006bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bfe:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d174      	bne.n	8006cee <osMutexNew+0x102>
    if (attr != NULL) {
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e001      	b.n	8006c16 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <osMutexNew+0x3a>
      rmtx = 1U;
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e001      	b.n	8006c2a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d15c      	bne.n	8006cee <osMutexNew+0x102>
      mem = -1;
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295
 8006c38:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d015      	beq.n	8006c6c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d006      	beq.n	8006c56 <osMutexNew+0x6a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b4f      	cmp	r3, #79	@ 0x4f
 8006c4e:	d902      	bls.n	8006c56 <osMutexNew+0x6a>
          mem = 1;
 8006c50:	2301      	movs	r3, #1
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	e00c      	b.n	8006c70 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d108      	bne.n	8006c70 <osMutexNew+0x84>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <osMutexNew+0x84>
            mem = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	e001      	b.n	8006c70 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d112      	bne.n	8006c9c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d007      	beq.n	8006c8c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	4619      	mov	r1, r3
 8006c82:	2004      	movs	r0, #4
 8006c84:	f000 fcf9 	bl	800767a <xQueueCreateMutexStatic>
 8006c88:	61f8      	str	r0, [r7, #28]
 8006c8a:	e016      	b.n	8006cba <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	4619      	mov	r1, r3
 8006c92:	2001      	movs	r0, #1
 8006c94:	f000 fcf1 	bl	800767a <xQueueCreateMutexStatic>
 8006c98:	61f8      	str	r0, [r7, #28]
 8006c9a:	e00e      	b.n	8006cba <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006ca8:	2004      	movs	r0, #4
 8006caa:	f000 fcce 	bl	800764a <xQueueCreateMutex>
 8006cae:	61f8      	str	r0, [r7, #28]
 8006cb0:	e003      	b.n	8006cba <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006cb2:	2001      	movs	r0, #1
 8006cb4:	f000 fcc9 	bl	800764a <xQueueCreateMutex>
 8006cb8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00c      	beq.n	8006cda <osMutexNew+0xee>
        if (attr != NULL) {
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <osMutexNew+0xe2>
          name = attr->name;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	e001      	b.n	8006cd2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	69f8      	ldr	r0, [r7, #28]
 8006cd6:	f001 fb63 	bl	80083a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <osMutexNew+0x102>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006cee:	69fb      	ldr	r3, [r7, #28]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d16:	f3ef 8305 	mrs	r3, IPSR
 8006d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d1c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006d22:	f06f 0305 	mvn.w	r3, #5
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e02c      	b.n	8006d84 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006d30:	f06f 0303 	mvn.w	r3, #3
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	e025      	b.n	8006d84 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d011      	beq.n	8006d62 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6938      	ldr	r0, [r7, #16]
 8006d42:	f000 fcea 	bl	800771a <xQueueTakeMutexRecursive>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d01b      	beq.n	8006d84 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006d52:	f06f 0301 	mvn.w	r3, #1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	e014      	b.n	8006d84 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006d5a:	f06f 0302 	mvn.w	r3, #2
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e010      	b.n	8006d84 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6938      	ldr	r0, [r7, #16]
 8006d66:	f000 ffff 	bl	8007d68 <xQueueSemaphoreTake>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d009      	beq.n	8006d84 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006d76:	f06f 0301 	mvn.w	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e002      	b.n	8006d84 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006d7e:	f06f 0302 	mvn.w	r3, #2
 8006d82:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006d84:	697b      	ldr	r3, [r7, #20]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006daa:	f3ef 8305 	mrs	r3, IPSR
 8006dae:	60bb      	str	r3, [r7, #8]
  return(result);
 8006db0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <osMutexRelease+0x30>
    stat = osErrorISR;
 8006db6:	f06f 0305 	mvn.w	r3, #5
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e01f      	b.n	8006dfe <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006dc4:	f06f 0303 	mvn.w	r3, #3
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e018      	b.n	8006dfe <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d009      	beq.n	8006de6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006dd2:	6938      	ldr	r0, [r7, #16]
 8006dd4:	f000 fc6c 	bl	80076b0 <xQueueGiveMutexRecursive>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d00f      	beq.n	8006dfe <osMutexRelease+0x70>
        stat = osErrorResource;
 8006dde:	f06f 0302 	mvn.w	r3, #2
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	e00b      	b.n	8006dfe <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006de6:	2300      	movs	r3, #0
 8006de8:	2200      	movs	r2, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	6938      	ldr	r0, [r7, #16]
 8006dee:	f000 fd39 	bl	8007864 <xQueueGenericSend>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d002      	beq.n	8006dfe <osMutexRelease+0x70>
        stat = osErrorResource;
 8006df8:	f06f 0302 	mvn.w	r3, #2
 8006dfc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006dfe:	697b      	ldr	r3, [r7, #20]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08a      	sub	sp, #40	@ 0x28
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e18:	f3ef 8305 	mrs	r3, IPSR
 8006e1c:	613b      	str	r3, [r7, #16]
  return(result);
 8006e1e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d175      	bne.n	8006f10 <osSemaphoreNew+0x108>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d072      	beq.n	8006f10 <osSemaphoreNew+0x108>
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d86e      	bhi.n	8006f10 <osSemaphoreNew+0x108>
    mem = -1;
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295
 8006e36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d015      	beq.n	8006e6a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d006      	beq.n	8006e54 <osSemaphoreNew+0x4c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b4f      	cmp	r3, #79	@ 0x4f
 8006e4c:	d902      	bls.n	8006e54 <osSemaphoreNew+0x4c>
        mem = 1;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e00c      	b.n	8006e6e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d108      	bne.n	8006e6e <osSemaphoreNew+0x66>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <osSemaphoreNew+0x66>
          mem = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61bb      	str	r3, [r7, #24]
 8006e68:	e001      	b.n	8006e6e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d04c      	beq.n	8006f10 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d128      	bne.n	8006ece <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d10a      	bne.n	8006e98 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	2203      	movs	r2, #3
 8006e88:	9200      	str	r2, [sp, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f000 fae6 	bl	8007460 <xQueueGenericCreateStatic>
 8006e94:	61f8      	str	r0, [r7, #28]
 8006e96:	e005      	b.n	8006ea4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006e98:	2203      	movs	r2, #3
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	2001      	movs	r0, #1
 8006e9e:	f000 fb5c 	bl	800755a <xQueueGenericCreate>
 8006ea2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d022      	beq.n	8006ef0 <osSemaphoreNew+0xe8>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01f      	beq.n	8006ef0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	69f8      	ldr	r0, [r7, #28]
 8006eb8:	f000 fcd4 	bl	8007864 <xQueueGenericSend>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d016      	beq.n	8006ef0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006ec2:	69f8      	ldr	r0, [r7, #28]
 8006ec4:	f001 f920 	bl	8008108 <vQueueDelete>
            hSemaphore = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61fb      	str	r3, [r7, #28]
 8006ecc:	e010      	b.n	8006ef0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d108      	bne.n	8006ee6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fc53 	bl	8007788 <xQueueCreateCountingSemaphoreStatic>
 8006ee2:	61f8      	str	r0, [r7, #28]
 8006ee4:	e004      	b.n	8006ef0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fc86 	bl	80077fa <xQueueCreateCountingSemaphore>
 8006eee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e001      	b.n	8006f08 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006f08:	6979      	ldr	r1, [r7, #20]
 8006f0a:	69f8      	ldr	r0, [r7, #28]
 8006f0c:	f001 fa48 	bl	80083a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006f10:	69fb      	ldr	r3, [r7, #28]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b08a      	sub	sp, #40	@ 0x28
 8006f1e:	af02      	add	r7, sp, #8
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f2a:	f3ef 8305 	mrs	r3, IPSR
 8006f2e:	613b      	str	r3, [r7, #16]
  return(result);
 8006f30:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d15f      	bne.n	8006ff6 <osMessageQueueNew+0xdc>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d05c      	beq.n	8006ff6 <osMessageQueueNew+0xdc>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d059      	beq.n	8006ff6 <osMessageQueueNew+0xdc>
    mem = -1;
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295
 8006f46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d029      	beq.n	8006fa2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d012      	beq.n	8006f7c <osMessageQueueNew+0x62>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8006f5c:	d90e      	bls.n	8006f7c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	fb01 f303 	mul.w	r3, r1, r3
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d302      	bcc.n	8006f7c <osMessageQueueNew+0x62>
        mem = 1;
 8006f76:	2301      	movs	r3, #1
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	e014      	b.n	8006fa6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d110      	bne.n	8006fa6 <osMessageQueueNew+0x8c>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10c      	bne.n	8006fa6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d108      	bne.n	8006fa6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <osMessageQueueNew+0x8c>
          mem = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	e001      	b.n	8006fa6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d10b      	bne.n	8006fc4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	9100      	str	r1, [sp, #0]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fa50 	bl	8007460 <xQueueGenericCreateStatic>
 8006fc0:	61f8      	str	r0, [r7, #28]
 8006fc2:	e008      	b.n	8006fd6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d105      	bne.n	8006fd6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fac3 	bl	800755a <xQueueGenericCreate>
 8006fd4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00c      	beq.n	8006ff6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <osMessageQueueNew+0xd0>
        name = attr->name;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e001      	b.n	8006fee <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006fee:	6979      	ldr	r1, [r7, #20]
 8006ff0:	69f8      	ldr	r0, [r7, #28]
 8006ff2:	f001 f9d5 	bl	80083a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ff6:	69fb      	ldr	r3, [r7, #28]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3720      	adds	r7, #32
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007014:	2300      	movs	r3, #0
 8007016:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007018:	f3ef 8305 	mrs	r3, IPSR
 800701c:	617b      	str	r3, [r7, #20]
  return(result);
 800701e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007020:	2b00      	cmp	r3, #0
 8007022:	d028      	beq.n	8007076 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <osMessageQueuePut+0x36>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <osMessageQueuePut+0x36>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007036:	f06f 0303 	mvn.w	r3, #3
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	e038      	b.n	80070b0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007042:	f107 0210 	add.w	r2, r7, #16
 8007046:	2300      	movs	r3, #0
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	69b8      	ldr	r0, [r7, #24]
 800704c:	f000 fd0c 	bl	8007a68 <xQueueGenericSendFromISR>
 8007050:	4603      	mov	r3, r0
 8007052:	2b01      	cmp	r3, #1
 8007054:	d003      	beq.n	800705e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007056:	f06f 0302 	mvn.w	r3, #2
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	e028      	b.n	80070b0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d025      	beq.n	80070b0 <osMessageQueuePut+0xb0>
 8007064:	4b15      	ldr	r3, [pc, #84]	@ (80070bc <osMessageQueuePut+0xbc>)
 8007066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	e01c      	b.n	80070b0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <osMessageQueuePut+0x82>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007082:	f06f 0303 	mvn.w	r3, #3
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	e012      	b.n	80070b0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800708a:	2300      	movs	r3, #0
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	69b8      	ldr	r0, [r7, #24]
 8007092:	f000 fbe7 	bl	8007864 <xQueueGenericSend>
 8007096:	4603      	mov	r3, r0
 8007098:	2b01      	cmp	r3, #1
 800709a:	d009      	beq.n	80070b0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80070a2:	f06f 0301 	mvn.w	r3, #1
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	e002      	b.n	80070b0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80070aa:	f06f 0302 	mvn.w	r3, #2
 80070ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80070b0:	69fb      	ldr	r3, [r7, #28]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3720      	adds	r7, #32
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070d6:	f3ef 8305 	mrs	r3, IPSR
 80070da:	617b      	str	r3, [r7, #20]
  return(result);
 80070dc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d028      	beq.n	8007134 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <osMessageQueueGet+0x34>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <osMessageQueueGet+0x34>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80070f4:	f06f 0303 	mvn.w	r3, #3
 80070f8:	61fb      	str	r3, [r7, #28]
 80070fa:	e037      	b.n	800716c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007100:	f107 0310 	add.w	r3, r7, #16
 8007104:	461a      	mov	r2, r3
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	69b8      	ldr	r0, [r7, #24]
 800710a:	f000 ff3d 	bl	8007f88 <xQueueReceiveFromISR>
 800710e:	4603      	mov	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d003      	beq.n	800711c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007114:	f06f 0302 	mvn.w	r3, #2
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	e027      	b.n	800716c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d024      	beq.n	800716c <osMessageQueueGet+0xac>
 8007122:	4b15      	ldr	r3, [pc, #84]	@ (8007178 <osMessageQueueGet+0xb8>)
 8007124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	e01b      	b.n	800716c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <osMessageQueueGet+0x80>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d103      	bne.n	8007148 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007140:	f06f 0303 	mvn.w	r3, #3
 8007144:	61fb      	str	r3, [r7, #28]
 8007146:	e011      	b.n	800716c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	69b8      	ldr	r0, [r7, #24]
 800714e:	f000 fd29 	bl	8007ba4 <xQueueReceive>
 8007152:	4603      	mov	r3, r0
 8007154:	2b01      	cmp	r3, #1
 8007156:	d009      	beq.n	800716c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800715e:	f06f 0301 	mvn.w	r3, #1
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	e002      	b.n	800716c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007166:	f06f 0302 	mvn.w	r3, #2
 800716a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800716c:	69fb      	ldr	r3, [r7, #28]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3720      	adds	r7, #32
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <osMessageQueueGetCount+0x18>
    count = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e00e      	b.n	80071b2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007194:	f3ef 8305 	mrs	r3, IPSR
 8007198:	60fb      	str	r3, [r7, #12]
  return(result);
 800719a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80071a0:	6938      	ldr	r0, [r7, #16]
 80071a2:	f000 ff92 	bl	80080ca <uxQueueMessagesWaitingFromISR>
 80071a6:	6178      	str	r0, [r7, #20]
 80071a8:	e003      	b.n	80071b2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80071aa:	6938      	ldr	r0, [r7, #16]
 80071ac:	f000 ff6e 	bl	800808c <uxQueueMessagesWaiting>
 80071b0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80071b2:	697b      	ldr	r3, [r7, #20]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4a07      	ldr	r2, [pc, #28]	@ (80071e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80071cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	4a06      	ldr	r2, [pc, #24]	@ (80071ec <vApplicationGetIdleTaskMemory+0x30>)
 80071d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2280      	movs	r2, #128	@ 0x80
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	bf00      	nop
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000a2c 	.word	0x20000a2c
 80071ec:	20000ad4 	.word	0x20000ad4

080071f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4a07      	ldr	r2, [pc, #28]	@ (800721c <vApplicationGetTimerTaskMemory+0x2c>)
 8007200:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	4a06      	ldr	r2, [pc, #24]	@ (8007220 <vApplicationGetTimerTaskMemory+0x30>)
 8007206:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800720e:	601a      	str	r2, [r3, #0]
}
 8007210:	bf00      	nop
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	20000cd4 	.word	0x20000cd4
 8007220:	20000d7c 	.word	0x20000d7c

08007224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f103 0208 	add.w	r2, r3, #8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f04f 32ff 	mov.w	r2, #4294967295
 800723c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f103 0208 	add.w	r2, r3, #8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f103 0208 	add.w	r2, r3, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	601a      	str	r2, [r3, #0]
}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072dc:	d103      	bne.n	80072e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e00c      	b.n	8007300 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3308      	adds	r3, #8
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	e002      	b.n	80072f4 <vListInsert+0x2e>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d2f6      	bcs.n	80072ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]
}
 800732c:	bf00      	nop
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6892      	ldr	r2, [r2, #8]
 800734e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6852      	ldr	r2, [r2, #4]
 8007358:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d103      	bne.n	800736c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	1e5a      	subs	r2, r3, #1
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10b      	bne.n	80073b8 <xQueueGenericReset+0x2c>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60bb      	str	r3, [r7, #8]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073b8:	f002 fd5e 	bl	8009e78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e8:	3b01      	subs	r3, #1
 80073ea:	68f9      	ldr	r1, [r7, #12]
 80073ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80073ee:	fb01 f303 	mul.w	r3, r1, r3
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	22ff      	movs	r2, #255	@ 0xff
 80073fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	22ff      	movs	r2, #255	@ 0xff
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d114      	bne.n	8007438 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01a      	beq.n	800744c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3310      	adds	r3, #16
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fcec 	bl	8008df8 <xTaskRemoveFromEventList>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d012      	beq.n	800744c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007426:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <xQueueGenericReset+0xd0>)
 8007428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	e009      	b.n	800744c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3310      	adds	r3, #16
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fef1 	bl	8007224 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3324      	adds	r3, #36	@ 0x24
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff feec 	bl	8007224 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800744c:	f002 fd46 	bl	8009edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007450:	2301      	movs	r3, #1
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	@ 0x38
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10b      	bne.n	800748c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	e7fd      	b.n	80074a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <xQueueGenericCreateStatic+0x56>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <xQueueGenericCreateStatic+0x5a>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <xQueueGenericCreateStatic+0x5c>
 80074ba:	2300      	movs	r3, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	623b      	str	r3, [r7, #32]
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d102      	bne.n	80074e4 <xQueueGenericCreateStatic+0x84>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <xQueueGenericCreateStatic+0x88>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <xQueueGenericCreateStatic+0x8a>
 80074e8:	2300      	movs	r3, #0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10b      	bne.n	8007506 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	61fb      	str	r3, [r7, #28]
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	e7fd      	b.n	8007502 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007506:	2350      	movs	r3, #80	@ 0x50
 8007508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b50      	cmp	r3, #80	@ 0x50
 800750e:	d00b      	beq.n	8007528 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	61bb      	str	r3, [r7, #24]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007528:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800752e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00d      	beq.n	8007550 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800753c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	4613      	mov	r3, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 f840 	bl	80075d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007552:	4618      	mov	r0, r3
 8007554:	3730      	adds	r7, #48	@ 0x30
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800755a:	b580      	push	{r7, lr}
 800755c:	b08a      	sub	sp, #40	@ 0x28
 800755e:	af02      	add	r7, sp, #8
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	4613      	mov	r3, r2
 8007566:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <xQueueGenericCreate+0x2c>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	613b      	str	r3, [r7, #16]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	3350      	adds	r3, #80	@ 0x50
 8007594:	4618      	mov	r0, r3
 8007596:	f002 fd91 	bl	800a0bc <pvPortMalloc>
 800759a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d011      	beq.n	80075c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	3350      	adds	r3, #80	@ 0x50
 80075aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075b4:	79fa      	ldrb	r2, [r7, #7]
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f805 	bl	80075d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075c6:	69bb      	ldr	r3, [r7, #24]
	}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e002      	b.n	80075f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075fe:	2101      	movs	r1, #1
 8007600:	69b8      	ldr	r0, [r7, #24]
 8007602:	f7ff fec3 	bl	800738c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800760e:	bf00      	nop
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007636:	2300      	movs	r3, #0
 8007638:	2200      	movs	r2, #0
 800763a:	2100      	movs	r1, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f911 	bl	8007864 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	4603      	mov	r3, r0
 8007652:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007654:	2301      	movs	r3, #1
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	2300      	movs	r3, #0
 800765a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	461a      	mov	r2, r3
 8007660:	6939      	ldr	r1, [r7, #16]
 8007662:	6978      	ldr	r0, [r7, #20]
 8007664:	f7ff ff79 	bl	800755a <xQueueGenericCreate>
 8007668:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff ffd3 	bl	8007616 <prvInitialiseMutex>

		return xNewQueue;
 8007670:	68fb      	ldr	r3, [r7, #12]
	}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800767a:	b580      	push	{r7, lr}
 800767c:	b088      	sub	sp, #32
 800767e:	af02      	add	r7, sp, #8
 8007680:	4603      	mov	r3, r0
 8007682:	6039      	str	r1, [r7, #0]
 8007684:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007686:	2301      	movs	r3, #1
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2200      	movs	r2, #0
 8007696:	6939      	ldr	r1, [r7, #16]
 8007698:	6978      	ldr	r0, [r7, #20]
 800769a:	f7ff fee1 	bl	8007460 <xQueueGenericCreateStatic>
 800769e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ffb8 	bl	8007616 <prvInitialiseMutex>

		return xNewQueue;
 80076a6:	68fb      	ldr	r3, [r7, #12]
	}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	60fb      	str	r3, [r7, #12]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	689c      	ldr	r4, [r3, #8]
 80076de:	f001 fd51 	bl	8009184 <xTaskGetCurrentTaskHandle>
 80076e2:	4603      	mov	r3, r0
 80076e4:	429c      	cmp	r4, r3
 80076e6:	d111      	bne.n	800770c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	1e5a      	subs	r2, r3, #1
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80076fa:	2300      	movs	r3, #0
 80076fc:	2200      	movs	r2, #0
 80076fe:	2100      	movs	r1, #0
 8007700:	6938      	ldr	r0, [r7, #16]
 8007702:	f000 f8af 	bl	8007864 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007706:	2301      	movs	r3, #1
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	e001      	b.n	8007710 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007710:	697b      	ldr	r3, [r7, #20]
	}
 8007712:	4618      	mov	r0, r3
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd90      	pop	{r4, r7, pc}

0800771a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800771a:	b590      	push	{r4, r7, lr}
 800771c:	b087      	sub	sp, #28
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10b      	bne.n	8007746 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	60fb      	str	r3, [r7, #12]
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	689c      	ldr	r4, [r3, #8]
 800774a:	f001 fd1b 	bl	8009184 <xTaskGetCurrentTaskHandle>
 800774e:	4603      	mov	r3, r0
 8007750:	429c      	cmp	r4, r3
 8007752:	d107      	bne.n	8007764 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800775e:	2301      	movs	r3, #1
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	e00c      	b.n	800777e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6938      	ldr	r0, [r7, #16]
 8007768:	f000 fafe 	bl	8007d68 <xQueueSemaphoreTake>
 800776c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d004      	beq.n	800777e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800777e:	697b      	ldr	r3, [r7, #20]
	}
 8007780:	4618      	mov	r0, r3
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	bd90      	pop	{r4, r7, pc}

08007788 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	@ 0x28
 800778c:	af02      	add	r7, sp, #8
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10b      	bne.n	80077b2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	61bb      	str	r3, [r7, #24]
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	e7fd      	b.n	80077ae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d90b      	bls.n	80077d2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	617b      	str	r3, [r7, #20]
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	e7fd      	b.n	80077ce <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80077d2:	2302      	movs	r3, #2
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	2100      	movs	r1, #0
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f7ff fe3f 	bl	8007460 <xQueueGenericCreateStatic>
 80077e2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80077f0:	69fb      	ldr	r3, [r7, #28]
	}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	613b      	str	r3, [r7, #16]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	429a      	cmp	r2, r3
 8007828:	d90b      	bls.n	8007842 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	60fb      	str	r3, [r7, #12]
}
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	e7fd      	b.n	800783e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007842:	2202      	movs	r2, #2
 8007844:	2100      	movs	r1, #0
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff fe87 	bl	800755a <xQueueGenericCreate>
 800784c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800785a:	697b      	ldr	r3, [r7, #20]
	}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08e      	sub	sp, #56	@ 0x38
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007872:	2300      	movs	r3, #0
 8007874:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10b      	bne.n	8007898 <xQueueGenericSend+0x34>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d103      	bne.n	80078a6 <xQueueGenericSend+0x42>
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <xQueueGenericSend+0x46>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e000      	b.n	80078ac <xQueueGenericSend+0x48>
 80078aa:	2300      	movs	r3, #0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10b      	bne.n	80078c8 <xQueueGenericSend+0x64>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d103      	bne.n	80078d6 <xQueueGenericSend+0x72>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d101      	bne.n	80078da <xQueueGenericSend+0x76>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <xQueueGenericSend+0x78>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10b      	bne.n	80078f8 <xQueueGenericSend+0x94>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	623b      	str	r3, [r7, #32]
}
 80078f2:	bf00      	nop
 80078f4:	bf00      	nop
 80078f6:	e7fd      	b.n	80078f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078f8:	f001 fc54 	bl	80091a4 <xTaskGetSchedulerState>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <xQueueGenericSend+0xa4>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <xQueueGenericSend+0xa8>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <xQueueGenericSend+0xaa>
 800790c:	2300      	movs	r3, #0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10b      	bne.n	800792a <xQueueGenericSend+0xc6>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	61fb      	str	r3, [r7, #28]
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	e7fd      	b.n	8007926 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800792a:	f002 faa5 	bl	8009e78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007936:	429a      	cmp	r2, r3
 8007938:	d302      	bcc.n	8007940 <xQueueGenericSend+0xdc>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d129      	bne.n	8007994 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007946:	f000 fc1b 	bl	8008180 <prvCopyDataToQueue>
 800794a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d010      	beq.n	8007976 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	3324      	adds	r3, #36	@ 0x24
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fa4d 	bl	8008df8 <xTaskRemoveFromEventList>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d013      	beq.n	800798c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007964:	4b3f      	ldr	r3, [pc, #252]	@ (8007a64 <xQueueGenericSend+0x200>)
 8007966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	e00a      	b.n	800798c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800797c:	4b39      	ldr	r3, [pc, #228]	@ (8007a64 <xQueueGenericSend+0x200>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800798c:	f002 faa6 	bl	8009edc <vPortExitCritical>
				return pdPASS;
 8007990:	2301      	movs	r3, #1
 8007992:	e063      	b.n	8007a5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d103      	bne.n	80079a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800799a:	f002 fa9f 	bl	8009edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800799e:	2300      	movs	r3, #0
 80079a0:	e05c      	b.n	8007a5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079a8:	f107 0314 	add.w	r3, r7, #20
 80079ac:	4618      	mov	r0, r3
 80079ae:	f001 fa87 	bl	8008ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079b6:	f002 fa91 	bl	8009edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079ba:	f000 ffdd 	bl	8008978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079be:	f002 fa5b 	bl	8009e78 <vPortEnterCritical>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d103      	bne.n	80079d8 <xQueueGenericSend+0x174>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079de:	b25b      	sxtb	r3, r3
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e4:	d103      	bne.n	80079ee <xQueueGenericSend+0x18a>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079ee:	f002 fa75 	bl	8009edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079f2:	1d3a      	adds	r2, r7, #4
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 fa76 	bl	8008eec <xTaskCheckForTimeOut>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d124      	bne.n	8007a50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a08:	f000 fcb2 	bl	8008370 <prvIsQueueFull>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d018      	beq.n	8007a44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	3310      	adds	r3, #16
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f001 f99a 	bl	8008d54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a22:	f000 fc3d 	bl	80082a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a26:	f000 ffb5 	bl	8008994 <xTaskResumeAll>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f47f af7c 	bne.w	800792a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007a32:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <xQueueGenericSend+0x200>)
 8007a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	e772      	b.n	800792a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a46:	f000 fc2b 	bl	80082a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a4a:	f000 ffa3 	bl	8008994 <xTaskResumeAll>
 8007a4e:	e76c      	b.n	800792a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a52:	f000 fc25 	bl	80082a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a56:	f000 ff9d 	bl	8008994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3738      	adds	r7, #56	@ 0x38
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b090      	sub	sp, #64	@ 0x40
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10b      	bne.n	8007a98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <xQueueGenericSendFromISR+0x3e>
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <xQueueGenericSendFromISR+0x42>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <xQueueGenericSendFromISR+0x44>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d103      	bne.n	8007ad6 <xQueueGenericSendFromISR+0x6e>
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d101      	bne.n	8007ada <xQueueGenericSendFromISR+0x72>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <xQueueGenericSendFromISR+0x74>
 8007ada:	2300      	movs	r3, #0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	623b      	str	r3, [r7, #32]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007af8:	f002 fa9e 	bl	800a038 <vPortValidateInterruptPriority>
	__asm volatile
 8007afc:	f3ef 8211 	mrs	r2, BASEPRI
 8007b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	61fa      	str	r2, [r7, #28]
 8007b12:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007b14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d302      	bcc.n	8007b2a <xQueueGenericSendFromISR+0xc2>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d12f      	bne.n	8007b8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b40:	f000 fb1e 	bl	8008180 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d112      	bne.n	8007b74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d016      	beq.n	8007b84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b58:	3324      	adds	r3, #36	@ 0x24
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 f94c 	bl	8008df8 <xTaskRemoveFromEventList>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00e      	beq.n	8007b84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e007      	b.n	8007b84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b78:	3301      	adds	r3, #1
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	b25a      	sxtb	r2, r3
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b84:	2301      	movs	r3, #1
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b88:	e001      	b.n	8007b8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b90:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f383 8811 	msr	BASEPRI, r3
}
 8007b98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3740      	adds	r7, #64	@ 0x40
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08c      	sub	sp, #48	@ 0x30
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10b      	bne.n	8007bd6 <xQueueReceive+0x32>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	623b      	str	r3, [r7, #32]
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	e7fd      	b.n	8007bd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d103      	bne.n	8007be4 <xQueueReceive+0x40>
 8007bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <xQueueReceive+0x44>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e000      	b.n	8007bea <xQueueReceive+0x46>
 8007be8:	2300      	movs	r3, #0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10b      	bne.n	8007c06 <xQueueReceive+0x62>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	61fb      	str	r3, [r7, #28]
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	e7fd      	b.n	8007c02 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c06:	f001 facd 	bl	80091a4 <xTaskGetSchedulerState>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <xQueueReceive+0x72>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <xQueueReceive+0x76>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <xQueueReceive+0x78>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10b      	bne.n	8007c38 <xQueueReceive+0x94>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	61bb      	str	r3, [r7, #24]
}
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	e7fd      	b.n	8007c34 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c38:	f002 f91e 	bl	8009e78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01f      	beq.n	8007c88 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c4c:	f000 fb02 	bl	8008254 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c52:	1e5a      	subs	r2, r3, #1
 8007c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00f      	beq.n	8007c80 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c62:	3310      	adds	r3, #16
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 f8c7 	bl	8008df8 <xTaskRemoveFromEventList>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c70:	4b3c      	ldr	r3, [pc, #240]	@ (8007d64 <xQueueReceive+0x1c0>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c80:	f002 f92c 	bl	8009edc <vPortExitCritical>
				return pdPASS;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e069      	b.n	8007d5c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d103      	bne.n	8007c96 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c8e:	f002 f925 	bl	8009edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e062      	b.n	8007d5c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c9c:	f107 0310 	add.w	r3, r7, #16
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 f90d 	bl	8008ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007caa:	f002 f917 	bl	8009edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cae:	f000 fe63 	bl	8008978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cb2:	f002 f8e1 	bl	8009e78 <vPortEnterCritical>
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cbc:	b25b      	sxtb	r3, r3
 8007cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc2:	d103      	bne.n	8007ccc <xQueueReceive+0x128>
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cd2:	b25b      	sxtb	r3, r3
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd8:	d103      	bne.n	8007ce2 <xQueueReceive+0x13e>
 8007cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ce2:	f002 f8fb 	bl	8009edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ce6:	1d3a      	adds	r2, r7, #4
 8007ce8:	f107 0310 	add.w	r3, r7, #16
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 f8fc 	bl	8008eec <xTaskCheckForTimeOut>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d123      	bne.n	8007d42 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cfc:	f000 fb22 	bl	8008344 <prvIsQueueEmpty>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d017      	beq.n	8007d36 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	3324      	adds	r3, #36	@ 0x24
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 f820 	bl	8008d54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d16:	f000 fac3 	bl	80082a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d1a:	f000 fe3b 	bl	8008994 <xTaskResumeAll>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d189      	bne.n	8007c38 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d24:	4b0f      	ldr	r3, [pc, #60]	@ (8007d64 <xQueueReceive+0x1c0>)
 8007d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	e780      	b.n	8007c38 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d38:	f000 fab2 	bl	80082a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d3c:	f000 fe2a 	bl	8008994 <xTaskResumeAll>
 8007d40:	e77a      	b.n	8007c38 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d44:	f000 faac 	bl	80082a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d48:	f000 fe24 	bl	8008994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d4e:	f000 faf9 	bl	8008344 <prvIsQueueEmpty>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f43f af6f 	beq.w	8007c38 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3730      	adds	r7, #48	@ 0x30
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08e      	sub	sp, #56	@ 0x38
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d72:	2300      	movs	r3, #0
 8007d74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10b      	bne.n	8007d9c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	623b      	str	r3, [r7, #32]
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	e7fd      	b.n	8007d98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	61fb      	str	r3, [r7, #28]
}
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	e7fd      	b.n	8007db8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dbc:	f001 f9f2 	bl	80091a4 <xTaskGetSchedulerState>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <xQueueSemaphoreTake+0x64>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <xQueueSemaphoreTake+0x68>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e000      	b.n	8007dd2 <xQueueSemaphoreTake+0x6a>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	61bb      	str	r3, [r7, #24]
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	e7fd      	b.n	8007dea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dee:	f002 f843 	bl	8009e78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d024      	beq.n	8007e48 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e04:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d104      	bne.n	8007e18 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e0e:	f001 fb43 	bl	8009498 <pvTaskIncrementMutexHeldCount>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00f      	beq.n	8007e40 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e22:	3310      	adds	r3, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 ffe7 	bl	8008df8 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e30:	4b54      	ldr	r3, [pc, #336]	@ (8007f84 <xQueueSemaphoreTake+0x21c>)
 8007e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e40:	f002 f84c 	bl	8009edc <vPortExitCritical>
				return pdPASS;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e098      	b.n	8007f7a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d112      	bne.n	8007e74 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	617b      	str	r3, [r7, #20]
}
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	e7fd      	b.n	8007e68 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e6c:	f002 f836 	bl	8009edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e082      	b.n	8007f7a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d106      	bne.n	8007e88 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e7a:	f107 030c 	add.w	r3, r7, #12
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 f81e 	bl	8008ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e88:	f002 f828 	bl	8009edc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e8c:	f000 fd74 	bl	8008978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e90:	f001 fff2 	bl	8009e78 <vPortEnterCritical>
 8007e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e9a:	b25b      	sxtb	r3, r3
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d103      	bne.n	8007eaa <xQueueSemaphoreTake+0x142>
 8007ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007eb0:	b25b      	sxtb	r3, r3
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb6:	d103      	bne.n	8007ec0 <xQueueSemaphoreTake+0x158>
 8007eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ec0:	f002 f80c 	bl	8009edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ec4:	463a      	mov	r2, r7
 8007ec6:	f107 030c 	add.w	r3, r7, #12
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 f80d 	bl	8008eec <xTaskCheckForTimeOut>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d132      	bne.n	8007f3e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ed8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007eda:	f000 fa33 	bl	8008344 <prvIsQueueEmpty>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d026      	beq.n	8007f32 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007eec:	f001 ffc4 	bl	8009e78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 f973 	bl	80091e0 <xTaskPriorityInherit>
 8007efa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007efc:	f001 ffee 	bl	8009edc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f02:	3324      	adds	r3, #36	@ 0x24
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	4611      	mov	r1, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 ff23 	bl	8008d54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f10:	f000 f9c6 	bl	80082a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f14:	f000 fd3e 	bl	8008994 <xTaskResumeAll>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f47f af67 	bne.w	8007dee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007f20:	4b18      	ldr	r3, [pc, #96]	@ (8007f84 <xQueueSemaphoreTake+0x21c>)
 8007f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	e75d      	b.n	8007dee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f34:	f000 f9b4 	bl	80082a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f38:	f000 fd2c 	bl	8008994 <xTaskResumeAll>
 8007f3c:	e757      	b.n	8007dee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f40:	f000 f9ae 	bl	80082a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f44:	f000 fd26 	bl	8008994 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f4a:	f000 f9fb 	bl	8008344 <prvIsQueueEmpty>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f43f af4c 	beq.w	8007dee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007f5c:	f001 ff8c 	bl	8009e78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f62:	f000 f8f5 	bl	8008150 <prvGetDisinheritPriorityAfterTimeout>
 8007f66:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 fa0e 	bl	8009390 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f74:	f001 ffb2 	bl	8009edc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3738      	adds	r7, #56	@ 0x38
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08e      	sub	sp, #56	@ 0x38
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10b      	bne.n	8007fb6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	623b      	str	r3, [r7, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	e7fd      	b.n	8007fb2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d103      	bne.n	8007fc4 <xQueueReceiveFromISR+0x3c>
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <xQueueReceiveFromISR+0x40>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <xQueueReceiveFromISR+0x42>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10b      	bne.n	8007fe6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	61fb      	str	r3, [r7, #28]
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	e7fd      	b.n	8007fe2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fe6:	f002 f827 	bl	800a038 <vPortValidateInterruptPriority>
	__asm volatile
 8007fea:	f3ef 8211 	mrs	r2, BASEPRI
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	61ba      	str	r2, [r7, #24]
 8008000:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008002:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008004:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d02f      	beq.n	8008072 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008020:	f000 f918 	bl	8008254 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	1e5a      	subs	r2, r3, #1
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800802c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008034:	d112      	bne.n	800805c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d016      	beq.n	800806c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	3310      	adds	r3, #16
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fed8 	bl	8008df8 <xTaskRemoveFromEventList>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00e      	beq.n	800806c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	e007      	b.n	800806c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800805c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008060:	3301      	adds	r3, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	b25a      	sxtb	r2, r3
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800806c:	2301      	movs	r3, #1
 800806e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008070:	e001      	b.n	8008076 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008072:	2300      	movs	r3, #0
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
 8008076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008078:	613b      	str	r3, [r7, #16]
	__asm volatile
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f383 8811 	msr	BASEPRI, r3
}
 8008080:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008084:	4618      	mov	r0, r3
 8008086:	3738      	adds	r7, #56	@ 0x38
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10b      	bne.n	80080b2 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	60bb      	str	r3, [r7, #8]
}
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
 80080b0:	e7fd      	b.n	80080ae <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80080b2:	f001 fee1 	bl	8009e78 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ba:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80080bc:	f001 ff0e 	bl	8009edc <vPortExitCritical>

	return uxReturn;
 80080c0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80080ca:	b480      	push	{r7}
 80080cc:	b087      	sub	sp, #28
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10b      	bne.n	80080f4 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	60fb      	str	r3, [r7, #12]
}
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
 80080f2:	e7fd      	b.n	80080f0 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80080fa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80080fc:	4618      	mov	r0, r3
 80080fe:	371c      	adds	r7, #28
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <vQueueDelete+0x2a>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	60bb      	str	r3, [r7, #8]
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	e7fd      	b.n	800812e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 f95e 	bl	80083f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f002 f888 	bl	800a258 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008148:	bf00      	nop
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	e001      	b.n	8008172 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008172:	68fb      	ldr	r3, [r7, #12]
	}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800818c:	2300      	movs	r3, #0
 800818e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008194:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10d      	bne.n	80081ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d14d      	bne.n	8008242 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f001 f880 	bl	80092b0 <xTaskPriorityDisinherit>
 80081b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	609a      	str	r2, [r3, #8]
 80081b8:	e043      	b.n	8008242 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d119      	bne.n	80081f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6858      	ldr	r0, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c8:	461a      	mov	r2, r3
 80081ca:	68b9      	ldr	r1, [r7, #8]
 80081cc:	f002 f9fa 	bl	800a5c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d8:	441a      	add	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d32b      	bcc.n	8008242 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	e026      	b.n	8008242 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68d8      	ldr	r0, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fc:	461a      	mov	r2, r3
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	f002 f9e0 	bl	800a5c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820c:	425b      	negs	r3, r3
 800820e:	441a      	add	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d207      	bcs.n	8008230 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008228:	425b      	negs	r3, r3
 800822a:	441a      	add	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d105      	bne.n	8008242 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	3b01      	subs	r3, #1
 8008240:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800824a:	697b      	ldr	r3, [r7, #20]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	d018      	beq.n	8008298 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	441a      	add	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	429a      	cmp	r2, r3
 800827e:	d303      	bcc.n	8008288 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68d9      	ldr	r1, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008290:	461a      	mov	r2, r3
 8008292:	6838      	ldr	r0, [r7, #0]
 8008294:	f002 f996 	bl	800a5c4 <memcpy>
	}
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082a8:	f001 fde6 	bl	8009e78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082b4:	e011      	b.n	80082da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d012      	beq.n	80082e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3324      	adds	r3, #36	@ 0x24
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fd98 	bl	8008df8 <xTaskRemoveFromEventList>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082ce:	f000 fe71 	bl	8008fb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	dce9      	bgt.n	80082b6 <prvUnlockQueue+0x16>
 80082e2:	e000      	b.n	80082e6 <prvUnlockQueue+0x46>
					break;
 80082e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	22ff      	movs	r2, #255	@ 0xff
 80082ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80082ee:	f001 fdf5 	bl	8009edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082f2:	f001 fdc1 	bl	8009e78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082fe:	e011      	b.n	8008324 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d012      	beq.n	800832e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3310      	adds	r3, #16
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fd73 	bl	8008df8 <xTaskRemoveFromEventList>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008318:	f000 fe4c 	bl	8008fb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	3b01      	subs	r3, #1
 8008320:	b2db      	uxtb	r3, r3
 8008322:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008328:	2b00      	cmp	r3, #0
 800832a:	dce9      	bgt.n	8008300 <prvUnlockQueue+0x60>
 800832c:	e000      	b.n	8008330 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800832e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	22ff      	movs	r2, #255	@ 0xff
 8008334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008338:	f001 fdd0 	bl	8009edc <vPortExitCritical>
}
 800833c:	bf00      	nop
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800834c:	f001 fd94 	bl	8009e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008358:	2301      	movs	r3, #1
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e001      	b.n	8008362 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008362:	f001 fdbb 	bl	8009edc <vPortExitCritical>

	return xReturn;
 8008366:	68fb      	ldr	r3, [r7, #12]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008378:	f001 fd7e 	bl	8009e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008384:	429a      	cmp	r2, r3
 8008386:	d102      	bne.n	800838e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008388:	2301      	movs	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	e001      	b.n	8008392 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008392:	f001 fda3 	bl	8009edc <vPortExitCritical>

	return xReturn;
 8008396:	68fb      	ldr	r3, [r7, #12]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	e014      	b.n	80083da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083b0:	4a0f      	ldr	r2, [pc, #60]	@ (80083f0 <vQueueAddToRegistry+0x50>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083bc:	490c      	ldr	r1, [pc, #48]	@ (80083f0 <vQueueAddToRegistry+0x50>)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083c6:	4a0a      	ldr	r2, [pc, #40]	@ (80083f0 <vQueueAddToRegistry+0x50>)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	4413      	add	r3, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083d2:	e006      	b.n	80083e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3301      	adds	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b07      	cmp	r3, #7
 80083de:	d9e7      	bls.n	80083b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	2000117c 	.word	0x2000117c

080083f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e016      	b.n	8008430 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008402:	4a10      	ldr	r2, [pc, #64]	@ (8008444 <vQueueUnregisterQueue+0x50>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	4413      	add	r3, r2
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	429a      	cmp	r2, r3
 8008410:	d10b      	bne.n	800842a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008412:	4a0c      	ldr	r2, [pc, #48]	@ (8008444 <vQueueUnregisterQueue+0x50>)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2100      	movs	r1, #0
 8008418:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800841c:	4a09      	ldr	r2, [pc, #36]	@ (8008444 <vQueueUnregisterQueue+0x50>)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	4413      	add	r3, r2
 8008424:	2200      	movs	r2, #0
 8008426:	605a      	str	r2, [r3, #4]
				break;
 8008428:	e006      	b.n	8008438 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b07      	cmp	r3, #7
 8008434:	d9e5      	bls.n	8008402 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	2000117c 	.word	0x2000117c

08008448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008458:	f001 fd0e 	bl	8009e78 <vPortEnterCritical>
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008462:	b25b      	sxtb	r3, r3
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d103      	bne.n	8008472 <vQueueWaitForMessageRestricted+0x2a>
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008478:	b25b      	sxtb	r3, r3
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847e:	d103      	bne.n	8008488 <vQueueWaitForMessageRestricted+0x40>
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008488:	f001 fd28 	bl	8009edc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	3324      	adds	r3, #36	@ 0x24
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fc7f 	bl	8008da0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084a2:	6978      	ldr	r0, [r7, #20]
 80084a4:	f7ff fefc 	bl	80082a0 <prvUnlockQueue>
	}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08e      	sub	sp, #56	@ 0x38
 80084b4:	af04      	add	r7, sp, #16
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	623b      	str	r3, [r7, #32]
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	e7fd      	b.n	80084d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10b      	bne.n	80084fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	61fb      	str	r3, [r7, #28]
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	e7fd      	b.n	80084f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084fa:	23a8      	movs	r3, #168	@ 0xa8
 80084fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2ba8      	cmp	r3, #168	@ 0xa8
 8008502:	d00b      	beq.n	800851c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	61bb      	str	r3, [r7, #24]
}
 8008516:	bf00      	nop
 8008518:	bf00      	nop
 800851a:	e7fd      	b.n	8008518 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800851c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800851e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008520:	2b00      	cmp	r3, #0
 8008522:	d01e      	beq.n	8008562 <xTaskCreateStatic+0xb2>
 8008524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008526:	2b00      	cmp	r3, #0
 8008528:	d01b      	beq.n	8008562 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800852a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008532:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008536:	2202      	movs	r2, #2
 8008538:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800853c:	2300      	movs	r3, #0
 800853e:	9303      	str	r3, [sp, #12]
 8008540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008542:	9302      	str	r3, [sp, #8]
 8008544:	f107 0314 	add.w	r3, r7, #20
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 f851 	bl	80085fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800855a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800855c:	f000 f8f6 	bl	800874c <prvAddNewTaskToReadyList>
 8008560:	e001      	b.n	8008566 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008566:	697b      	ldr	r3, [r7, #20]
	}
 8008568:	4618      	mov	r0, r3
 800856a:	3728      	adds	r7, #40	@ 0x28
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08c      	sub	sp, #48	@ 0x30
 8008574:	af04      	add	r7, sp, #16
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	4613      	mov	r3, r2
 800857e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4618      	mov	r0, r3
 8008586:	f001 fd99 	bl	800a0bc <pvPortMalloc>
 800858a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00e      	beq.n	80085b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008592:	20a8      	movs	r0, #168	@ 0xa8
 8008594:	f001 fd92 	bl	800a0bc <pvPortMalloc>
 8008598:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80085a6:	e005      	b.n	80085b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085a8:	6978      	ldr	r0, [r7, #20]
 80085aa:	f001 fe55 	bl	800a258 <vPortFree>
 80085ae:	e001      	b.n	80085b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d017      	beq.n	80085ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085c2:	88fa      	ldrh	r2, [r7, #6]
 80085c4:	2300      	movs	r3, #0
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	9302      	str	r3, [sp, #8]
 80085cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f80f 	bl	80085fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085de:	69f8      	ldr	r0, [r7, #28]
 80085e0:	f000 f8b4 	bl	800874c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085e4:	2301      	movs	r3, #1
 80085e6:	61bb      	str	r3, [r7, #24]
 80085e8:	e002      	b.n	80085f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085ea:	f04f 33ff 	mov.w	r3, #4294967295
 80085ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085f0:	69bb      	ldr	r3, [r7, #24]
	}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	461a      	mov	r2, r3
 8008614:	21a5      	movs	r1, #165	@ 0xa5
 8008616:	f001 ff4b 	bl	800a4b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008624:	3b01      	subs	r3, #1
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f023 0307 	bic.w	r3, r3, #7
 8008632:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	617b      	str	r3, [r7, #20]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01f      	beq.n	800869c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800865c:	2300      	movs	r3, #0
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	e012      	b.n	8008688 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	7819      	ldrb	r1, [r3, #0]
 800866a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	4413      	add	r3, r2
 8008670:	3334      	adds	r3, #52	@ 0x34
 8008672:	460a      	mov	r2, r1
 8008674:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d006      	beq.n	8008690 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	3301      	adds	r3, #1
 8008686:	61fb      	str	r3, [r7, #28]
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	2b0f      	cmp	r3, #15
 800868c:	d9e9      	bls.n	8008662 <prvInitialiseNewTask+0x66>
 800868e:	e000      	b.n	8008692 <prvInitialiseNewTask+0x96>
			{
				break;
 8008690:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800869a:	e003      	b.n	80086a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a6:	2b37      	cmp	r3, #55	@ 0x37
 80086a8:	d901      	bls.n	80086ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086aa:	2337      	movs	r3, #55	@ 0x37
 80086ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	2200      	movs	r2, #0
 80086be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	3304      	adds	r3, #4
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fdcd 	bl	8007264 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	3318      	adds	r3, #24
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fdc8 	bl	8007264 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	2200      	movs	r2, #0
 80086ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	3354      	adds	r3, #84	@ 0x54
 80086fe:	224c      	movs	r2, #76	@ 0x4c
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f001 fed4 	bl	800a4b0 <memset>
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	4a0d      	ldr	r2, [pc, #52]	@ (8008740 <prvInitialiseNewTask+0x144>)
 800870c:	659a      	str	r2, [r3, #88]	@ 0x58
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	4a0c      	ldr	r2, [pc, #48]	@ (8008744 <prvInitialiseNewTask+0x148>)
 8008712:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008716:	4a0c      	ldr	r2, [pc, #48]	@ (8008748 <prvInitialiseNewTask+0x14c>)
 8008718:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	68f9      	ldr	r1, [r7, #12]
 800871e:	69b8      	ldr	r0, [r7, #24]
 8008720:	f001 fa7c 	bl	8009c1c <pxPortInitialiseStack>
 8008724:	4602      	mov	r2, r0
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800872a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008736:	bf00      	nop
 8008738:	3720      	adds	r7, #32
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20005414 	.word	0x20005414
 8008744:	2000547c 	.word	0x2000547c
 8008748:	200054e4 	.word	0x200054e4

0800874c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008754:	f001 fb90 	bl	8009e78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008758:	4b2d      	ldr	r3, [pc, #180]	@ (8008810 <prvAddNewTaskToReadyList+0xc4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3301      	adds	r3, #1
 800875e:	4a2c      	ldr	r2, [pc, #176]	@ (8008810 <prvAddNewTaskToReadyList+0xc4>)
 8008760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008762:	4b2c      	ldr	r3, [pc, #176]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800876a:	4a2a      	ldr	r2, [pc, #168]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008770:	4b27      	ldr	r3, [pc, #156]	@ (8008810 <prvAddNewTaskToReadyList+0xc4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d110      	bne.n	800879a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008778:	f000 fc40 	bl	8008ffc <prvInitialiseTaskLists>
 800877c:	e00d      	b.n	800879a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800877e:	4b26      	ldr	r3, [pc, #152]	@ (8008818 <prvAddNewTaskToReadyList+0xcc>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008786:	4b23      	ldr	r3, [pc, #140]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008790:	429a      	cmp	r2, r3
 8008792:	d802      	bhi.n	800879a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008794:	4a1f      	ldr	r2, [pc, #124]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800879a:	4b20      	ldr	r3, [pc, #128]	@ (800881c <prvAddNewTaskToReadyList+0xd0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3301      	adds	r3, #1
 80087a0:	4a1e      	ldr	r2, [pc, #120]	@ (800881c <prvAddNewTaskToReadyList+0xd0>)
 80087a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087a4:	4b1d      	ldr	r3, [pc, #116]	@ (800881c <prvAddNewTaskToReadyList+0xd0>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008820 <prvAddNewTaskToReadyList+0xd4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d903      	bls.n	80087c0 <prvAddNewTaskToReadyList+0x74>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087bc:	4a18      	ldr	r2, [pc, #96]	@ (8008820 <prvAddNewTaskToReadyList+0xd4>)
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4a15      	ldr	r2, [pc, #84]	@ (8008824 <prvAddNewTaskToReadyList+0xd8>)
 80087ce:	441a      	add	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7fe fd51 	bl	800727e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087dc:	f001 fb7e 	bl	8009edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008818 <prvAddNewTaskToReadyList+0xcc>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00e      	beq.n	8008806 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d207      	bcs.n	8008806 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008828 <prvAddNewTaskToReadyList+0xdc>)
 80087f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20001690 	.word	0x20001690
 8008814:	200011bc 	.word	0x200011bc
 8008818:	2000169c 	.word	0x2000169c
 800881c:	200016ac 	.word	0x200016ac
 8008820:	20001698 	.word	0x20001698
 8008824:	200011c0 	.word	0x200011c0
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d018      	beq.n	8008870 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800883e:	4b14      	ldr	r3, [pc, #80]	@ (8008890 <vTaskDelay+0x64>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00b      	beq.n	800885e <vTaskDelay+0x32>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60bb      	str	r3, [r7, #8]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800885e:	f000 f88b 	bl	8008978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008862:	2100      	movs	r1, #0
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fe2b 	bl	80094c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800886a:	f000 f893 	bl	8008994 <xTaskResumeAll>
 800886e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008876:	4b07      	ldr	r3, [pc, #28]	@ (8008894 <vTaskDelay+0x68>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200016b8 	.word	0x200016b8
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08a      	sub	sp, #40	@ 0x28
 800889c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80088a6:	463a      	mov	r2, r7
 80088a8:	1d39      	adds	r1, r7, #4
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fc84 	bl	80071bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	9202      	str	r2, [sp, #8]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	2300      	movs	r3, #0
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	2300      	movs	r3, #0
 80088c4:	460a      	mov	r2, r1
 80088c6:	4924      	ldr	r1, [pc, #144]	@ (8008958 <vTaskStartScheduler+0xc0>)
 80088c8:	4824      	ldr	r0, [pc, #144]	@ (800895c <vTaskStartScheduler+0xc4>)
 80088ca:	f7ff fdf1 	bl	80084b0 <xTaskCreateStatic>
 80088ce:	4603      	mov	r3, r0
 80088d0:	4a23      	ldr	r2, [pc, #140]	@ (8008960 <vTaskStartScheduler+0xc8>)
 80088d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088d4:	4b22      	ldr	r3, [pc, #136]	@ (8008960 <vTaskStartScheduler+0xc8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088dc:	2301      	movs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e001      	b.n	80088e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d102      	bne.n	80088f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088ec:	f000 fe3c 	bl	8009568 <xTimerCreateTimerTask>
 80088f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d11b      	bne.n	8008930 <vTaskStartScheduler+0x98>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	613b      	str	r3, [r7, #16]
}
 800890a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800890c:	4b15      	ldr	r3, [pc, #84]	@ (8008964 <vTaskStartScheduler+0xcc>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3354      	adds	r3, #84	@ 0x54
 8008912:	4a15      	ldr	r2, [pc, #84]	@ (8008968 <vTaskStartScheduler+0xd0>)
 8008914:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008916:	4b15      	ldr	r3, [pc, #84]	@ (800896c <vTaskStartScheduler+0xd4>)
 8008918:	f04f 32ff 	mov.w	r2, #4294967295
 800891c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800891e:	4b14      	ldr	r3, [pc, #80]	@ (8008970 <vTaskStartScheduler+0xd8>)
 8008920:	2201      	movs	r2, #1
 8008922:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008924:	4b13      	ldr	r3, [pc, #76]	@ (8008974 <vTaskStartScheduler+0xdc>)
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800892a:	f001 fa01 	bl	8009d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800892e:	e00f      	b.n	8008950 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d10b      	bne.n	8008950 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	60fb      	str	r3, [r7, #12]
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	e7fd      	b.n	800894c <vTaskStartScheduler+0xb4>
}
 8008950:	bf00      	nop
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	0800a734 	.word	0x0800a734
 800895c:	08008fcd 	.word	0x08008fcd
 8008960:	200016b4 	.word	0x200016b4
 8008964:	200011bc 	.word	0x200011bc
 8008968:	20000018 	.word	0x20000018
 800896c:	200016b0 	.word	0x200016b0
 8008970:	2000169c 	.word	0x2000169c
 8008974:	20001694 	.word	0x20001694

08008978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800897c:	4b04      	ldr	r3, [pc, #16]	@ (8008990 <vTaskSuspendAll+0x18>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	4a03      	ldr	r2, [pc, #12]	@ (8008990 <vTaskSuspendAll+0x18>)
 8008984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008986:	bf00      	nop
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	200016b8 	.word	0x200016b8

08008994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800899e:	2300      	movs	r3, #0
 80089a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089a2:	4b42      	ldr	r3, [pc, #264]	@ (8008aac <xTaskResumeAll+0x118>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10b      	bne.n	80089c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	603b      	str	r3, [r7, #0]
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089c2:	f001 fa59 	bl	8009e78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089c6:	4b39      	ldr	r3, [pc, #228]	@ (8008aac <xTaskResumeAll+0x118>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	4a37      	ldr	r2, [pc, #220]	@ (8008aac <xTaskResumeAll+0x118>)
 80089ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d0:	4b36      	ldr	r3, [pc, #216]	@ (8008aac <xTaskResumeAll+0x118>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d162      	bne.n	8008a9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089d8:	4b35      	ldr	r3, [pc, #212]	@ (8008ab0 <xTaskResumeAll+0x11c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d05e      	beq.n	8008a9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089e0:	e02f      	b.n	8008a42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e2:	4b34      	ldr	r3, [pc, #208]	@ (8008ab4 <xTaskResumeAll+0x120>)
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3318      	adds	r3, #24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fca2 	bl	8007338 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3304      	adds	r3, #4
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fe fc9d 	bl	8007338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a02:	4b2d      	ldr	r3, [pc, #180]	@ (8008ab8 <xTaskResumeAll+0x124>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d903      	bls.n	8008a12 <xTaskResumeAll+0x7e>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ab8 <xTaskResumeAll+0x124>)
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4a27      	ldr	r2, [pc, #156]	@ (8008abc <xTaskResumeAll+0x128>)
 8008a20:	441a      	add	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3304      	adds	r3, #4
 8008a26:	4619      	mov	r1, r3
 8008a28:	4610      	mov	r0, r2
 8008a2a:	f7fe fc28 	bl	800727e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a32:	4b23      	ldr	r3, [pc, #140]	@ (8008ac0 <xTaskResumeAll+0x12c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d302      	bcc.n	8008a42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008a3c:	4b21      	ldr	r3, [pc, #132]	@ (8008ac4 <xTaskResumeAll+0x130>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a42:	4b1c      	ldr	r3, [pc, #112]	@ (8008ab4 <xTaskResumeAll+0x120>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1cb      	bne.n	80089e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a50:	f000 fb78 	bl	8009144 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a54:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac8 <xTaskResumeAll+0x134>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d010      	beq.n	8008a82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a60:	f000 f858 	bl	8008b14 <xTaskIncrementTick>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008a6a:	4b16      	ldr	r3, [pc, #88]	@ (8008ac4 <xTaskResumeAll+0x130>)
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1f1      	bne.n	8008a60 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008a7c:	4b12      	ldr	r3, [pc, #72]	@ (8008ac8 <xTaskResumeAll+0x134>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a82:	4b10      	ldr	r3, [pc, #64]	@ (8008ac4 <xTaskResumeAll+0x130>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008acc <xTaskResumeAll+0x138>)
 8008a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a9e:	f001 fa1d 	bl	8009edc <vPortExitCritical>

	return xAlreadyYielded;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	200016b8 	.word	0x200016b8
 8008ab0:	20001690 	.word	0x20001690
 8008ab4:	20001650 	.word	0x20001650
 8008ab8:	20001698 	.word	0x20001698
 8008abc:	200011c0 	.word	0x200011c0
 8008ac0:	200011bc 	.word	0x200011bc
 8008ac4:	200016a4 	.word	0x200016a4
 8008ac8:	200016a0 	.word	0x200016a0
 8008acc:	e000ed04 	.word	0xe000ed04

08008ad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ad6:	4b05      	ldr	r3, [pc, #20]	@ (8008aec <xTaskGetTickCount+0x1c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008adc:	687b      	ldr	r3, [r7, #4]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	20001694 	.word	0x20001694

08008af0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008af6:	f001 fa9f 	bl	800a038 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008afa:	2300      	movs	r3, #0
 8008afc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008afe:	4b04      	ldr	r3, [pc, #16]	@ (8008b10 <xTaskGetTickCountFromISR+0x20>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b04:	683b      	ldr	r3, [r7, #0]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20001694 	.word	0x20001694

08008b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8008c5c <xTaskIncrementTick+0x148>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f040 8090 	bne.w	8008c48 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b28:	4b4d      	ldr	r3, [pc, #308]	@ (8008c60 <xTaskIncrementTick+0x14c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b30:	4a4b      	ldr	r2, [pc, #300]	@ (8008c60 <xTaskIncrementTick+0x14c>)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d121      	bne.n	8008b80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b3c:	4b49      	ldr	r3, [pc, #292]	@ (8008c64 <xTaskIncrementTick+0x150>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00b      	beq.n	8008b5e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	603b      	str	r3, [r7, #0]
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	e7fd      	b.n	8008b5a <xTaskIncrementTick+0x46>
 8008b5e:	4b41      	ldr	r3, [pc, #260]	@ (8008c64 <xTaskIncrementTick+0x150>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	4b40      	ldr	r3, [pc, #256]	@ (8008c68 <xTaskIncrementTick+0x154>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a3e      	ldr	r2, [pc, #248]	@ (8008c64 <xTaskIncrementTick+0x150>)
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	4a3e      	ldr	r2, [pc, #248]	@ (8008c68 <xTaskIncrementTick+0x154>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	4b3e      	ldr	r3, [pc, #248]	@ (8008c6c <xTaskIncrementTick+0x158>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3301      	adds	r3, #1
 8008b78:	4a3c      	ldr	r2, [pc, #240]	@ (8008c6c <xTaskIncrementTick+0x158>)
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	f000 fae2 	bl	8009144 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b80:	4b3b      	ldr	r3, [pc, #236]	@ (8008c70 <xTaskIncrementTick+0x15c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d349      	bcc.n	8008c1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b8a:	4b36      	ldr	r3, [pc, #216]	@ (8008c64 <xTaskIncrementTick+0x150>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b94:	4b36      	ldr	r3, [pc, #216]	@ (8008c70 <xTaskIncrementTick+0x15c>)
 8008b96:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9a:	601a      	str	r2, [r3, #0]
					break;
 8008b9c:	e03f      	b.n	8008c1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9e:	4b31      	ldr	r3, [pc, #196]	@ (8008c64 <xTaskIncrementTick+0x150>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d203      	bcs.n	8008bbe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8008c70 <xTaskIncrementTick+0x15c>)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008bbc:	e02f      	b.n	8008c1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fbb8 	bl	8007338 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3318      	adds	r3, #24
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe fbaf 	bl	8007338 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bde:	4b25      	ldr	r3, [pc, #148]	@ (8008c74 <xTaskIncrementTick+0x160>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d903      	bls.n	8008bee <xTaskIncrementTick+0xda>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bea:	4a22      	ldr	r2, [pc, #136]	@ (8008c74 <xTaskIncrementTick+0x160>)
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8008c78 <xTaskIncrementTick+0x164>)
 8008bfc:	441a      	add	r2, r3
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	3304      	adds	r3, #4
 8008c02:	4619      	mov	r1, r3
 8008c04:	4610      	mov	r0, r2
 8008c06:	f7fe fb3a 	bl	800727e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008c7c <xTaskIncrementTick+0x168>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d3b8      	bcc.n	8008b8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c1c:	e7b5      	b.n	8008b8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c1e:	4b17      	ldr	r3, [pc, #92]	@ (8008c7c <xTaskIncrementTick+0x168>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c24:	4914      	ldr	r1, [pc, #80]	@ (8008c78 <xTaskIncrementTick+0x164>)
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d901      	bls.n	8008c3a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008c36:	2301      	movs	r3, #1
 8008c38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c3a:	4b11      	ldr	r3, [pc, #68]	@ (8008c80 <xTaskIncrementTick+0x16c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008c42:	2301      	movs	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	e004      	b.n	8008c52 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c48:	4b0e      	ldr	r3, [pc, #56]	@ (8008c84 <xTaskIncrementTick+0x170>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c84 <xTaskIncrementTick+0x170>)
 8008c50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c52:	697b      	ldr	r3, [r7, #20]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	200016b8 	.word	0x200016b8
 8008c60:	20001694 	.word	0x20001694
 8008c64:	20001648 	.word	0x20001648
 8008c68:	2000164c 	.word	0x2000164c
 8008c6c:	200016a8 	.word	0x200016a8
 8008c70:	200016b0 	.word	0x200016b0
 8008c74:	20001698 	.word	0x20001698
 8008c78:	200011c0 	.word	0x200011c0
 8008c7c:	200011bc 	.word	0x200011bc
 8008c80:	200016a4 	.word	0x200016a4
 8008c84:	200016a0 	.word	0x200016a0

08008c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8008d3c <vTaskSwitchContext+0xb4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c96:	4b2a      	ldr	r3, [pc, #168]	@ (8008d40 <vTaskSwitchContext+0xb8>)
 8008c98:	2201      	movs	r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c9c:	e047      	b.n	8008d2e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008c9e:	4b28      	ldr	r3, [pc, #160]	@ (8008d40 <vTaskSwitchContext+0xb8>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca4:	4b27      	ldr	r3, [pc, #156]	@ (8008d44 <vTaskSwitchContext+0xbc>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	e011      	b.n	8008cd0 <vTaskSwitchContext+0x48>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10b      	bne.n	8008cca <vTaskSwitchContext+0x42>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	607b      	str	r3, [r7, #4]
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	e7fd      	b.n	8008cc6 <vTaskSwitchContext+0x3e>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	491d      	ldr	r1, [pc, #116]	@ (8008d48 <vTaskSwitchContext+0xc0>)
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0e3      	beq.n	8008cac <vTaskSwitchContext+0x24>
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4a16      	ldr	r2, [pc, #88]	@ (8008d48 <vTaskSwitchContext+0xc0>)
 8008cf0:	4413      	add	r3, r2
 8008cf2:	60bb      	str	r3, [r7, #8]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	605a      	str	r2, [r3, #4]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	3308      	adds	r3, #8
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d104      	bne.n	8008d14 <vTaskSwitchContext+0x8c>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	605a      	str	r2, [r3, #4]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d4c <vTaskSwitchContext+0xc4>)
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	4a09      	ldr	r2, [pc, #36]	@ (8008d44 <vTaskSwitchContext+0xbc>)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d24:	4b09      	ldr	r3, [pc, #36]	@ (8008d4c <vTaskSwitchContext+0xc4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3354      	adds	r3, #84	@ 0x54
 8008d2a:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <vTaskSwitchContext+0xc8>)
 8008d2c:	6013      	str	r3, [r2, #0]
}
 8008d2e:	bf00      	nop
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	200016b8 	.word	0x200016b8
 8008d40:	200016a4 	.word	0x200016a4
 8008d44:	20001698 	.word	0x20001698
 8008d48:	200011c0 	.word	0x200011c0
 8008d4c:	200011bc 	.word	0x200011bc
 8008d50:	20000018 	.word	0x20000018

08008d54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10b      	bne.n	8008d7c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	60fb      	str	r3, [r7, #12]
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d7c:	4b07      	ldr	r3, [pc, #28]	@ (8008d9c <vTaskPlaceOnEventList+0x48>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3318      	adds	r3, #24
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7fe fa9e 	bl	80072c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	6838      	ldr	r0, [r7, #0]
 8008d8e:	f000 fb97 	bl	80094c0 <prvAddCurrentTaskToDelayedList>
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	200011bc 	.word	0x200011bc

08008da0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10b      	bne.n	8008dca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	617b      	str	r3, [r7, #20]
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	e7fd      	b.n	8008dc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dca:	4b0a      	ldr	r3, [pc, #40]	@ (8008df4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3318      	adds	r3, #24
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7fe fa53 	bl	800727e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008dde:	f04f 33ff 	mov.w	r3, #4294967295
 8008de2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	68b8      	ldr	r0, [r7, #8]
 8008de8:	f000 fb6a 	bl	80094c0 <prvAddCurrentTaskToDelayedList>
	}
 8008dec:	bf00      	nop
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200011bc 	.word	0x200011bc

08008df8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10b      	bne.n	8008e26 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	60fb      	str	r3, [r7, #12]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3318      	adds	r3, #24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fa84 	bl	8007338 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e30:	4b1d      	ldr	r3, [pc, #116]	@ (8008ea8 <xTaskRemoveFromEventList+0xb0>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11d      	bne.n	8008e74 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe fa7b 	bl	8007338 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e46:	4b19      	ldr	r3, [pc, #100]	@ (8008eac <xTaskRemoveFromEventList+0xb4>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d903      	bls.n	8008e56 <xTaskRemoveFromEventList+0x5e>
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e52:	4a16      	ldr	r2, [pc, #88]	@ (8008eac <xTaskRemoveFromEventList+0xb4>)
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4a13      	ldr	r2, [pc, #76]	@ (8008eb0 <xTaskRemoveFromEventList+0xb8>)
 8008e64:	441a      	add	r2, r3
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	f7fe fa06 	bl	800727e <vListInsertEnd>
 8008e72:	e005      	b.n	8008e80 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	3318      	adds	r3, #24
 8008e78:	4619      	mov	r1, r3
 8008e7a:	480e      	ldr	r0, [pc, #56]	@ (8008eb4 <xTaskRemoveFromEventList+0xbc>)
 8008e7c:	f7fe f9ff 	bl	800727e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e84:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb8 <xTaskRemoveFromEventList+0xc0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d905      	bls.n	8008e9a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e92:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <xTaskRemoveFromEventList+0xc4>)
 8008e94:	2201      	movs	r2, #1
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	e001      	b.n	8008e9e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e9e:	697b      	ldr	r3, [r7, #20]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	200016b8 	.word	0x200016b8
 8008eac:	20001698 	.word	0x20001698
 8008eb0:	200011c0 	.word	0x200011c0
 8008eb4:	20001650 	.word	0x20001650
 8008eb8:	200011bc 	.word	0x200011bc
 8008ebc:	200016a4 	.word	0x200016a4

08008ec0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ec8:	4b06      	ldr	r3, [pc, #24]	@ (8008ee4 <vTaskInternalSetTimeOutState+0x24>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ed0:	4b05      	ldr	r3, [pc, #20]	@ (8008ee8 <vTaskInternalSetTimeOutState+0x28>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	605a      	str	r2, [r3, #4]
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	200016a8 	.word	0x200016a8
 8008ee8:	20001694 	.word	0x20001694

08008eec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10b      	bne.n	8008f14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	613b      	str	r3, [r7, #16]
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	e7fd      	b.n	8008f10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10b      	bne.n	8008f32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60fb      	str	r3, [r7, #12]
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	e7fd      	b.n	8008f2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008f32:	f000 ffa1 	bl	8009e78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f36:	4b1d      	ldr	r3, [pc, #116]	@ (8008fac <xTaskCheckForTimeOut+0xc0>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d102      	bne.n	8008f56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	61fb      	str	r3, [r7, #28]
 8008f54:	e023      	b.n	8008f9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b15      	ldr	r3, [pc, #84]	@ (8008fb0 <xTaskCheckForTimeOut+0xc4>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d007      	beq.n	8008f72 <xTaskCheckForTimeOut+0x86>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d302      	bcc.n	8008f72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	61fb      	str	r3, [r7, #28]
 8008f70:	e015      	b.n	8008f9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d20b      	bcs.n	8008f94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff ff99 	bl	8008ec0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	e004      	b.n	8008f9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f9e:	f000 ff9d 	bl	8009edc <vPortExitCritical>

	return xReturn;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20001694 	.word	0x20001694
 8008fb0:	200016a8 	.word	0x200016a8

08008fb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008fb8:	4b03      	ldr	r3, [pc, #12]	@ (8008fc8 <vTaskMissedYield+0x14>)
 8008fba:	2201      	movs	r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]
}
 8008fbe:	bf00      	nop
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	200016a4 	.word	0x200016a4

08008fcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fd4:	f000 f852 	bl	800907c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fd8:	4b06      	ldr	r3, [pc, #24]	@ (8008ff4 <prvIdleTask+0x28>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d9f9      	bls.n	8008fd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fe0:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <prvIdleTask+0x2c>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ff0:	e7f0      	b.n	8008fd4 <prvIdleTask+0x8>
 8008ff2:	bf00      	nop
 8008ff4:	200011c0 	.word	0x200011c0
 8008ff8:	e000ed04 	.word	0xe000ed04

08008ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009002:	2300      	movs	r3, #0
 8009004:	607b      	str	r3, [r7, #4]
 8009006:	e00c      	b.n	8009022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4a12      	ldr	r2, [pc, #72]	@ (800905c <prvInitialiseTaskLists+0x60>)
 8009014:	4413      	add	r3, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe f904 	bl	8007224 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3301      	adds	r3, #1
 8009020:	607b      	str	r3, [r7, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b37      	cmp	r3, #55	@ 0x37
 8009026:	d9ef      	bls.n	8009008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009028:	480d      	ldr	r0, [pc, #52]	@ (8009060 <prvInitialiseTaskLists+0x64>)
 800902a:	f7fe f8fb 	bl	8007224 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800902e:	480d      	ldr	r0, [pc, #52]	@ (8009064 <prvInitialiseTaskLists+0x68>)
 8009030:	f7fe f8f8 	bl	8007224 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009034:	480c      	ldr	r0, [pc, #48]	@ (8009068 <prvInitialiseTaskLists+0x6c>)
 8009036:	f7fe f8f5 	bl	8007224 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800903a:	480c      	ldr	r0, [pc, #48]	@ (800906c <prvInitialiseTaskLists+0x70>)
 800903c:	f7fe f8f2 	bl	8007224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009040:	480b      	ldr	r0, [pc, #44]	@ (8009070 <prvInitialiseTaskLists+0x74>)
 8009042:	f7fe f8ef 	bl	8007224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009046:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <prvInitialiseTaskLists+0x78>)
 8009048:	4a05      	ldr	r2, [pc, #20]	@ (8009060 <prvInitialiseTaskLists+0x64>)
 800904a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800904c:	4b0a      	ldr	r3, [pc, #40]	@ (8009078 <prvInitialiseTaskLists+0x7c>)
 800904e:	4a05      	ldr	r2, [pc, #20]	@ (8009064 <prvInitialiseTaskLists+0x68>)
 8009050:	601a      	str	r2, [r3, #0]
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	200011c0 	.word	0x200011c0
 8009060:	20001620 	.word	0x20001620
 8009064:	20001634 	.word	0x20001634
 8009068:	20001650 	.word	0x20001650
 800906c:	20001664 	.word	0x20001664
 8009070:	2000167c 	.word	0x2000167c
 8009074:	20001648 	.word	0x20001648
 8009078:	2000164c 	.word	0x2000164c

0800907c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009082:	e019      	b.n	80090b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009084:	f000 fef8 	bl	8009e78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009088:	4b10      	ldr	r3, [pc, #64]	@ (80090cc <prvCheckTasksWaitingTermination+0x50>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	3304      	adds	r3, #4
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe f94f 	bl	8007338 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800909a:	4b0d      	ldr	r3, [pc, #52]	@ (80090d0 <prvCheckTasksWaitingTermination+0x54>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3b01      	subs	r3, #1
 80090a0:	4a0b      	ldr	r2, [pc, #44]	@ (80090d0 <prvCheckTasksWaitingTermination+0x54>)
 80090a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090a4:	4b0b      	ldr	r3, [pc, #44]	@ (80090d4 <prvCheckTasksWaitingTermination+0x58>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	4a0a      	ldr	r2, [pc, #40]	@ (80090d4 <prvCheckTasksWaitingTermination+0x58>)
 80090ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80090ae:	f000 ff15 	bl	8009edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f810 	bl	80090d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090b8:	4b06      	ldr	r3, [pc, #24]	@ (80090d4 <prvCheckTasksWaitingTermination+0x58>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e1      	bne.n	8009084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20001664 	.word	0x20001664
 80090d0:	20001690 	.word	0x20001690
 80090d4:	20001678 	.word	0x20001678

080090d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3354      	adds	r3, #84	@ 0x54
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f9eb 	bl	800a4c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d108      	bne.n	8009106 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 f8ad 	bl	800a258 <vPortFree>
				vPortFree( pxTCB );
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f001 f8aa 	bl	800a258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009104:	e019      	b.n	800913a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800910c:	2b01      	cmp	r3, #1
 800910e:	d103      	bne.n	8009118 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 f8a1 	bl	800a258 <vPortFree>
	}
 8009116:	e010      	b.n	800913a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800911e:	2b02      	cmp	r3, #2
 8009120:	d00b      	beq.n	800913a <prvDeleteTCB+0x62>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	60fb      	str	r3, [r7, #12]
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop
 8009138:	e7fd      	b.n	8009136 <prvDeleteTCB+0x5e>
	}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914a:	4b0c      	ldr	r3, [pc, #48]	@ (800917c <prvResetNextTaskUnblockTime+0x38>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d104      	bne.n	800915e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009154:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <prvResetNextTaskUnblockTime+0x3c>)
 8009156:	f04f 32ff 	mov.w	r2, #4294967295
 800915a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800915c:	e008      	b.n	8009170 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915e:	4b07      	ldr	r3, [pc, #28]	@ (800917c <prvResetNextTaskUnblockTime+0x38>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	4a04      	ldr	r2, [pc, #16]	@ (8009180 <prvResetNextTaskUnblockTime+0x3c>)
 800916e:	6013      	str	r3, [r2, #0]
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	20001648 	.word	0x20001648
 8009180:	200016b0 	.word	0x200016b0

08009184 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800918a:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009190:	687b      	ldr	r3, [r7, #4]
	}
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	200011bc 	.word	0x200011bc

080091a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091aa:	4b0b      	ldr	r3, [pc, #44]	@ (80091d8 <xTaskGetSchedulerState+0x34>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d102      	bne.n	80091b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091b2:	2301      	movs	r3, #1
 80091b4:	607b      	str	r3, [r7, #4]
 80091b6:	e008      	b.n	80091ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b8:	4b08      	ldr	r3, [pc, #32]	@ (80091dc <xTaskGetSchedulerState+0x38>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d102      	bne.n	80091c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091c0:	2302      	movs	r3, #2
 80091c2:	607b      	str	r3, [r7, #4]
 80091c4:	e001      	b.n	80091ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091c6:	2300      	movs	r3, #0
 80091c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091ca:	687b      	ldr	r3, [r7, #4]
	}
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	2000169c 	.word	0x2000169c
 80091dc:	200016b8 	.word	0x200016b8

080091e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d051      	beq.n	800929a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fa:	4b2a      	ldr	r3, [pc, #168]	@ (80092a4 <xTaskPriorityInherit+0xc4>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009200:	429a      	cmp	r2, r3
 8009202:	d241      	bcs.n	8009288 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	db06      	blt.n	800921a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800920c:	4b25      	ldr	r3, [pc, #148]	@ (80092a4 <xTaskPriorityInherit+0xc4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009212:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6959      	ldr	r1, [r3, #20]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4a1f      	ldr	r2, [pc, #124]	@ (80092a8 <xTaskPriorityInherit+0xc8>)
 800922c:	4413      	add	r3, r2
 800922e:	4299      	cmp	r1, r3
 8009230:	d122      	bne.n	8009278 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3304      	adds	r3, #4
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe f87e 	bl	8007338 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800923c:	4b19      	ldr	r3, [pc, #100]	@ (80092a4 <xTaskPriorityInherit+0xc4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800924a:	4b18      	ldr	r3, [pc, #96]	@ (80092ac <xTaskPriorityInherit+0xcc>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d903      	bls.n	800925a <xTaskPriorityInherit+0x7a>
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009256:	4a15      	ldr	r2, [pc, #84]	@ (80092ac <xTaskPriorityInherit+0xcc>)
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4a10      	ldr	r2, [pc, #64]	@ (80092a8 <xTaskPriorityInherit+0xc8>)
 8009268:	441a      	add	r2, r3
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	3304      	adds	r3, #4
 800926e:	4619      	mov	r1, r3
 8009270:	4610      	mov	r0, r2
 8009272:	f7fe f804 	bl	800727e <vListInsertEnd>
 8009276:	e004      	b.n	8009282 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009278:	4b0a      	ldr	r3, [pc, #40]	@ (80092a4 <xTaskPriorityInherit+0xc4>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009282:	2301      	movs	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	e008      	b.n	800929a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800928c:	4b05      	ldr	r3, [pc, #20]	@ (80092a4 <xTaskPriorityInherit+0xc4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009292:	429a      	cmp	r2, r3
 8009294:	d201      	bcs.n	800929a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009296:	2301      	movs	r3, #1
 8009298:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800929a:	68fb      	ldr	r3, [r7, #12]
	}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	200011bc 	.word	0x200011bc
 80092a8:	200011c0 	.word	0x200011c0
 80092ac:	20001698 	.word	0x20001698

080092b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d058      	beq.n	8009378 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092c6:	4b2f      	ldr	r3, [pc, #188]	@ (8009384 <xTaskPriorityDisinherit+0xd4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d00b      	beq.n	80092e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	e7fd      	b.n	80092e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10b      	bne.n	8009308 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60bb      	str	r3, [r7, #8]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800930c:	1e5a      	subs	r2, r3, #1
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800931a:	429a      	cmp	r2, r3
 800931c:	d02c      	beq.n	8009378 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009322:	2b00      	cmp	r3, #0
 8009324:	d128      	bne.n	8009378 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	3304      	adds	r3, #4
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe f804 	bl	8007338 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009348:	4b0f      	ldr	r3, [pc, #60]	@ (8009388 <xTaskPriorityDisinherit+0xd8>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d903      	bls.n	8009358 <xTaskPriorityDisinherit+0xa8>
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	4a0c      	ldr	r2, [pc, #48]	@ (8009388 <xTaskPriorityDisinherit+0xd8>)
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4a09      	ldr	r2, [pc, #36]	@ (800938c <xTaskPriorityDisinherit+0xdc>)
 8009366:	441a      	add	r2, r3
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	3304      	adds	r3, #4
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7fd ff85 	bl	800727e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009374:	2301      	movs	r3, #1
 8009376:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009378:	697b      	ldr	r3, [r7, #20]
	}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	200011bc 	.word	0x200011bc
 8009388:	20001698 	.word	0x20001698
 800938c:	200011c0 	.word	0x200011c0

08009390 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800939e:	2301      	movs	r3, #1
 80093a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d06c      	beq.n	8009482 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10b      	bne.n	80093c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	60fb      	str	r3, [r7, #12]
}
 80093c2:	bf00      	nop
 80093c4:	bf00      	nop
 80093c6:	e7fd      	b.n	80093c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d902      	bls.n	80093d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	61fb      	str	r3, [r7, #28]
 80093d6:	e002      	b.n	80093de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e2:	69fa      	ldr	r2, [r7, #28]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d04c      	beq.n	8009482 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d147      	bne.n	8009482 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093f2:	4b26      	ldr	r3, [pc, #152]	@ (800948c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d10b      	bne.n	8009414 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	60bb      	str	r3, [r7, #8]
}
 800940e:	bf00      	nop
 8009410:	bf00      	nop
 8009412:	e7fd      	b.n	8009410 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009418:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	2b00      	cmp	r3, #0
 8009426:	db04      	blt.n	8009432 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	6959      	ldr	r1, [r3, #20]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4a13      	ldr	r2, [pc, #76]	@ (8009490 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009442:	4413      	add	r3, r2
 8009444:	4299      	cmp	r1, r3
 8009446:	d11c      	bne.n	8009482 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	3304      	adds	r3, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f7fd ff73 	bl	8007338 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009456:	4b0f      	ldr	r3, [pc, #60]	@ (8009494 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d903      	bls.n	8009466 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009462:	4a0c      	ldr	r2, [pc, #48]	@ (8009494 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4a07      	ldr	r2, [pc, #28]	@ (8009490 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009474:	441a      	add	r2, r3
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	3304      	adds	r3, #4
 800947a:	4619      	mov	r1, r3
 800947c:	4610      	mov	r0, r2
 800947e:	f7fd fefe 	bl	800727e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009482:	bf00      	nop
 8009484:	3720      	adds	r7, #32
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	200011bc 	.word	0x200011bc
 8009490:	200011c0 	.word	0x200011c0
 8009494:	20001698 	.word	0x20001698

08009498 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009498:	b480      	push	{r7}
 800949a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800949c:	4b07      	ldr	r3, [pc, #28]	@ (80094bc <pvTaskIncrementMutexHeldCount+0x24>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80094a4:	4b05      	ldr	r3, [pc, #20]	@ (80094bc <pvTaskIncrementMutexHeldCount+0x24>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094aa:	3201      	adds	r2, #1
 80094ac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80094ae:	4b03      	ldr	r3, [pc, #12]	@ (80094bc <pvTaskIncrementMutexHeldCount+0x24>)
 80094b0:	681b      	ldr	r3, [r3, #0]
	}
 80094b2:	4618      	mov	r0, r3
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	200011bc 	.word	0x200011bc

080094c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094ca:	4b21      	ldr	r3, [pc, #132]	@ (8009550 <prvAddCurrentTaskToDelayedList+0x90>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094d0:	4b20      	ldr	r3, [pc, #128]	@ (8009554 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3304      	adds	r3, #4
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fd ff2e 	bl	8007338 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e2:	d10a      	bne.n	80094fa <prvAddCurrentTaskToDelayedList+0x3a>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d007      	beq.n	80094fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009554 <prvAddCurrentTaskToDelayedList+0x94>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4819      	ldr	r0, [pc, #100]	@ (8009558 <prvAddCurrentTaskToDelayedList+0x98>)
 80094f4:	f7fd fec3 	bl	800727e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094f8:	e026      	b.n	8009548 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4413      	add	r3, r2
 8009500:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009502:	4b14      	ldr	r3, [pc, #80]	@ (8009554 <prvAddCurrentTaskToDelayedList+0x94>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	429a      	cmp	r2, r3
 8009510:	d209      	bcs.n	8009526 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009512:	4b12      	ldr	r3, [pc, #72]	@ (800955c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	4b0f      	ldr	r3, [pc, #60]	@ (8009554 <prvAddCurrentTaskToDelayedList+0x94>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3304      	adds	r3, #4
 800951c:	4619      	mov	r1, r3
 800951e:	4610      	mov	r0, r2
 8009520:	f7fd fed1 	bl	80072c6 <vListInsert>
}
 8009524:	e010      	b.n	8009548 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009526:	4b0e      	ldr	r3, [pc, #56]	@ (8009560 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	4b0a      	ldr	r3, [pc, #40]	@ (8009554 <prvAddCurrentTaskToDelayedList+0x94>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3304      	adds	r3, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4610      	mov	r0, r2
 8009534:	f7fd fec7 	bl	80072c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009538:	4b0a      	ldr	r3, [pc, #40]	@ (8009564 <prvAddCurrentTaskToDelayedList+0xa4>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	429a      	cmp	r2, r3
 8009540:	d202      	bcs.n	8009548 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009542:	4a08      	ldr	r2, [pc, #32]	@ (8009564 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	6013      	str	r3, [r2, #0]
}
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20001694 	.word	0x20001694
 8009554:	200011bc 	.word	0x200011bc
 8009558:	2000167c 	.word	0x2000167c
 800955c:	2000164c 	.word	0x2000164c
 8009560:	20001648 	.word	0x20001648
 8009564:	200016b0 	.word	0x200016b0

08009568 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b08a      	sub	sp, #40	@ 0x28
 800956c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009572:	f000 fb13 	bl	8009b9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009576:	4b1d      	ldr	r3, [pc, #116]	@ (80095ec <xTimerCreateTimerTask+0x84>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d021      	beq.n	80095c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009582:	2300      	movs	r3, #0
 8009584:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009586:	1d3a      	adds	r2, r7, #4
 8009588:	f107 0108 	add.w	r1, r7, #8
 800958c:	f107 030c 	add.w	r3, r7, #12
 8009590:	4618      	mov	r0, r3
 8009592:	f7fd fe2d 	bl	80071f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	9202      	str	r2, [sp, #8]
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	2302      	movs	r3, #2
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	2300      	movs	r3, #0
 80095a6:	460a      	mov	r2, r1
 80095a8:	4911      	ldr	r1, [pc, #68]	@ (80095f0 <xTimerCreateTimerTask+0x88>)
 80095aa:	4812      	ldr	r0, [pc, #72]	@ (80095f4 <xTimerCreateTimerTask+0x8c>)
 80095ac:	f7fe ff80 	bl	80084b0 <xTaskCreateStatic>
 80095b0:	4603      	mov	r3, r0
 80095b2:	4a11      	ldr	r2, [pc, #68]	@ (80095f8 <xTimerCreateTimerTask+0x90>)
 80095b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095b6:	4b10      	ldr	r3, [pc, #64]	@ (80095f8 <xTimerCreateTimerTask+0x90>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095be:	2301      	movs	r3, #1
 80095c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10b      	bne.n	80095e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	613b      	str	r3, [r7, #16]
}
 80095da:	bf00      	nop
 80095dc:	bf00      	nop
 80095de:	e7fd      	b.n	80095dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80095e0:	697b      	ldr	r3, [r7, #20]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	200016ec 	.word	0x200016ec
 80095f0:	0800a73c 	.word	0x0800a73c
 80095f4:	08009735 	.word	0x08009735
 80095f8:	200016f0 	.word	0x200016f0

080095fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08a      	sub	sp, #40	@ 0x28
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800960a:	2300      	movs	r3, #0
 800960c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10b      	bne.n	800962c <xTimerGenericCommand+0x30>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	623b      	str	r3, [r7, #32]
}
 8009626:	bf00      	nop
 8009628:	bf00      	nop
 800962a:	e7fd      	b.n	8009628 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800962c:	4b19      	ldr	r3, [pc, #100]	@ (8009694 <xTimerGenericCommand+0x98>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d02a      	beq.n	800968a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b05      	cmp	r3, #5
 8009644:	dc18      	bgt.n	8009678 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009646:	f7ff fdad 	bl	80091a4 <xTaskGetSchedulerState>
 800964a:	4603      	mov	r3, r0
 800964c:	2b02      	cmp	r3, #2
 800964e:	d109      	bne.n	8009664 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009650:	4b10      	ldr	r3, [pc, #64]	@ (8009694 <xTimerGenericCommand+0x98>)
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	f107 0110 	add.w	r1, r7, #16
 8009658:	2300      	movs	r3, #0
 800965a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800965c:	f7fe f902 	bl	8007864 <xQueueGenericSend>
 8009660:	6278      	str	r0, [r7, #36]	@ 0x24
 8009662:	e012      	b.n	800968a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009664:	4b0b      	ldr	r3, [pc, #44]	@ (8009694 <xTimerGenericCommand+0x98>)
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	f107 0110 	add.w	r1, r7, #16
 800966c:	2300      	movs	r3, #0
 800966e:	2200      	movs	r2, #0
 8009670:	f7fe f8f8 	bl	8007864 <xQueueGenericSend>
 8009674:	6278      	str	r0, [r7, #36]	@ 0x24
 8009676:	e008      	b.n	800968a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009678:	4b06      	ldr	r3, [pc, #24]	@ (8009694 <xTimerGenericCommand+0x98>)
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	f107 0110 	add.w	r1, r7, #16
 8009680:	2300      	movs	r3, #0
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	f7fe f9f0 	bl	8007a68 <xQueueGenericSendFromISR>
 8009688:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800968c:	4618      	mov	r0, r3
 800968e:	3728      	adds	r7, #40	@ 0x28
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	200016ec 	.word	0x200016ec

08009698 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af02      	add	r7, sp, #8
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a2:	4b23      	ldr	r3, [pc, #140]	@ (8009730 <prvProcessExpiredTimer+0x98>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	3304      	adds	r3, #4
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fd fe41 	bl	8007338 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d023      	beq.n	800970c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	699a      	ldr	r2, [r3, #24]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	18d1      	adds	r1, r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	6978      	ldr	r0, [r7, #20]
 80096d2:	f000 f8d5 	bl	8009880 <prvInsertTimerInActiveList>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d020      	beq.n	800971e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096dc:	2300      	movs	r3, #0
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	2300      	movs	r3, #0
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	2100      	movs	r1, #0
 80096e6:	6978      	ldr	r0, [r7, #20]
 80096e8:	f7ff ff88 	bl	80095fc <xTimerGenericCommand>
 80096ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d114      	bne.n	800971e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	60fb      	str	r3, [r7, #12]
}
 8009706:	bf00      	nop
 8009708:	bf00      	nop
 800970a:	e7fd      	b.n	8009708 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009712:	f023 0301 	bic.w	r3, r3, #1
 8009716:	b2da      	uxtb	r2, r3
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	6978      	ldr	r0, [r7, #20]
 8009724:	4798      	blx	r3
}
 8009726:	bf00      	nop
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	200016e4 	.word	0x200016e4

08009734 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800973c:	f107 0308 	add.w	r3, r7, #8
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f859 	bl	80097f8 <prvGetNextExpireTime>
 8009746:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4619      	mov	r1, r3
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 f805 	bl	800975c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009752:	f000 f8d7 	bl	8009904 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009756:	bf00      	nop
 8009758:	e7f0      	b.n	800973c <prvTimerTask+0x8>
	...

0800975c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009766:	f7ff f907 	bl	8008978 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800976a:	f107 0308 	add.w	r3, r7, #8
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f866 	bl	8009840 <prvSampleTimeNow>
 8009774:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d130      	bne.n	80097de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <prvProcessTimerOrBlockTask+0x3c>
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	429a      	cmp	r2, r3
 8009788:	d806      	bhi.n	8009798 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800978a:	f7ff f903 	bl	8008994 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800978e:	68f9      	ldr	r1, [r7, #12]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff ff81 	bl	8009698 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009796:	e024      	b.n	80097e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d008      	beq.n	80097b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800979e:	4b13      	ldr	r3, [pc, #76]	@ (80097ec <prvProcessTimerOrBlockTask+0x90>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <prvProcessTimerOrBlockTask+0x50>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e000      	b.n	80097ae <prvProcessTimerOrBlockTask+0x52>
 80097ac:	2300      	movs	r3, #0
 80097ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097b0:	4b0f      	ldr	r3, [pc, #60]	@ (80097f0 <prvProcessTimerOrBlockTask+0x94>)
 80097b2:	6818      	ldr	r0, [r3, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	4619      	mov	r1, r3
 80097be:	f7fe fe43 	bl	8008448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097c2:	f7ff f8e7 	bl	8008994 <xTaskResumeAll>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097cc:	4b09      	ldr	r3, [pc, #36]	@ (80097f4 <prvProcessTimerOrBlockTask+0x98>)
 80097ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	f3bf 8f6f 	isb	sy
}
 80097dc:	e001      	b.n	80097e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097de:	f7ff f8d9 	bl	8008994 <xTaskResumeAll>
}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	200016e8 	.word	0x200016e8
 80097f0:	200016ec 	.word	0x200016ec
 80097f4:	e000ed04 	.word	0xe000ed04

080097f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009800:	4b0e      	ldr	r3, [pc, #56]	@ (800983c <prvGetNextExpireTime+0x44>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <prvGetNextExpireTime+0x16>
 800980a:	2201      	movs	r2, #1
 800980c:	e000      	b.n	8009810 <prvGetNextExpireTime+0x18>
 800980e:	2200      	movs	r2, #0
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d105      	bne.n	8009828 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800981c:	4b07      	ldr	r3, [pc, #28]	@ (800983c <prvGetNextExpireTime+0x44>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e001      	b.n	800982c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800982c:	68fb      	ldr	r3, [r7, #12]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	200016e4 	.word	0x200016e4

08009840 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009848:	f7ff f942 	bl	8008ad0 <xTaskGetTickCount>
 800984c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800984e:	4b0b      	ldr	r3, [pc, #44]	@ (800987c <prvSampleTimeNow+0x3c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	429a      	cmp	r2, r3
 8009856:	d205      	bcs.n	8009864 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009858:	f000 f93a 	bl	8009ad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	e002      	b.n	800986a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800986a:	4a04      	ldr	r2, [pc, #16]	@ (800987c <prvSampleTimeNow+0x3c>)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009870:	68fb      	ldr	r3, [r7, #12]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	200016f4 	.word	0x200016f4

08009880 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800988e:	2300      	movs	r3, #0
 8009890:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d812      	bhi.n	80098cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	1ad2      	subs	r2, r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d302      	bcc.n	80098ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e01b      	b.n	80098f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098ba:	4b10      	ldr	r3, [pc, #64]	@ (80098fc <prvInsertTimerInActiveList+0x7c>)
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3304      	adds	r3, #4
 80098c2:	4619      	mov	r1, r3
 80098c4:	4610      	mov	r0, r2
 80098c6:	f7fd fcfe 	bl	80072c6 <vListInsert>
 80098ca:	e012      	b.n	80098f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d206      	bcs.n	80098e2 <prvInsertTimerInActiveList+0x62>
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d302      	bcc.n	80098e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098dc:	2301      	movs	r3, #1
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	e007      	b.n	80098f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098e2:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <prvInsertTimerInActiveList+0x80>)
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3304      	adds	r3, #4
 80098ea:	4619      	mov	r1, r3
 80098ec:	4610      	mov	r0, r2
 80098ee:	f7fd fcea 	bl	80072c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098f2:	697b      	ldr	r3, [r7, #20]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	200016e8 	.word	0x200016e8
 8009900:	200016e4 	.word	0x200016e4

08009904 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08e      	sub	sp, #56	@ 0x38
 8009908:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800990a:	e0ce      	b.n	8009aaa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	da19      	bge.n	8009946 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009912:	1d3b      	adds	r3, r7, #4
 8009914:	3304      	adds	r3, #4
 8009916:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10b      	bne.n	8009936 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	61fb      	str	r3, [r7, #28]
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	e7fd      	b.n	8009932 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800993c:	6850      	ldr	r0, [r2, #4]
 800993e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009940:	6892      	ldr	r2, [r2, #8]
 8009942:	4611      	mov	r1, r2
 8009944:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f2c0 80ae 	blt.w	8009aaa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d004      	beq.n	8009964 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800995a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995c:	3304      	adds	r3, #4
 800995e:	4618      	mov	r0, r3
 8009960:	f7fd fcea 	bl	8007338 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009964:	463b      	mov	r3, r7
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff ff6a 	bl	8009840 <prvSampleTimeNow>
 800996c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b09      	cmp	r3, #9
 8009972:	f200 8097 	bhi.w	8009aa4 <prvProcessReceivedCommands+0x1a0>
 8009976:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <prvProcessReceivedCommands+0x78>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	080099a5 	.word	0x080099a5
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099a5 	.word	0x080099a5
 8009988:	08009a1b 	.word	0x08009a1b
 800998c:	08009a2f 	.word	0x08009a2f
 8009990:	08009a7b 	.word	0x08009a7b
 8009994:	080099a5 	.word	0x080099a5
 8009998:	080099a5 	.word	0x080099a5
 800999c:	08009a1b 	.word	0x08009a1b
 80099a0:	08009a2f 	.word	0x08009a2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099aa:	f043 0301 	orr.w	r3, r3, #1
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	18d1      	adds	r1, r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099c4:	f7ff ff5c 	bl	8009880 <prvInsertTimerInActiveList>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d06c      	beq.n	8009aa8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d061      	beq.n	8009aa8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	441a      	add	r2, r3
 80099ec:	2300      	movs	r3, #0
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	2300      	movs	r3, #0
 80099f2:	2100      	movs	r1, #0
 80099f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099f6:	f7ff fe01 	bl	80095fc <xTimerGenericCommand>
 80099fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d152      	bne.n	8009aa8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	61bb      	str	r3, [r7, #24]
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	e7fd      	b.n	8009a16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a2c:	e03d      	b.n	8009aaa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a34:	f043 0301 	orr.w	r3, r3, #1
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10b      	bne.n	8009a66 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	617b      	str	r3, [r7, #20]
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	e7fd      	b.n	8009a62 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6c:	18d1      	adds	r1, r2, r3
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a74:	f7ff ff04 	bl	8009880 <prvInsertTimerInActiveList>
					break;
 8009a78:	e017      	b.n	8009aaa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d103      	bne.n	8009a90 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a8a:	f000 fbe5 	bl	800a258 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a8e:	e00c      	b.n	8009aaa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a96:	f023 0301 	bic.w	r3, r3, #1
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009aa2:	e002      	b.n	8009aaa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009aa4:	bf00      	nop
 8009aa6:	e000      	b.n	8009aaa <prvProcessReceivedCommands+0x1a6>
					break;
 8009aa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aaa:	4b08      	ldr	r3, [pc, #32]	@ (8009acc <prvProcessReceivedCommands+0x1c8>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	1d39      	adds	r1, r7, #4
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe f876 	bl	8007ba4 <xQueueReceive>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f47f af26 	bne.w	800990c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	3730      	adds	r7, #48	@ 0x30
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	200016ec 	.word	0x200016ec

08009ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ad6:	e049      	b.n	8009b6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8009b94 <prvSwitchTimerLists+0xc4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8009b94 <prvSwitchTimerLists+0xc4>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fd fc21 	bl	8007338 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d02f      	beq.n	8009b6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4413      	add	r3, r2
 8009b14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d90e      	bls.n	8009b3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8009b94 <prvSwitchTimerLists+0xc4>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7fd fbc6 	bl	80072c6 <vListInsert>
 8009b3a:	e017      	b.n	8009b6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	2300      	movs	r3, #0
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	2100      	movs	r1, #0
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff fd58 	bl	80095fc <xTimerGenericCommand>
 8009b4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10b      	bne.n	8009b6c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	603b      	str	r3, [r7, #0]
}
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	e7fd      	b.n	8009b68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b6c:	4b09      	ldr	r3, [pc, #36]	@ (8009b94 <prvSwitchTimerLists+0xc4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1b0      	bne.n	8009ad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b76:	4b07      	ldr	r3, [pc, #28]	@ (8009b94 <prvSwitchTimerLists+0xc4>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b7c:	4b06      	ldr	r3, [pc, #24]	@ (8009b98 <prvSwitchTimerLists+0xc8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a04      	ldr	r2, [pc, #16]	@ (8009b94 <prvSwitchTimerLists+0xc4>)
 8009b82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b84:	4a04      	ldr	r2, [pc, #16]	@ (8009b98 <prvSwitchTimerLists+0xc8>)
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	6013      	str	r3, [r2, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	200016e4 	.word	0x200016e4
 8009b98:	200016e8 	.word	0x200016e8

08009b9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ba2:	f000 f969 	bl	8009e78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ba6:	4b15      	ldr	r3, [pc, #84]	@ (8009bfc <prvCheckForValidListAndQueue+0x60>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d120      	bne.n	8009bf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bae:	4814      	ldr	r0, [pc, #80]	@ (8009c00 <prvCheckForValidListAndQueue+0x64>)
 8009bb0:	f7fd fb38 	bl	8007224 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009bb4:	4813      	ldr	r0, [pc, #76]	@ (8009c04 <prvCheckForValidListAndQueue+0x68>)
 8009bb6:	f7fd fb35 	bl	8007224 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009bba:	4b13      	ldr	r3, [pc, #76]	@ (8009c08 <prvCheckForValidListAndQueue+0x6c>)
 8009bbc:	4a10      	ldr	r2, [pc, #64]	@ (8009c00 <prvCheckForValidListAndQueue+0x64>)
 8009bbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bc0:	4b12      	ldr	r3, [pc, #72]	@ (8009c0c <prvCheckForValidListAndQueue+0x70>)
 8009bc2:	4a10      	ldr	r2, [pc, #64]	@ (8009c04 <prvCheckForValidListAndQueue+0x68>)
 8009bc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	4b11      	ldr	r3, [pc, #68]	@ (8009c10 <prvCheckForValidListAndQueue+0x74>)
 8009bcc:	4a11      	ldr	r2, [pc, #68]	@ (8009c14 <prvCheckForValidListAndQueue+0x78>)
 8009bce:	2110      	movs	r1, #16
 8009bd0:	200a      	movs	r0, #10
 8009bd2:	f7fd fc45 	bl	8007460 <xQueueGenericCreateStatic>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	4a08      	ldr	r2, [pc, #32]	@ (8009bfc <prvCheckForValidListAndQueue+0x60>)
 8009bda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bdc:	4b07      	ldr	r3, [pc, #28]	@ (8009bfc <prvCheckForValidListAndQueue+0x60>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d005      	beq.n	8009bf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009be4:	4b05      	ldr	r3, [pc, #20]	@ (8009bfc <prvCheckForValidListAndQueue+0x60>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	490b      	ldr	r1, [pc, #44]	@ (8009c18 <prvCheckForValidListAndQueue+0x7c>)
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fbd8 	bl	80083a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bf0:	f000 f974 	bl	8009edc <vPortExitCritical>
}
 8009bf4:	bf00      	nop
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200016ec 	.word	0x200016ec
 8009c00:	200016bc 	.word	0x200016bc
 8009c04:	200016d0 	.word	0x200016d0
 8009c08:	200016e4 	.word	0x200016e4
 8009c0c:	200016e8 	.word	0x200016e8
 8009c10:	20001798 	.word	0x20001798
 8009c14:	200016f8 	.word	0x200016f8
 8009c18:	0800a744 	.word	0x0800a744

08009c1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3b04      	subs	r3, #4
 8009c2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f023 0201 	bic.w	r2, r3, #1
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3b04      	subs	r3, #4
 8009c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8009c80 <pxPortInitialiseStack+0x64>)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3b14      	subs	r3, #20
 8009c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3b04      	subs	r3, #4
 8009c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f06f 0202 	mvn.w	r2, #2
 8009c6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3b20      	subs	r3, #32
 8009c70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c72:	68fb      	ldr	r3, [r7, #12]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	08009c85 	.word	0x08009c85

08009c84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c8e:	4b13      	ldr	r3, [pc, #76]	@ (8009cdc <prvTaskExitError+0x58>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d00b      	beq.n	8009cb0 <prvTaskExitError+0x2c>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	60fb      	str	r3, [r7, #12]
}
 8009caa:	bf00      	nop
 8009cac:	bf00      	nop
 8009cae:	e7fd      	b.n	8009cac <prvTaskExitError+0x28>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	60bb      	str	r3, [r7, #8]
}
 8009cc2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cc4:	bf00      	nop
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d0fc      	beq.n	8009cc6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ccc:	bf00      	nop
 8009cce:	bf00      	nop
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000014 	.word	0x20000014

08009ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ce0:	4b07      	ldr	r3, [pc, #28]	@ (8009d00 <pxCurrentTCBConst2>)
 8009ce2:	6819      	ldr	r1, [r3, #0]
 8009ce4:	6808      	ldr	r0, [r1, #0]
 8009ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cea:	f380 8809 	msr	PSP, r0
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f04f 0000 	mov.w	r0, #0
 8009cf6:	f380 8811 	msr	BASEPRI, r0
 8009cfa:	4770      	bx	lr
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst2>:
 8009d00:	200011bc 	.word	0x200011bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d08:	4808      	ldr	r0, [pc, #32]	@ (8009d2c <prvPortStartFirstTask+0x24>)
 8009d0a:	6800      	ldr	r0, [r0, #0]
 8009d0c:	6800      	ldr	r0, [r0, #0]
 8009d0e:	f380 8808 	msr	MSP, r0
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f380 8814 	msr	CONTROL, r0
 8009d1a:	b662      	cpsie	i
 8009d1c:	b661      	cpsie	f
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	df00      	svc	0
 8009d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d2a:	bf00      	nop
 8009d2c:	e000ed08 	.word	0xe000ed08

08009d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d36:	4b47      	ldr	r3, [pc, #284]	@ (8009e54 <xPortStartScheduler+0x124>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a47      	ldr	r2, [pc, #284]	@ (8009e58 <xPortStartScheduler+0x128>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d10b      	bne.n	8009d58 <xPortStartScheduler+0x28>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	60fb      	str	r3, [r7, #12]
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d58:	4b3e      	ldr	r3, [pc, #248]	@ (8009e54 <xPortStartScheduler+0x124>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8009e5c <xPortStartScheduler+0x12c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d10b      	bne.n	8009d7a <xPortStartScheduler+0x4a>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	613b      	str	r3, [r7, #16]
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	e7fd      	b.n	8009d76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d7a:	4b39      	ldr	r3, [pc, #228]	@ (8009e60 <xPortStartScheduler+0x130>)
 8009d7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	22ff      	movs	r2, #255	@ 0xff
 8009d8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d94:	78fb      	ldrb	r3, [r7, #3]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	4b31      	ldr	r3, [pc, #196]	@ (8009e64 <xPortStartScheduler+0x134>)
 8009da0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009da2:	4b31      	ldr	r3, [pc, #196]	@ (8009e68 <xPortStartScheduler+0x138>)
 8009da4:	2207      	movs	r2, #7
 8009da6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009da8:	e009      	b.n	8009dbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009daa:	4b2f      	ldr	r3, [pc, #188]	@ (8009e68 <xPortStartScheduler+0x138>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	4a2d      	ldr	r2, [pc, #180]	@ (8009e68 <xPortStartScheduler+0x138>)
 8009db2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009db4:	78fb      	ldrb	r3, [r7, #3]
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dc6:	2b80      	cmp	r3, #128	@ 0x80
 8009dc8:	d0ef      	beq.n	8009daa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009dca:	4b27      	ldr	r3, [pc, #156]	@ (8009e68 <xPortStartScheduler+0x138>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f1c3 0307 	rsb	r3, r3, #7
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d00b      	beq.n	8009dee <xPortStartScheduler+0xbe>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	60bb      	str	r3, [r7, #8]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009dee:	4b1e      	ldr	r3, [pc, #120]	@ (8009e68 <xPortStartScheduler+0x138>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	021b      	lsls	r3, r3, #8
 8009df4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e68 <xPortStartScheduler+0x138>)
 8009df6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009df8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e68 <xPortStartScheduler+0x138>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e00:	4a19      	ldr	r2, [pc, #100]	@ (8009e68 <xPortStartScheduler+0x138>)
 8009e02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e0c:	4b17      	ldr	r3, [pc, #92]	@ (8009e6c <xPortStartScheduler+0x13c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a16      	ldr	r2, [pc, #88]	@ (8009e6c <xPortStartScheduler+0x13c>)
 8009e12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e18:	4b14      	ldr	r3, [pc, #80]	@ (8009e6c <xPortStartScheduler+0x13c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a13      	ldr	r2, [pc, #76]	@ (8009e6c <xPortStartScheduler+0x13c>)
 8009e1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009e22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e24:	f000 f8da 	bl	8009fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e28:	4b11      	ldr	r3, [pc, #68]	@ (8009e70 <xPortStartScheduler+0x140>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e2e:	f000 f8f9 	bl	800a024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <xPortStartScheduler+0x144>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a0f      	ldr	r2, [pc, #60]	@ (8009e74 <xPortStartScheduler+0x144>)
 8009e38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009e3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e3e:	f7ff ff63 	bl	8009d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e42:	f7fe ff21 	bl	8008c88 <vTaskSwitchContext>
	prvTaskExitError();
 8009e46:	f7ff ff1d 	bl	8009c84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	e000ed00 	.word	0xe000ed00
 8009e58:	410fc271 	.word	0x410fc271
 8009e5c:	410fc270 	.word	0x410fc270
 8009e60:	e000e400 	.word	0xe000e400
 8009e64:	200017e8 	.word	0x200017e8
 8009e68:	200017ec 	.word	0x200017ec
 8009e6c:	e000ed20 	.word	0xe000ed20
 8009e70:	20000014 	.word	0x20000014
 8009e74:	e000ef34 	.word	0xe000ef34

08009e78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	607b      	str	r3, [r7, #4]
}
 8009e90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e92:	4b10      	ldr	r3, [pc, #64]	@ (8009ed4 <vPortEnterCritical+0x5c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3301      	adds	r3, #1
 8009e98:	4a0e      	ldr	r2, [pc, #56]	@ (8009ed4 <vPortEnterCritical+0x5c>)
 8009e9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed4 <vPortEnterCritical+0x5c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d110      	bne.n	8009ec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed8 <vPortEnterCritical+0x60>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	603b      	str	r3, [r7, #0]
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	e7fd      	b.n	8009ec2 <vPortEnterCritical+0x4a>
	}
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20000014 	.word	0x20000014
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ee2:	4b12      	ldr	r3, [pc, #72]	@ (8009f2c <vPortExitCritical+0x50>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10b      	bne.n	8009f02 <vPortExitCritical+0x26>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	607b      	str	r3, [r7, #4]
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	e7fd      	b.n	8009efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f02:	4b0a      	ldr	r3, [pc, #40]	@ (8009f2c <vPortExitCritical+0x50>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	4a08      	ldr	r2, [pc, #32]	@ (8009f2c <vPortExitCritical+0x50>)
 8009f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f0c:	4b07      	ldr	r3, [pc, #28]	@ (8009f2c <vPortExitCritical+0x50>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d105      	bne.n	8009f20 <vPortExitCritical+0x44>
 8009f14:	2300      	movs	r3, #0
 8009f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	f383 8811 	msr	BASEPRI, r3
}
 8009f1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	20000014 	.word	0x20000014

08009f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f30:	f3ef 8009 	mrs	r0, PSP
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	4b15      	ldr	r3, [pc, #84]	@ (8009f90 <pxCurrentTCBConst>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	f01e 0f10 	tst.w	lr, #16
 8009f40:	bf08      	it	eq
 8009f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4a:	6010      	str	r0, [r2, #0]
 8009f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009f54:	f380 8811 	msr	BASEPRI, r0
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f7fe fe92 	bl	8008c88 <vTaskSwitchContext>
 8009f64:	f04f 0000 	mov.w	r0, #0
 8009f68:	f380 8811 	msr	BASEPRI, r0
 8009f6c:	bc09      	pop	{r0, r3}
 8009f6e:	6819      	ldr	r1, [r3, #0]
 8009f70:	6808      	ldr	r0, [r1, #0]
 8009f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f76:	f01e 0f10 	tst.w	lr, #16
 8009f7a:	bf08      	it	eq
 8009f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f80:	f380 8809 	msr	PSP, r0
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	f3af 8000 	nop.w

08009f90 <pxCurrentTCBConst>:
 8009f90:	200011bc 	.word	0x200011bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f94:	bf00      	nop
 8009f96:	bf00      	nop

08009f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	607b      	str	r3, [r7, #4]
}
 8009fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fb2:	f7fe fdaf 	bl	8008b14 <xTaskIncrementTick>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fbc:	4b06      	ldr	r3, [pc, #24]	@ (8009fd8 <xPortSysTickHandler+0x40>)
 8009fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	f383 8811 	msr	BASEPRI, r3
}
 8009fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	e000ed04 	.word	0xe000ed04

08009fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	@ (800a010 <vPortSetupTimerInterrupt+0x34>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fe6:	4b0b      	ldr	r3, [pc, #44]	@ (800a014 <vPortSetupTimerInterrupt+0x38>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fec:	4b0a      	ldr	r3, [pc, #40]	@ (800a018 <vPortSetupTimerInterrupt+0x3c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800a01c <vPortSetupTimerInterrupt+0x40>)
 8009ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff6:	099b      	lsrs	r3, r3, #6
 8009ff8:	4a09      	ldr	r2, [pc, #36]	@ (800a020 <vPortSetupTimerInterrupt+0x44>)
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ffe:	4b04      	ldr	r3, [pc, #16]	@ (800a010 <vPortSetupTimerInterrupt+0x34>)
 800a000:	2207      	movs	r2, #7
 800a002:	601a      	str	r2, [r3, #0]
}
 800a004:	bf00      	nop
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	e000e010 	.word	0xe000e010
 800a014:	e000e018 	.word	0xe000e018
 800a018:	20000008 	.word	0x20000008
 800a01c:	10624dd3 	.word	0x10624dd3
 800a020:	e000e014 	.word	0xe000e014

0800a024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a024:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a034 <vPortEnableVFP+0x10>
 800a028:	6801      	ldr	r1, [r0, #0]
 800a02a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a02e:	6001      	str	r1, [r0, #0]
 800a030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a032:	bf00      	nop
 800a034:	e000ed88 	.word	0xe000ed88

0800a038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a03e:	f3ef 8305 	mrs	r3, IPSR
 800a042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b0f      	cmp	r3, #15
 800a048:	d915      	bls.n	800a076 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a04a:	4a18      	ldr	r2, [pc, #96]	@ (800a0ac <vPortValidateInterruptPriority+0x74>)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a054:	4b16      	ldr	r3, [pc, #88]	@ (800a0b0 <vPortValidateInterruptPriority+0x78>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	7afa      	ldrb	r2, [r7, #11]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d20b      	bcs.n	800a076 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	607b      	str	r3, [r7, #4]
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	e7fd      	b.n	800a072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a076:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b4 <vPortValidateInterruptPriority+0x7c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a07e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b8 <vPortValidateInterruptPriority+0x80>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d90b      	bls.n	800a09e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	603b      	str	r3, [r7, #0]
}
 800a098:	bf00      	nop
 800a09a:	bf00      	nop
 800a09c:	e7fd      	b.n	800a09a <vPortValidateInterruptPriority+0x62>
	}
 800a09e:	bf00      	nop
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	e000e3f0 	.word	0xe000e3f0
 800a0b0:	200017e8 	.word	0x200017e8
 800a0b4:	e000ed0c 	.word	0xe000ed0c
 800a0b8:	200017ec 	.word	0x200017ec

0800a0bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08a      	sub	sp, #40	@ 0x28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0c8:	f7fe fc56 	bl	8008978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a240 <pvPortMalloc+0x184>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0d4:	f000 f924 	bl	800a320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a244 <pvPortMalloc+0x188>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f040 8095 	bne.w	800a210 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d01e      	beq.n	800a12a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a0ec:	2208      	movs	r2, #8
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d015      	beq.n	800a12a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f023 0307 	bic.w	r3, r3, #7
 800a104:	3308      	adds	r3, #8
 800a106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f003 0307 	and.w	r3, r3, #7
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00b      	beq.n	800a12a <pvPortMalloc+0x6e>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	617b      	str	r3, [r7, #20]
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop
 800a128:	e7fd      	b.n	800a126 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d06f      	beq.n	800a210 <pvPortMalloc+0x154>
 800a130:	4b45      	ldr	r3, [pc, #276]	@ (800a248 <pvPortMalloc+0x18c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	429a      	cmp	r2, r3
 800a138:	d86a      	bhi.n	800a210 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a13a:	4b44      	ldr	r3, [pc, #272]	@ (800a24c <pvPortMalloc+0x190>)
 800a13c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a13e:	4b43      	ldr	r3, [pc, #268]	@ (800a24c <pvPortMalloc+0x190>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a144:	e004      	b.n	800a150 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	429a      	cmp	r2, r3
 800a158:	d903      	bls.n	800a162 <pvPortMalloc+0xa6>
 800a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1f1      	bne.n	800a146 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a162:	4b37      	ldr	r3, [pc, #220]	@ (800a240 <pvPortMalloc+0x184>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a168:	429a      	cmp	r2, r3
 800a16a:	d051      	beq.n	800a210 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2208      	movs	r2, #8
 800a172:	4413      	add	r3, r2
 800a174:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	1ad2      	subs	r2, r2, r3
 800a186:	2308      	movs	r3, #8
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d920      	bls.n	800a1d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a18e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4413      	add	r3, r2
 800a194:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	f003 0307 	and.w	r3, r3, #7
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00b      	beq.n	800a1b8 <pvPortMalloc+0xfc>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	613b      	str	r3, [r7, #16]
}
 800a1b2:	bf00      	nop
 800a1b4:	bf00      	nop
 800a1b6:	e7fd      	b.n	800a1b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	1ad2      	subs	r2, r2, r3
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1ca:	69b8      	ldr	r0, [r7, #24]
 800a1cc:	f000 f90a 	bl	800a3e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a248 <pvPortMalloc+0x18c>)
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	4a1b      	ldr	r2, [pc, #108]	@ (800a248 <pvPortMalloc+0x18c>)
 800a1dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1de:	4b1a      	ldr	r3, [pc, #104]	@ (800a248 <pvPortMalloc+0x18c>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a250 <pvPortMalloc+0x194>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d203      	bcs.n	800a1f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1ea:	4b17      	ldr	r3, [pc, #92]	@ (800a248 <pvPortMalloc+0x18c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a18      	ldr	r2, [pc, #96]	@ (800a250 <pvPortMalloc+0x194>)
 800a1f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	4b13      	ldr	r3, [pc, #76]	@ (800a244 <pvPortMalloc+0x188>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a206:	4b13      	ldr	r3, [pc, #76]	@ (800a254 <pvPortMalloc+0x198>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3301      	adds	r3, #1
 800a20c:	4a11      	ldr	r2, [pc, #68]	@ (800a254 <pvPortMalloc+0x198>)
 800a20e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a210:	f7fe fbc0 	bl	8008994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <pvPortMalloc+0x17a>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	60fb      	str	r3, [r7, #12]
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	e7fd      	b.n	800a232 <pvPortMalloc+0x176>
	return pvReturn;
 800a236:	69fb      	ldr	r3, [r7, #28]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3728      	adds	r7, #40	@ 0x28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	200053f8 	.word	0x200053f8
 800a244:	2000540c 	.word	0x2000540c
 800a248:	200053fc 	.word	0x200053fc
 800a24c:	200053f0 	.word	0x200053f0
 800a250:	20005400 	.word	0x20005400
 800a254:	20005404 	.word	0x20005404

0800a258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d04f      	beq.n	800a30a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a26a:	2308      	movs	r3, #8
 800a26c:	425b      	negs	r3, r3
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	4413      	add	r3, r2
 800a272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	4b25      	ldr	r3, [pc, #148]	@ (800a314 <vPortFree+0xbc>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4013      	ands	r3, r2
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10b      	bne.n	800a29e <vPortFree+0x46>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	60fb      	str	r3, [r7, #12]
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	e7fd      	b.n	800a29a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00b      	beq.n	800a2be <vPortFree+0x66>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	60bb      	str	r3, [r7, #8]
}
 800a2b8:	bf00      	nop
 800a2ba:	bf00      	nop
 800a2bc:	e7fd      	b.n	800a2ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	4b14      	ldr	r3, [pc, #80]	@ (800a314 <vPortFree+0xbc>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01e      	beq.n	800a30a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d11a      	bne.n	800a30a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a314 <vPortFree+0xbc>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	401a      	ands	r2, r3
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2e4:	f7fe fb48 	bl	8008978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a318 <vPortFree+0xc0>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	4a09      	ldr	r2, [pc, #36]	@ (800a318 <vPortFree+0xc0>)
 800a2f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2f6:	6938      	ldr	r0, [r7, #16]
 800a2f8:	f000 f874 	bl	800a3e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2fc:	4b07      	ldr	r3, [pc, #28]	@ (800a31c <vPortFree+0xc4>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3301      	adds	r3, #1
 800a302:	4a06      	ldr	r2, [pc, #24]	@ (800a31c <vPortFree+0xc4>)
 800a304:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a306:	f7fe fb45 	bl	8008994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a30a:	bf00      	nop
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	2000540c 	.word	0x2000540c
 800a318:	200053fc 	.word	0x200053fc
 800a31c:	20005408 	.word	0x20005408

0800a320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a326:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a32a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a32c:	4b27      	ldr	r3, [pc, #156]	@ (800a3cc <prvHeapInit+0xac>)
 800a32e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00c      	beq.n	800a354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3307      	adds	r3, #7
 800a33e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 0307 	bic.w	r3, r3, #7
 800a346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a348:	68ba      	ldr	r2, [r7, #8]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	4a1f      	ldr	r2, [pc, #124]	@ (800a3cc <prvHeapInit+0xac>)
 800a350:	4413      	add	r3, r2
 800a352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a358:	4a1d      	ldr	r2, [pc, #116]	@ (800a3d0 <prvHeapInit+0xb0>)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a35e:	4b1c      	ldr	r3, [pc, #112]	@ (800a3d0 <prvHeapInit+0xb0>)
 800a360:	2200      	movs	r2, #0
 800a362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	4413      	add	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a36c:	2208      	movs	r2, #8
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	1a9b      	subs	r3, r3, r2
 800a372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 0307 	bic.w	r3, r3, #7
 800a37a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4a15      	ldr	r2, [pc, #84]	@ (800a3d4 <prvHeapInit+0xb4>)
 800a380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a382:	4b14      	ldr	r3, [pc, #80]	@ (800a3d4 <prvHeapInit+0xb4>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2200      	movs	r2, #0
 800a388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a38a:	4b12      	ldr	r3, [pc, #72]	@ (800a3d4 <prvHeapInit+0xb4>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2200      	movs	r2, #0
 800a390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	1ad2      	subs	r2, r2, r3
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d4 <prvHeapInit+0xb4>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a3d8 <prvHeapInit+0xb8>)
 800a3ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	4a09      	ldr	r2, [pc, #36]	@ (800a3dc <prvHeapInit+0xbc>)
 800a3b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3b8:	4b09      	ldr	r3, [pc, #36]	@ (800a3e0 <prvHeapInit+0xc0>)
 800a3ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a3be:	601a      	str	r2, [r3, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	200017f0 	.word	0x200017f0
 800a3d0:	200053f0 	.word	0x200053f0
 800a3d4:	200053f8 	.word	0x200053f8
 800a3d8:	20005400 	.word	0x20005400
 800a3dc:	200053fc 	.word	0x200053fc
 800a3e0:	2000540c 	.word	0x2000540c

0800a3e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3ec:	4b28      	ldr	r3, [pc, #160]	@ (800a490 <prvInsertBlockIntoFreeList+0xac>)
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	e002      	b.n	800a3f8 <prvInsertBlockIntoFreeList+0x14>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d8f7      	bhi.n	800a3f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	4413      	add	r3, r2
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	429a      	cmp	r2, r3
 800a412:	d108      	bne.n	800a426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	441a      	add	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	441a      	add	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d118      	bne.n	800a46c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	4b15      	ldr	r3, [pc, #84]	@ (800a494 <prvInsertBlockIntoFreeList+0xb0>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d00d      	beq.n	800a462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	441a      	add	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	e008      	b.n	800a474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a462:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <prvInsertBlockIntoFreeList+0xb0>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	e003      	b.n	800a474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d002      	beq.n	800a482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a482:	bf00      	nop
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	200053f0 	.word	0x200053f0
 800a494:	200053f8 	.word	0x200053f8

0800a498 <__malloc_lock>:
 800a498:	4801      	ldr	r0, [pc, #4]	@ (800a4a0 <__malloc_lock+0x8>)
 800a49a:	f7f8 bc70 	b.w	8002d7e <__retarget_lock_acquire_recursive>
 800a49e:	bf00      	nop
 800a4a0:	20000a18 	.word	0x20000a18

0800a4a4 <__malloc_unlock>:
 800a4a4:	4801      	ldr	r0, [pc, #4]	@ (800a4ac <__malloc_unlock+0x8>)
 800a4a6:	f7f8 bc7f 	b.w	8002da8 <__retarget_lock_release_recursive>
 800a4aa:	bf00      	nop
 800a4ac:	20000a18 	.word	0x20000a18

0800a4b0 <memset>:
 800a4b0:	4402      	add	r2, r0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d100      	bne.n	800a4ba <memset+0xa>
 800a4b8:	4770      	bx	lr
 800a4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a4be:	e7f9      	b.n	800a4b4 <memset+0x4>

0800a4c0 <_reclaim_reent>:
 800a4c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a578 <_reclaim_reent+0xb8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4283      	cmp	r3, r0
 800a4c6:	b570      	push	{r4, r5, r6, lr}
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	d053      	beq.n	800a574 <_reclaim_reent+0xb4>
 800a4cc:	69c3      	ldr	r3, [r0, #28]
 800a4ce:	b31b      	cbz	r3, 800a518 <_reclaim_reent+0x58>
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	b163      	cbz	r3, 800a4ee <_reclaim_reent+0x2e>
 800a4d4:	2500      	movs	r5, #0
 800a4d6:	69e3      	ldr	r3, [r4, #28]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	5959      	ldr	r1, [r3, r5]
 800a4dc:	b9b1      	cbnz	r1, 800a50c <_reclaim_reent+0x4c>
 800a4de:	3504      	adds	r5, #4
 800a4e0:	2d80      	cmp	r5, #128	@ 0x80
 800a4e2:	d1f8      	bne.n	800a4d6 <_reclaim_reent+0x16>
 800a4e4:	69e3      	ldr	r3, [r4, #28]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	68d9      	ldr	r1, [r3, #12]
 800a4ea:	f000 f879 	bl	800a5e0 <_free_r>
 800a4ee:	69e3      	ldr	r3, [r4, #28]
 800a4f0:	6819      	ldr	r1, [r3, #0]
 800a4f2:	b111      	cbz	r1, 800a4fa <_reclaim_reent+0x3a>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 f873 	bl	800a5e0 <_free_r>
 800a4fa:	69e3      	ldr	r3, [r4, #28]
 800a4fc:	689d      	ldr	r5, [r3, #8]
 800a4fe:	b15d      	cbz	r5, 800a518 <_reclaim_reent+0x58>
 800a500:	4629      	mov	r1, r5
 800a502:	4620      	mov	r0, r4
 800a504:	682d      	ldr	r5, [r5, #0]
 800a506:	f000 f86b 	bl	800a5e0 <_free_r>
 800a50a:	e7f8      	b.n	800a4fe <_reclaim_reent+0x3e>
 800a50c:	680e      	ldr	r6, [r1, #0]
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 f866 	bl	800a5e0 <_free_r>
 800a514:	4631      	mov	r1, r6
 800a516:	e7e1      	b.n	800a4dc <_reclaim_reent+0x1c>
 800a518:	6961      	ldr	r1, [r4, #20]
 800a51a:	b111      	cbz	r1, 800a522 <_reclaim_reent+0x62>
 800a51c:	4620      	mov	r0, r4
 800a51e:	f000 f85f 	bl	800a5e0 <_free_r>
 800a522:	69e1      	ldr	r1, [r4, #28]
 800a524:	b111      	cbz	r1, 800a52c <_reclaim_reent+0x6c>
 800a526:	4620      	mov	r0, r4
 800a528:	f000 f85a 	bl	800a5e0 <_free_r>
 800a52c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a52e:	b111      	cbz	r1, 800a536 <_reclaim_reent+0x76>
 800a530:	4620      	mov	r0, r4
 800a532:	f000 f855 	bl	800a5e0 <_free_r>
 800a536:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a538:	b111      	cbz	r1, 800a540 <_reclaim_reent+0x80>
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f850 	bl	800a5e0 <_free_r>
 800a540:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a542:	b111      	cbz	r1, 800a54a <_reclaim_reent+0x8a>
 800a544:	4620      	mov	r0, r4
 800a546:	f000 f84b 	bl	800a5e0 <_free_r>
 800a54a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a54c:	b111      	cbz	r1, 800a554 <_reclaim_reent+0x94>
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 f846 	bl	800a5e0 <_free_r>
 800a554:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a556:	b111      	cbz	r1, 800a55e <_reclaim_reent+0x9e>
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 f841 	bl	800a5e0 <_free_r>
 800a55e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a560:	b111      	cbz	r1, 800a568 <_reclaim_reent+0xa8>
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f83c 	bl	800a5e0 <_free_r>
 800a568:	6a23      	ldr	r3, [r4, #32]
 800a56a:	b11b      	cbz	r3, 800a574 <_reclaim_reent+0xb4>
 800a56c:	4620      	mov	r0, r4
 800a56e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a572:	4718      	bx	r3
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	bf00      	nop
 800a578:	20000018 	.word	0x20000018

0800a57c <__libc_init_array>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	4d0d      	ldr	r5, [pc, #52]	@ (800a5b4 <__libc_init_array+0x38>)
 800a580:	4c0d      	ldr	r4, [pc, #52]	@ (800a5b8 <__libc_init_array+0x3c>)
 800a582:	1b64      	subs	r4, r4, r5
 800a584:	10a4      	asrs	r4, r4, #2
 800a586:	2600      	movs	r6, #0
 800a588:	42a6      	cmp	r6, r4
 800a58a:	d109      	bne.n	800a5a0 <__libc_init_array+0x24>
 800a58c:	4d0b      	ldr	r5, [pc, #44]	@ (800a5bc <__libc_init_array+0x40>)
 800a58e:	4c0c      	ldr	r4, [pc, #48]	@ (800a5c0 <__libc_init_array+0x44>)
 800a590:	f000 f870 	bl	800a674 <_init>
 800a594:	1b64      	subs	r4, r4, r5
 800a596:	10a4      	asrs	r4, r4, #2
 800a598:	2600      	movs	r6, #0
 800a59a:	42a6      	cmp	r6, r4
 800a59c:	d105      	bne.n	800a5aa <__libc_init_array+0x2e>
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a4:	4798      	blx	r3
 800a5a6:	3601      	adds	r6, #1
 800a5a8:	e7ee      	b.n	800a588 <__libc_init_array+0xc>
 800a5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ae:	4798      	blx	r3
 800a5b0:	3601      	adds	r6, #1
 800a5b2:	e7f2      	b.n	800a59a <__libc_init_array+0x1e>
 800a5b4:	0800a860 	.word	0x0800a860
 800a5b8:	0800a860 	.word	0x0800a860
 800a5bc:	0800a860 	.word	0x0800a860
 800a5c0:	0800a864 	.word	0x0800a864

0800a5c4 <memcpy>:
 800a5c4:	440a      	add	r2, r1
 800a5c6:	4291      	cmp	r1, r2
 800a5c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5cc:	d100      	bne.n	800a5d0 <memcpy+0xc>
 800a5ce:	4770      	bx	lr
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5da:	4291      	cmp	r1, r2
 800a5dc:	d1f9      	bne.n	800a5d2 <memcpy+0xe>
 800a5de:	bd10      	pop	{r4, pc}

0800a5e0 <_free_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d041      	beq.n	800a66c <_free_r+0x8c>
 800a5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ec:	1f0c      	subs	r4, r1, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bfb8      	it	lt
 800a5f2:	18e4      	addlt	r4, r4, r3
 800a5f4:	f7ff ff50 	bl	800a498 <__malloc_lock>
 800a5f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a670 <_free_r+0x90>)
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	b933      	cbnz	r3, 800a60c <_free_r+0x2c>
 800a5fe:	6063      	str	r3, [r4, #4]
 800a600:	6014      	str	r4, [r2, #0]
 800a602:	4628      	mov	r0, r5
 800a604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a608:	f7ff bf4c 	b.w	800a4a4 <__malloc_unlock>
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	d908      	bls.n	800a622 <_free_r+0x42>
 800a610:	6820      	ldr	r0, [r4, #0]
 800a612:	1821      	adds	r1, r4, r0
 800a614:	428b      	cmp	r3, r1
 800a616:	bf01      	itttt	eq
 800a618:	6819      	ldreq	r1, [r3, #0]
 800a61a:	685b      	ldreq	r3, [r3, #4]
 800a61c:	1809      	addeq	r1, r1, r0
 800a61e:	6021      	streq	r1, [r4, #0]
 800a620:	e7ed      	b.n	800a5fe <_free_r+0x1e>
 800a622:	461a      	mov	r2, r3
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	b10b      	cbz	r3, 800a62c <_free_r+0x4c>
 800a628:	42a3      	cmp	r3, r4
 800a62a:	d9fa      	bls.n	800a622 <_free_r+0x42>
 800a62c:	6811      	ldr	r1, [r2, #0]
 800a62e:	1850      	adds	r0, r2, r1
 800a630:	42a0      	cmp	r0, r4
 800a632:	d10b      	bne.n	800a64c <_free_r+0x6c>
 800a634:	6820      	ldr	r0, [r4, #0]
 800a636:	4401      	add	r1, r0
 800a638:	1850      	adds	r0, r2, r1
 800a63a:	4283      	cmp	r3, r0
 800a63c:	6011      	str	r1, [r2, #0]
 800a63e:	d1e0      	bne.n	800a602 <_free_r+0x22>
 800a640:	6818      	ldr	r0, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	6053      	str	r3, [r2, #4]
 800a646:	4408      	add	r0, r1
 800a648:	6010      	str	r0, [r2, #0]
 800a64a:	e7da      	b.n	800a602 <_free_r+0x22>
 800a64c:	d902      	bls.n	800a654 <_free_r+0x74>
 800a64e:	230c      	movs	r3, #12
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	e7d6      	b.n	800a602 <_free_r+0x22>
 800a654:	6820      	ldr	r0, [r4, #0]
 800a656:	1821      	adds	r1, r4, r0
 800a658:	428b      	cmp	r3, r1
 800a65a:	bf04      	itt	eq
 800a65c:	6819      	ldreq	r1, [r3, #0]
 800a65e:	685b      	ldreq	r3, [r3, #4]
 800a660:	6063      	str	r3, [r4, #4]
 800a662:	bf04      	itt	eq
 800a664:	1809      	addeq	r1, r1, r0
 800a666:	6021      	streq	r1, [r4, #0]
 800a668:	6054      	str	r4, [r2, #4]
 800a66a:	e7ca      	b.n	800a602 <_free_r+0x22>
 800a66c:	bd38      	pop	{r3, r4, r5, pc}
 800a66e:	bf00      	nop
 800a670:	20005410 	.word	0x20005410

0800a674 <_init>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	bf00      	nop
 800a678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67a:	bc08      	pop	{r3}
 800a67c:	469e      	mov	lr, r3
 800a67e:	4770      	bx	lr

0800a680 <_fini>:
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	bf00      	nop
 800a684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a686:	bc08      	pop	{r3}
 800a688:	469e      	mov	lr, r3
 800a68a:	4770      	bx	lr
