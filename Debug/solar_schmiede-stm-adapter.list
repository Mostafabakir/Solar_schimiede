
solar_schmiede-stm-adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac1c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800adcc  0800adcc  0000bdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af98  0800af98  0000c068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800af98  0800af98  0000bf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afa0  0800afa0  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afa0  0800afa0  0000bfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afa4  0800afa4  0000bfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800afa8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c068  2**0
                  CONTENTS
 10 .bss          0000754c  20000068  20000068  0000c068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200075b4  200075b4  0000c068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ead6  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043c0  00000000  00000000  0002ab6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  0002ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001400  00000000  00000000  000308d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002746e  00000000  00000000  00031cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d49e  00000000  00000000  00059146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2fdd  00000000  00000000  000765e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001695c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e1c  00000000  00000000  00169604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00170420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800adb4 	.word	0x0800adb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800adb4 	.word	0x0800adb4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b988 	b.w	8000528 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	468e      	mov	lr, r1
 8000238:	4604      	mov	r4, r0
 800023a:	4688      	mov	r8, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d962      	bls.n	800030c <__udivmoddi4+0xdc>
 8000246:	fab2 f682 	clz	r6, r2
 800024a:	b14e      	cbz	r6, 8000260 <__udivmoddi4+0x30>
 800024c:	f1c6 0320 	rsb	r3, r6, #32
 8000250:	fa01 f806 	lsl.w	r8, r1, r6
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	40b7      	lsls	r7, r6
 800025a:	ea43 0808 	orr.w	r8, r3, r8
 800025e:	40b4      	lsls	r4, r6
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f fc87 	uxth.w	ip, r7
 8000268:	fbb8 f1fe 	udiv	r1, r8, lr
 800026c:	0c23      	lsrs	r3, r4, #16
 800026e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000276:	fb01 f20c 	mul.w	r2, r1, ip
 800027a:	429a      	cmp	r2, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x62>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f101 30ff 	add.w	r0, r1, #4294967295
 8000284:	f080 80ea 	bcs.w	800045c <__udivmoddi4+0x22c>
 8000288:	429a      	cmp	r2, r3
 800028a:	f240 80e7 	bls.w	800045c <__udivmoddi4+0x22c>
 800028e:	3902      	subs	r1, #2
 8000290:	443b      	add	r3, r7
 8000292:	1a9a      	subs	r2, r3, r2
 8000294:	b2a3      	uxth	r3, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a6:	459c      	cmp	ip, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x8e>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	f080 80d6 	bcs.w	8000460 <__udivmoddi4+0x230>
 80002b4:	459c      	cmp	ip, r3
 80002b6:	f240 80d3 	bls.w	8000460 <__udivmoddi4+0x230>
 80002ba:	443b      	add	r3, r7
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c2:	eba3 030c 	sub.w	r3, r3, ip
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40f3      	lsrs	r3, r6
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xb6>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb0>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa2>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x14c>
 80002ee:	4573      	cmp	r3, lr
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xc8>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 8105 	bhi.w	8000502 <__udivmoddi4+0x2d2>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4690      	mov	r8, r2
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e5      	beq.n	80002d2 <__udivmoddi4+0xa2>
 8000306:	e9c5 4800 	strd	r4, r8, [r5]
 800030a:	e7e2      	b.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	2a00      	cmp	r2, #0
 800030e:	f000 8090 	beq.w	8000432 <__udivmoddi4+0x202>
 8000312:	fab2 f682 	clz	r6, r2
 8000316:	2e00      	cmp	r6, #0
 8000318:	f040 80a4 	bne.w	8000464 <__udivmoddi4+0x234>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	0c03      	lsrs	r3, r0, #16
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	b280      	uxth	r0, r0
 8000326:	b2bc      	uxth	r4, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb2 fcfe 	udiv	ip, r2, lr
 800032e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000336:	fb04 f20c 	mul.w	r2, r4, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x11e>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x11c>
 8000346:	429a      	cmp	r2, r3
 8000348:	f200 80e0 	bhi.w	800050c <__udivmoddi4+0x2dc>
 800034c:	46c4      	mov	ip, r8
 800034e:	1a9b      	subs	r3, r3, r2
 8000350:	fbb3 f2fe 	udiv	r2, r3, lr
 8000354:	fb0e 3312 	mls	r3, lr, r2, r3
 8000358:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800035c:	fb02 f404 	mul.w	r4, r2, r4
 8000360:	429c      	cmp	r4, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x144>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f102 30ff 	add.w	r0, r2, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x142>
 800036c:	429c      	cmp	r4, r3
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2d6>
 8000372:	4602      	mov	r2, r0
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x98>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa0e f401 	lsl.w	r4, lr, r1
 800038c:	fa20 f306 	lsr.w	r3, r0, r6
 8000390:	fa2e fe06 	lsr.w	lr, lr, r6
 8000394:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	fa1f fc87 	uxth.w	ip, r7
 80003a2:	fbbe f0f9 	udiv	r0, lr, r9
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1a0>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c2:	f080 809c 	bcs.w	80004fe <__udivmoddi4+0x2ce>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f240 8099 	bls.w	80004fe <__udivmoddi4+0x2ce>
 80003cc:	3802      	subs	r0, #2
 80003ce:	443c      	add	r4, r7
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	fa1f fe83 	uxth.w	lr, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1ce>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f2:	f080 8082 	bcs.w	80004fa <__udivmoddi4+0x2ca>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d97f      	bls.n	80004fa <__udivmoddi4+0x2ca>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	fba0 ec02 	umull	lr, ip, r0, r2
 800040a:	4564      	cmp	r4, ip
 800040c:	4673      	mov	r3, lr
 800040e:	46e1      	mov	r9, ip
 8000410:	d362      	bcc.n	80004d8 <__udivmoddi4+0x2a8>
 8000412:	d05f      	beq.n	80004d4 <__udivmoddi4+0x2a4>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x1fe>
 8000416:	ebb8 0203 	subs.w	r2, r8, r3
 800041a:	eb64 0409 	sbc.w	r4, r4, r9
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431e      	orrs	r6, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c5 6400 	strd	r6, r4, [r5]
 800042e:	2100      	movs	r1, #0
 8000430:	e74f      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000432:	fbb1 fcf2 	udiv	ip, r1, r2
 8000436:	0c01      	lsrs	r1, r0, #16
 8000438:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800043c:	b280      	uxth	r0, r0
 800043e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000442:	463b      	mov	r3, r7
 8000444:	4638      	mov	r0, r7
 8000446:	463c      	mov	r4, r7
 8000448:	46b8      	mov	r8, r7
 800044a:	46be      	mov	lr, r7
 800044c:	2620      	movs	r6, #32
 800044e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000452:	eba2 0208 	sub.w	r2, r2, r8
 8000456:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045a:	e766      	b.n	800032a <__udivmoddi4+0xfa>
 800045c:	4601      	mov	r1, r0
 800045e:	e718      	b.n	8000292 <__udivmoddi4+0x62>
 8000460:	4610      	mov	r0, r2
 8000462:	e72c      	b.n	80002be <__udivmoddi4+0x8e>
 8000464:	f1c6 0220 	rsb	r2, r6, #32
 8000468:	fa2e f302 	lsr.w	r3, lr, r2
 800046c:	40b7      	lsls	r7, r6
 800046e:	40b1      	lsls	r1, r6
 8000470:	fa20 f202 	lsr.w	r2, r0, r2
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	430a      	orrs	r2, r1
 800047a:	fbb3 f8fe 	udiv	r8, r3, lr
 800047e:	b2bc      	uxth	r4, r7
 8000480:	fb0e 3318 	mls	r3, lr, r8, r3
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb08 f904 	mul.w	r9, r8, r4
 800048e:	40b0      	lsls	r0, r6
 8000490:	4589      	cmp	r9, r1
 8000492:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000496:	b280      	uxth	r0, r0
 8000498:	d93e      	bls.n	8000518 <__udivmoddi4+0x2e8>
 800049a:	1879      	adds	r1, r7, r1
 800049c:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x276>
 80004a2:	4589      	cmp	r9, r1
 80004a4:	d81f      	bhi.n	80004e6 <__udivmoddi4+0x2b6>
 80004a6:	eba1 0109 	sub.w	r1, r1, r9
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b6:	b292      	uxth	r2, r2
 80004b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004bc:	4542      	cmp	r2, r8
 80004be:	d229      	bcs.n	8000514 <__udivmoddi4+0x2e4>
 80004c0:	18ba      	adds	r2, r7, r2
 80004c2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c6:	d2c4      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004c8:	4542      	cmp	r2, r8
 80004ca:	d2c2      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004cc:	f1a9 0102 	sub.w	r1, r9, #2
 80004d0:	443a      	add	r2, r7
 80004d2:	e7be      	b.n	8000452 <__udivmoddi4+0x222>
 80004d4:	45f0      	cmp	r8, lr
 80004d6:	d29d      	bcs.n	8000414 <__udivmoddi4+0x1e4>
 80004d8:	ebbe 0302 	subs.w	r3, lr, r2
 80004dc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e0:	3801      	subs	r0, #1
 80004e2:	46e1      	mov	r9, ip
 80004e4:	e796      	b.n	8000414 <__udivmoddi4+0x1e4>
 80004e6:	eba7 0909 	sub.w	r9, r7, r9
 80004ea:	4449      	add	r1, r9
 80004ec:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f4:	fb09 f804 	mul.w	r8, r9, r4
 80004f8:	e7db      	b.n	80004b2 <__udivmoddi4+0x282>
 80004fa:	4673      	mov	r3, lr
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1ce>
 80004fe:	4650      	mov	r0, sl
 8000500:	e766      	b.n	80003d0 <__udivmoddi4+0x1a0>
 8000502:	4608      	mov	r0, r1
 8000504:	e6fd      	b.n	8000302 <__udivmoddi4+0xd2>
 8000506:	443b      	add	r3, r7
 8000508:	3a02      	subs	r2, #2
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x144>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	443b      	add	r3, r7
 8000512:	e71c      	b.n	800034e <__udivmoddi4+0x11e>
 8000514:	4649      	mov	r1, r9
 8000516:	e79c      	b.n	8000452 <__udivmoddi4+0x222>
 8000518:	eba1 0109 	sub.w	r1, r1, r9
 800051c:	46c4      	mov	ip, r8
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	e7c4      	b.n	80004b2 <__udivmoddi4+0x282>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <ADS124S08_Init>:
  * @param hspi_handle Pointer to the SPI_HandleTypeDef used for communication.
  * @param nss_port GPIO Port for the software NSS pin.
  * @param nss_pin GPIO Pin for the software NSS pin.
  * @retval None
  */
void ADS124S08_Init(ADS124S08 *adc) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
//    adc->hspi = hspi_handle;
//    adc->nss_port = nss_port;
//    adc->nss_pin = nss_pin;

    // Ensure NSS is high before starting any communication
    ADS124S08_NSS_HIGH(adc);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6858      	ldr	r0, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	891b      	ldrh	r3, [r3, #8]
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	f004 fb2e 	bl	8004ba0 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Short delay to ensure pin state settles
 8000544:	200a      	movs	r0, #10
 8000546:	f003 f823 	bl	8003590 <HAL_Delay>

    ADS124S08_Reset(adc);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f81f 	bl	800058e <ADS124S08_Reset>
    HAL_Delay(5);  // Allow time after reset
 8000550:	2005      	movs	r0, #5
 8000552:	f003 f81d 	bl	8003590 <HAL_Delay>

    // SYSMON: default sample number = 8 (Register 0x09)
    // Note: The datasheet specifies SYSMON register at address 0x09.
    // The value 0x10 sets the number of samples for internal temperature sensor conversions.
    ADS124S08_WriteRegister(adc, 0x09, 0x10);
 8000556:	2210      	movs	r2, #16
 8000558:	2109      	movs	r1, #9
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f86c 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000560:	2005      	movs	r0, #5
 8000562:	f003 f815 	bl	8003590 <HAL_Delay>

    // INPMUX: Configure PGA_GAIN (Register 0x03)
    // Assuming 0x00 for gain = 1 (PGA bypassed or gain 1, consult datasheet for specific bits)
    ADS124S08_WriteRegister(adc, 0x03, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2103      	movs	r1, #3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f864 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000570:	2005      	movs	r0, #5
 8000572:	f003 f80d 	bl	8003590 <HAL_Delay>
    // 0x1A typically enables internal 2.5V reference and connects negative input to AINN.
    // Ensure this matches your desired reference configuration.
    // Bits [7:6] - VREFCON (reference voltage control)
    // Bit [5]    - REF_EN (reference enable)
    // Bits [4:0] - REFP_DIR, REFN_DIR (reference positive/negative direction)
    ADS124S08_WriteRegister(adc, 0x05, 0x1A);
 8000576:	221a      	movs	r2, #26
 8000578:	2105      	movs	r1, #5
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f85c 	bl	8000638 <ADS124S08_WriteRegister>
    HAL_Delay(5);
 8000580:	2005      	movs	r0, #5
 8000582:	f003 f805 	bl	8003590 <HAL_Delay>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <ADS124S08_Reset>:
/**
  * @brief Sends the RESET command to the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval None
  */
void ADS124S08_Reset(ADS124S08 *adc) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_RESET;
 8000596:	2306      	movs	r3, #6
 8000598:	73fb      	strb	r3, [r7, #15]
    ADS124S08_NSS_LOW(adc); // Activate NSS
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6858      	ldr	r0, [r3, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	891b      	ldrh	r3, [r3, #8]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	f004 fafb 	bl	8004ba0 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 80005aa:	2005      	movs	r0, #5
 80005ac:	f002 fff0 	bl	8003590 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, HAL_MAX_DELAY);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	f107 010f 	add.w	r1, r7, #15
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	2201      	movs	r2, #1
 80005be:	f005 f843 	bl	8005648 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 80005c2:	2005      	movs	r0, #5
 80005c4:	f002 ffe4 	bl	8003590 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6858      	ldr	r0, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	891b      	ldrh	r3, [r3, #8]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f004 fae4 	bl	8004ba0 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Small delay after deactivating NSS
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 ffd9 	bl	8003590 <HAL_Delay>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <ADS124S08_StartConversion>:
/**
  * @brief Sends the START command to the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval None
  */
void ADS124S08_StartConversion(ADS124S08 *adc) {
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_START;
 80005ee:	2308      	movs	r3, #8
 80005f0:	73fb      	strb	r3, [r7, #15]
    ADS124S08_NSS_LOW(adc); // Activate NSS
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6858      	ldr	r0, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	891b      	ldrh	r3, [r3, #8]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f004 facf 	bl	8004ba0 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 8000602:	2005      	movs	r0, #5
 8000604:	f002 ffc4 	bl	8003590 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, HAL_MAX_DELAY);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	f107 010f 	add.w	r1, r7, #15
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2201      	movs	r2, #1
 8000616:	f005 f817 	bl	8005648 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 800061a:	2005      	movs	r0, #5
 800061c:	f002 ffb8 	bl	8003590 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6858      	ldr	r0, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	891b      	ldrh	r3, [r3, #8]
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	f004 fab8 	bl	8004ba0 <HAL_GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <ADS124S08_WriteRegister>:
  * @param adc Pointer to the ADS124S08 structure.
  * @param reg Register address to write.
  * @param value Value to write to the register.
  * @retval None
  */
void ADS124S08_WriteRegister(ADS124S08 *adc, uint8_t reg, uint8_t value) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
 8000644:	4613      	mov	r3, r2
 8000646:	70bb      	strb	r3, [r7, #2]
    if (reg >= ADS124S08_REG_COUNT) return; // Basic boundary check
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b1f      	cmp	r3, #31
 800064c:	d828      	bhi.n	80006a0 <ADS124S08_WriteRegister+0x68>

    // WREG command format: [WREG | Reg_Address] [Number_of_Registers_to_write - 1] [Value]
    // To write one register, Num_Registers - 1 = 0x00
    uint8_t tx[3] = { ADS_CMD_WREG | reg, 0x00, value };
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000654:	b2db      	uxtb	r3, r3
 8000656:	733b      	strb	r3, [r7, #12]
 8000658:	2300      	movs	r3, #0
 800065a:	737b      	strb	r3, [r7, #13]
 800065c:	78bb      	ldrb	r3, [r7, #2]
 800065e:	73bb      	strb	r3, [r7, #14]

    ADS124S08_NSS_LOW(adc); // Activate NSS
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f004 fa98 	bl	8004ba0 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 8000670:	2005      	movs	r0, #5
 8000672:	f002 ff8d 	bl	8003590 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, tx, 3, HAL_MAX_DELAY); // Send command, count byte, and value
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f107 010c 	add.w	r1, r7, #12
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	2203      	movs	r2, #3
 8000684:	f004 ffe0 	bl	8005648 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 8000688:	2005      	movs	r0, #5
 800068a:	f002 ff81 	bl	8003590 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6858      	ldr	r0, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	891b      	ldrh	r3, [r3, #8]
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	f004 fa81 	bl	8004ba0 <HAL_GPIO_WritePin>
 800069e:	e000      	b.n	80006a2 <ADS124S08_WriteRegister+0x6a>
    if (reg >= ADS124S08_REG_COUNT) return; // Basic boundary check
 80006a0:	bf00      	nop
}
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <ADS124S08_SetInputChannel>:
  * @param adc Pointer to the ADS124S08 structure.
  * @param pos Positive input channel (AIN0-AIN15, VREF, etc.).
  * @param neg Negative input channel (AIN0-AIN15, VREF, etc.).
  * @retval None
  */
void ADS124S08_SetInputChannel(ADS124S08 *adc, uint8_t pos, uint8_t neg) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
 80006b4:	4613      	mov	r3, r2
 80006b6:	70bb      	strb	r3, [r7, #2]
    if (pos > 15 || neg > 15) return; // Input channels are typically 0-15 (AIN0-AIN15)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b0f      	cmp	r3, #15
 80006bc:	d834      	bhi.n	8000728 <ADS124S08_SetInputChannel+0x80>
 80006be:	78bb      	ldrb	r3, [r7, #2]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d831      	bhi.n	8000728 <ADS124S08_SetInputChannel+0x80>

    uint8_t mux_value = ((pos & 0x0F) << 4) | (neg & 0x0F); // Combine into MUX register format
 80006c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]
    // MUX register address is 0x01 on ADS124S08
    uint8_t tx[3] = {
 80006dc:	2341      	movs	r3, #65	@ 0x41
 80006de:	733b      	strb	r3, [r7, #12]
 80006e0:	2300      	movs	r3, #0
 80006e2:	737b      	strb	r3, [r7, #13]
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	73bb      	strb	r3, [r7, #14]
        ADS_CMD_WREG | 0x01,  // Write to MUX register (0x01)
        0x00,                 // Write 1 register (count - 1)
        mux_value             // The actual MUX register value
    };

    ADS124S08_NSS_LOW(adc); // Activate NSS
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6858      	ldr	r0, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	891b      	ldrh	r3, [r3, #8]
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	f004 fa54 	bl	8004ba0 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 80006f8:	2005      	movs	r0, #5
 80006fa:	f002 ff49 	bl	8003590 <HAL_Delay>
    HAL_SPI_Transmit(adc->hspi, tx, sizeof(tx), HAL_MAX_DELAY);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 010c 	add.w	r1, r7, #12
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	2203      	movs	r2, #3
 800070c:	f004 ff9c 	bl	8005648 <HAL_SPI_Transmit>
    HAL_Delay(5); // Delay after transmit and before deactivating NSS
 8000710:	2005      	movs	r0, #5
 8000712:	f002 ff3d 	bl	8003590 <HAL_Delay>
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6858      	ldr	r0, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	891b      	ldrh	r3, [r3, #8]
 800071e:	2201      	movs	r2, #1
 8000720:	4619      	mov	r1, r3
 8000722:	f004 fa3d 	bl	8004ba0 <HAL_GPIO_WritePin>
 8000726:	e000      	b.n	800072a <ADS124S08_SetInputChannel+0x82>
    if (pos > 15 || neg > 15) return; // Input channels are typically 0-15 (AIN0-AIN15)
 8000728:	bf00      	nop
}
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <ADS124S08_ReadData>:
/**
  * @brief Reads the 24-bit conversion data from the ADS124S08.
  * @param adc Pointer to the ADS124S08 structure.
  * @retval Signed 32-bit integer representing the conversion result.
  */
uint32_t ADS124S08_ReadData(ADS124S08 *adc) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    uint8_t cmd = ADS_CMD_RDATA; // Read Data command
 8000738:	2312      	movs	r3, #18
 800073a:	72fb      	strb	r3, [r7, #11]
    uint8_t rx[3] = {0};         // Buffer for 3 data bytes
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2100      	movs	r1, #0
 8000742:	460a      	mov	r2, r1
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	460a      	mov	r2, r1
 8000748:	709a      	strb	r2, [r3, #2]

    ADS124S08_NSS_LOW(adc); // Activate NSS
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6858      	ldr	r0, [r3, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	891b      	ldrh	r3, [r3, #8]
 8000752:	2200      	movs	r2, #0
 8000754:	4619      	mov	r1, r3
 8000756:	f004 fa23 	bl	8004ba0 <HAL_GPIO_WritePin>
    HAL_Delay(5); // Delay after pulling NSS low
 800075a:	2005      	movs	r0, #5
 800075c:	f002 ff18 	bl	8003590 <HAL_Delay>
//    osDelay(5);
    HAL_SPI_Transmit(adc->hspi, &cmd, 1, 100); // Send RDATA command
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	f107 010b 	add.w	r1, r7, #11
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	2201      	movs	r2, #1
 800076c:	f004 ff6c 	bl	8005648 <HAL_SPI_Transmit>
    HAL_SPI_Receive(adc->hspi, rx, 3, 200);    // Receive 3 data bytes
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	f107 0108 	add.w	r1, r7, #8
 8000778:	23c8      	movs	r3, #200	@ 0xc8
 800077a:	2203      	movs	r2, #3
 800077c:	f005 f8a8 	bl	80058d0 <HAL_SPI_Receive>
    HAL_Delay(5); // Delay after transmit/receive and before deactivating NSS
 8000780:	2005      	movs	r0, #5
 8000782:	f002 ff05 	bl	8003590 <HAL_Delay>
//    osDelay(5);
    ADS124S08_NSS_HIGH(adc); // Deactivate NSS
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6858      	ldr	r0, [r3, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	891b      	ldrh	r3, [r3, #8]
 800078e:	2201      	movs	r2, #1
 8000790:	4619      	mov	r1, r3
 8000792:	f004 fa05 	bl	8004ba0 <HAL_GPIO_WritePin>

    // Reconstruct 24-bit value into a 32-bit signed integer
    uint32_t value = (rx[0] << 16) | (rx[1] << 8) | rx[2];
 8000796:	7a3b      	ldrb	r3, [r7, #8]
 8000798:	041a      	lsls	r2, r3, #16
 800079a:	7a7b      	ldrb	r3, [r7, #9]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	4313      	orrs	r3, r2
 80007a0:	7aba      	ldrb	r2, [r7, #10]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
    // Check for negative 24-bit value and sign-extend to 32 bits
//    if (value & 0x800000) { // If the 24th bit (MSB of 24-bit data) is set
//        value |= 0xFF000000; // Sign-extend by filling upper bits with 1s
//    }

    return value;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <getWaitTime>:
static uint8_t myAddr = 0xFF; // Unassigned
static bool downstreamDetected = false;
static volatile bool spi_finished = 0;


static uint32_t getWaitTime(uint8_t prevNodes) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	return prevNodes * MIN_WAIT_TIME_PER_NODE;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2232      	movs	r2, #50	@ 0x32
 80007be:	fb02 f303 	mul.w	r3, r2, r3
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <handleADCDataRequest>:

static void handleADCDataRequest() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b092      	sub	sp, #72	@ 0x48
 80007d4:	af00      	add	r7, sp, #0
	// Calculate actual packet size needed
	uint16_t packet_size = PACKET_HEADER_SIZE + 2 + ADC_READINGS_SIZE;
 80007d6:	231f      	movs	r3, #31
 80007d8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	
	// Create packet with ADC data
	Packet p = { 
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2240      	movs	r2, #64	@ 0x40
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00a fa04 	bl	800abf0 <memset>
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <handleADCDataRequest+0x98>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	717b      	strb	r3, [r7, #5]
 80007ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	2305      	movs	r3, #5
 80007f8:	723b      	strb	r3, [r7, #8]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 80007fa:	7a3b      	ldrb	r3, [r7, #8]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	793b      	ldrb	r3, [r7, #4]
 8000802:	4619      	mov	r1, r3
 8000804:	0049      	lsls	r1, r1, #1
 8000806:	440b      	add	r3, r1
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4413      	add	r3, r2
 800080c:	b2da      	uxtb	r2, r3
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	4619      	mov	r1, r3
 8000812:	0089      	lsls	r1, r1, #2
 8000814:	440b      	add	r3, r1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4413      	add	r3, r2
 800081a:	b2db      	uxtb	r3, r3
 800081c:	71fb      	strb	r3, [r7, #7]
	
	// Set request type
	p.requestDataPack.requestDataType = RQP_TYPE_ADC_READINGS;
 800081e:	2301      	movs	r3, #1
 8000820:	727b      	strb	r3, [r7, #9]

	// Safely acquire mutex with timeout
	if(osMutexAcquire(adcBufReadMutexHandle, 10) == osOK) {
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <handleADCDataRequest+0x9c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	210a      	movs	r1, #10
 8000828:	4618      	mov	r0, r3
 800082a:	f006 fe01 	bl	8007430 <osMutexAcquire>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10b      	bne.n	800084c <handleADCDataRequest+0x7c>
		// Copy ADC readings to packet
		memcpy(p.requestDataPack.data, adcReadings, ADC_READINGS_SIZE);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	3307      	adds	r3, #7
 8000838:	2218      	movs	r2, #24
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <handleADCDataRequest+0xa0>)
 800083c:	4618      	mov	r0, r3
 800083e:	f00a fa61 	bl	800ad04 <memcpy>
		osMutexRelease(adcBufReadMutexHandle);
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <handleADCDataRequest+0x9c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fe3d 	bl	80074c6 <osMutexRelease>
	}

	// Set data size
	p.requestDataPack.dataSize = ADC_READINGS_SIZE;
 800084c:	2318      	movs	r3, #24
 800084e:	72bb      	strb	r3, [r7, #10]

	// Transmit with moderate timeout
	HAL_SPI_Transmit(&slave, (uint8_t*)&p, packet_size, 100);
 8000850:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8000854:	1d39      	adds	r1, r7, #4
 8000856:	2364      	movs	r3, #100	@ 0x64
 8000858:	4806      	ldr	r0, [pc, #24]	@ (8000874 <handleADCDataRequest+0xa4>)
 800085a:	f004 fef5 	bl	8005648 <HAL_SPI_Transmit>
}
 800085e:	bf00      	nop
 8000860:	3748      	adds	r7, #72	@ 0x48
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000006 	.word	0x20000006
 800086c:	200029e4 	.word	0x200029e4
 8000870:	200029ec 	.word	0x200029ec
 8000874:	20000084 	.word	0x20000084

08000878 <handleExternalADCDataRequest>:

static void handleExternalADCDataRequest() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b092      	sub	sp, #72	@ 0x48
 800087c:	af00      	add	r7, sp, #0
	// Calculate actual packet size needed
	uint16_t packet_size = PACKET_HEADER_SIZE + 2 + EXT_ADC_READINGS_SIZE;
 800087e:	231d      	movs	r3, #29
 8000880:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	
	// Create packet with external ADC data
	Packet p = { 
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2240      	movs	r2, #64	@ 0x40
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f00a f9b0 	bl	800abf0 <memset>
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <handleExternalADCDataRequest+0x7c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	717b      	strb	r3, [r7, #5]
 8000896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800089a:	b2db      	uxtb	r3, r3
 800089c:	71bb      	strb	r3, [r7, #6]
 800089e:	2305      	movs	r3, #5
 80008a0:	723b      	strb	r3, [r7, #8]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 80008a2:	7a3b      	ldrb	r3, [r7, #8]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	793b      	ldrb	r3, [r7, #4]
 80008aa:	4619      	mov	r1, r3
 80008ac:	0049      	lsls	r1, r1, #1
 80008ae:	440b      	add	r3, r1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4413      	add	r3, r2
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	797b      	ldrb	r3, [r7, #5]
 80008b8:	4619      	mov	r1, r3
 80008ba:	0089      	lsls	r1, r1, #2
 80008bc:	440b      	add	r3, r1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4413      	add	r3, r2
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	71fb      	strb	r3, [r7, #7]
	
	// Set request type
	p.requestDataPack.requestDataType = RQP_TYPE_EXT_ADC_READINGS;
 80008c6:	2311      	movs	r3, #17
 80008c8:	727b      	strb	r3, [r7, #9]

	// Copy external ADC readings to packet
	// No mutex needed as this is accessed only from one task
	memcpy(p.requestDataPack.data, externalADCReadings, EXT_ADC_READINGS_SIZE);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	3307      	adds	r3, #7
 80008ce:	2216      	movs	r2, #22
 80008d0:	4909      	ldr	r1, [pc, #36]	@ (80008f8 <handleExternalADCDataRequest+0x80>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f00a fa16 	bl	800ad04 <memcpy>

	// Set data size
	p.requestDataPack.dataSize = EXT_ADC_READINGS_SIZE;
 80008d8:	2316      	movs	r3, #22
 80008da:	72bb      	strb	r3, [r7, #10]

	// Transmit with moderate timeout
	HAL_SPI_Transmit(&slave, (uint8_t*)&p, packet_size, 100);
 80008dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80008e0:	1d39      	adds	r1, r7, #4
 80008e2:	2364      	movs	r3, #100	@ 0x64
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <handleExternalADCDataRequest+0x84>)
 80008e6:	f004 feaf 	bl	8005648 <HAL_SPI_Transmit>
}
 80008ea:	bf00      	nop
 80008ec:	3748      	adds	r7, #72	@ 0x48
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000006 	.word	0x20000006
 80008f8:	20002a04 	.word	0x20002a04
 80008fc:	20000084 	.word	0x20000084

08000900 <handleSayHiRequest>:

static void handleSayHiRequest() {
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af00      	add	r7, sp, #0
	// Message to send
	const char *msg = "Solar Schmiede STM Adapter v1.0";
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <handleSayHiRequest+0x90>)
 8000908:	64fb      	str	r3, [r7, #76]	@ 0x4c
	size_t dataLen = strlen(msg) + 1;
 800090a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800090c:	f7ff fc70 	bl	80001f0 <strlen>
 8000910:	4603      	mov	r3, r0
 8000912:	3301      	adds	r3, #1
 8000914:	64bb      	str	r3, [r7, #72]	@ 0x48
	
	// Calculate actual packet size needed
	uint16_t packet_size = PACKET_HEADER_SIZE + 2 + dataLen;
 8000916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000918:	b29b      	uxth	r3, r3
 800091a:	3307      	adds	r3, #7
 800091c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	
	// Create packet for "Say Hi" response
	Packet hi = { 
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2240      	movs	r2, #64	@ 0x40
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f00a f962 	bl	800abf0 <memset>
 800092c:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <handleSayHiRequest+0x94>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	717b      	strb	r3, [r7, #5]
 8000932:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000936:	b2db      	uxtb	r3, r3
 8000938:	71bb      	strb	r3, [r7, #6]
 800093a:	2305      	movs	r3, #5
 800093c:	723b      	strb	r3, [r7, #8]
		}, 
		.data = { 0 } 
	};
	
	// Calculate CRC for header
	hi.header.crc = hi.header.packetType * 2 + hi.header.targetAddr * 3 + hi.header.srcAddr * 5;
 800093e:	7a3b      	ldrb	r3, [r7, #8]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	793b      	ldrb	r3, [r7, #4]
 8000946:	4619      	mov	r1, r3
 8000948:	0049      	lsls	r1, r1, #1
 800094a:	440b      	add	r3, r1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	797b      	ldrb	r3, [r7, #5]
 8000954:	4619      	mov	r1, r3
 8000956:	0089      	lsls	r1, r1, #2
 8000958:	440b      	add	r3, r1
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	71fb      	strb	r3, [r7, #7]
	
	// Set request type
	hi.requestDataPack.requestDataType = RQP_TYPE_SAY_HI;
 8000962:	2303      	movs	r3, #3
 8000964:	727b      	strb	r3, [r7, #9]
	
	// Copy message to packet
	memcpy(hi.requestDataPack.data, msg, dataLen);
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	3307      	adds	r3, #7
 800096a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800096c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800096e:	4618      	mov	r0, r3
 8000970:	f00a f9c8 	bl	800ad04 <memcpy>

	// Set data size
	hi.requestDataPack.dataSize = dataLen;
 8000974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000976:	b2db      	uxtb	r3, r3
 8000978:	72bb      	strb	r3, [r7, #10]

	// Transmit with moderate timeout
	HAL_SPI_Transmit(&slave, (uint8_t*)&hi, packet_size, 100);
 800097a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800097e:	1d39      	adds	r1, r7, #4
 8000980:	2364      	movs	r3, #100	@ 0x64
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <handleSayHiRequest+0x98>)
 8000984:	f004 fe60 	bl	8005648 <HAL_SPI_Transmit>
}
 8000988:	bf00      	nop
 800098a:	3750      	adds	r7, #80	@ 0x50
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	0800adcc 	.word	0x0800adcc
 8000994:	20000006 	.word	0x20000006
 8000998:	20000084 	.word	0x20000084

0800099c <handleUARTDataRequest>:

static void handleUARTDataRequest() {
 800099c:	b580      	push	{r7, lr}
 800099e:	b09c      	sub	sp, #112	@ 0x70
 80009a0:	af00      	add	r7, sp, #0
    UartPacket packet = { 0 };
 80009a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009a6:	2221      	movs	r2, #33	@ 0x21
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00a f920 	bl	800abf0 <memset>
    uint32_t msg_count = osMessageQueueGetCount(uartQueueHandle);
 80009b0:	4b62      	ldr	r3, [pc, #392]	@ (8000b3c <handleUARTDataRequest+0x1a0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 ff7d 	bl	80078b4 <osMessageQueueGetCount>
 80009ba:	6678      	str	r0, [r7, #100]	@ 0x64
    
    // If no messages, return immediately with empty packet
    if (msg_count == 0) {
 80009bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d12c      	bne.n	8000a1c <handleUARTDataRequest+0x80>
        Packet p = { 
 80009c2:	463b      	mov	r3, r7
 80009c4:	2240      	movs	r2, #64	@ 0x40
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00a f911 	bl	800abf0 <memset>
 80009ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000b40 <handleUARTDataRequest+0x1a4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	707b      	strb	r3, [r7, #1]
 80009d4:	2308      	movs	r3, #8
 80009d6:	70bb      	strb	r3, [r7, #2]
 80009d8:	2305      	movs	r3, #5
 80009da:	713b      	strb	r3, [r7, #4]
            }, 
            .data = { 0 } 
        };
        
        // Calculate CRC for header
        p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 80009dc:	793b      	ldrb	r3, [r7, #4]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	783b      	ldrb	r3, [r7, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	0049      	lsls	r1, r1, #1
 80009e8:	440b      	add	r3, r1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	787b      	ldrb	r3, [r7, #1]
 80009f2:	4619      	mov	r1, r3
 80009f4:	0089      	lsls	r1, r1, #2
 80009f6:	440b      	add	r3, r1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4413      	add	r3, r2
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	70fb      	strb	r3, [r7, #3]
        
        p.requestDataPack.requestDataType = RQP_TYPE_UART_DATA;
 8000a00:	2302      	movs	r3, #2
 8000a02:	717b      	strb	r3, [r7, #5]
        p.requestDataPack.dataSize = 0; // No data
 8000a04:	2300      	movs	r3, #0
 8000a06:	71bb      	strb	r3, [r7, #6]
        p.requestDataPack.data[0] = 0xff; // Indicate no data
 8000a08:	23ff      	movs	r3, #255	@ 0xff
 8000a0a:	71fb      	strb	r3, [r7, #7]
        
        HAL_SPI_Transmit(&slave, (uint8_t*)&p, p.header.packetSize, 50);
 8000a0c:	78bb      	ldrb	r3, [r7, #2]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4639      	mov	r1, r7
 8000a12:	2332      	movs	r3, #50	@ 0x32
 8000a14:	484b      	ldr	r0, [pc, #300]	@ (8000b44 <handleUARTDataRequest+0x1a8>)
 8000a16:	f004 fe17 	bl	8005648 <HAL_SPI_Transmit>
 8000a1a:	e08c      	b.n	8000b36 <handleUARTDataRequest+0x19a>
        return;
    }
    
    // Process message from queue
    if (osMessageQueueGet(uartQueueHandle, (void*)&packet, NULL, 0) == osOK) {
 8000a1c:	4b47      	ldr	r3, [pc, #284]	@ (8000b3c <handleUARTDataRequest+0x1a0>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	f006 fee6 	bl	80077f8 <osMessageQueueGet>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 8081 	bne.w	8000b36 <handleUARTDataRequest+0x19a>
        // Get actual data length
        uint16_t data_len = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        uint8_t is_last_chunk = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        
        // Check for end of packet marker (0x16)
        for (data_len = 0; data_len < UART_DATA_SIZE; data_len++) {
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000a46:	e019      	b.n	8000a7c <handleUARTDataRequest+0xe0>
            if (packet.data[data_len] == MBUS_STOP_BYTE && data_len > 5) {
 8000a48:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000a4c:	3370      	adds	r3, #112	@ 0x70
 8000a4e:	443b      	add	r3, r7
 8000a50:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8000a54:	2b16      	cmp	r3, #22
 8000a56:	d10c      	bne.n	8000a72 <handleUARTDataRequest+0xd6>
 8000a58:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	d908      	bls.n	8000a72 <handleUARTDataRequest+0xd6>
                // Found stop byte, include it in the packet
                data_len++;
 8000a60:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000a64:	3301      	adds	r3, #1
 8000a66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                is_last_chunk = 1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                break;
 8000a70:	e008      	b.n	8000a84 <handleUARTDataRequest+0xe8>
        for (data_len = 0; data_len < UART_DATA_SIZE; data_len++) {
 8000a72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000a76:	3301      	adds	r3, #1
 8000a78:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000a7c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	d9e1      	bls.n	8000a48 <handleUARTDataRequest+0xac>
            }
        }
        
        // If no stop byte found, use the entire buffer
        if (data_len == 0) {
 8000a84:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <handleUARTDataRequest+0xf6>
            data_len = UART_DATA_SIZE;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        }
        
        // Create packet with appropriate size (don't exceed PACKET_MAX_SIZE)
        uint16_t packet_size = PACKET_HEADER_SIZE + 3 + data_len; // Header + requestType + dataSize + flags + data
 8000a92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000a96:	3308      	adds	r3, #8
 8000a98:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
        if (packet_size > PACKET_MAX_SIZE) {
 8000a9c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000aa0:	2b40      	cmp	r3, #64	@ 0x40
 8000aa2:	d905      	bls.n	8000ab0 <handleUARTDataRequest+0x114>
            packet_size = PACKET_MAX_SIZE;
 8000aa4:	2340      	movs	r3, #64	@ 0x40
 8000aa6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
            data_len = PACKET_MAX_SIZE - PACKET_HEADER_SIZE - 3;
 8000aaa:	2338      	movs	r3, #56	@ 0x38
 8000aac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        }
        
        Packet p = { 
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2240      	movs	r2, #64	@ 0x40
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00a f89a 	bl	800abf0 <memset>
 8000abc:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <handleUARTDataRequest+0x1a4>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	707b      	strb	r3, [r7, #1]
 8000ac2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	70bb      	strb	r3, [r7, #2]
 8000aca:	2305      	movs	r3, #5
 8000acc:	713b      	strb	r3, [r7, #4]
            }, 
            .data = { 0 } 
        };
        
        // Calculate CRC for header
        p.header.crc = p.header.packetType * 2 + p.header.targetAddr * 3 + p.header.srcAddr * 5;
 8000ace:	793b      	ldrb	r3, [r7, #4]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	783b      	ldrb	r3, [r7, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	0049      	lsls	r1, r1, #1
 8000ada:	440b      	add	r3, r1
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	787b      	ldrb	r3, [r7, #1]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	0089      	lsls	r1, r1, #2
 8000ae8:	440b      	add	r3, r1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4413      	add	r3, r2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	70fb      	strb	r3, [r7, #3]
        
        p.requestDataPack.requestDataType = RQP_TYPE_UART_DATA;
 8000af2:	2302      	movs	r3, #2
 8000af4:	717b      	strb	r3, [r7, #5]
        p.requestDataPack.dataSize = data_len + 2; // Data + UART ID + flags
 8000af6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	3302      	adds	r3, #2
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	71bb      	strb	r3, [r7, #6]
        
        // Copy UART ID, flags, and data
        p.requestDataPack.data[0] = packet.uart_id;
 8000b02:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b06:	71fb      	strb	r3, [r7, #7]
        p.requestDataPack.data[1] = is_last_chunk; // Flag to indicate if this is the last chunk
 8000b08:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b0c:	723b      	strb	r3, [r7, #8]
        memcpy(&p.requestDataPack.data[2], packet.data, data_len);
 8000b0e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000b12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b16:	1c59      	adds	r1, r3, #1
 8000b18:	463b      	mov	r3, r7
 8000b1a:	3309      	adds	r3, #9
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00a f8f1 	bl	800ad04 <memcpy>
        
        // Transmit with moderate timeout
        HAL_SPI_Transmit(&slave, (uint8_t*)&p, p.header.packetSize, 100);
 8000b22:	78bb      	ldrb	r3, [r7, #2]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4639      	mov	r1, r7
 8000b28:	2364      	movs	r3, #100	@ 0x64
 8000b2a:	4806      	ldr	r0, [pc, #24]	@ (8000b44 <handleUARTDataRequest+0x1a8>)
 8000b2c:	f004 fd8c 	bl	8005648 <HAL_SPI_Transmit>
        
        // Small delay to allow ESP32 to process the data
        osDelay(1);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f006 fbdc 	bl	80072ee <osDelay>
    }
}
 8000b36:	3770      	adds	r7, #112	@ 0x70
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200029e0 	.word	0x200029e0
 8000b40:	20000006 	.word	0x20000006
 8000b44:	20000084 	.word	0x20000084

08000b48 <detect_downstream>:

static bool detect_downstream(Packet *response, uint8_t prevNodes) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b096      	sub	sp, #88	@ 0x58
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
	// Create identification packet
	Packet ident = { 
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	2240      	movs	r2, #64	@ 0x40
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f00a f847 	bl	800abf0 <memset>
 8000b62:	23ff      	movs	r3, #255	@ 0xff
 8000b64:	743b      	strb	r3, [r7, #16]
 8000b66:	4b77      	ldr	r3, [pc, #476]	@ (8000d44 <detect_downstream+0x1fc>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	747b      	strb	r3, [r7, #17]
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	74bb      	strb	r3, [r7, #18]
 8000b70:	2302      	movs	r3, #2
 8000b72:	753b      	strb	r3, [r7, #20]
			.srcAddr = myAddr 
		} 
	};

	// Calculate CRC for header
	ident.header.crc = ident.header.packetType * 2 + 
 8000b74:	7d3b      	ldrb	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	b2da      	uxtb	r2, r3
	                   ident.header.targetAddr * 3 + 
 8000b7a:	7c3b      	ldrb	r3, [r7, #16]
	ident.header.crc = ident.header.packetType * 2 + 
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	0049      	lsls	r1, r1, #1
 8000b80:	440b      	add	r3, r1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4413      	add	r3, r2
 8000b86:	b2da      	uxtb	r2, r3
	                   ident.header.srcAddr * 5;
 8000b88:	7c7b      	ldrb	r3, [r7, #17]
	                   ident.header.targetAddr * 3 + 
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	0089      	lsls	r1, r1, #2
 8000b8e:	440b      	add	r3, r1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	b2db      	uxtb	r3, r3
	ident.header.crc = ident.header.packetType * 2 + 
 8000b96:	74fb      	strb	r3, [r7, #19]
	
	// Set identification packet data
	ident.identifyPack.identifiedDevices = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	757b      	strb	r3, [r7, #21]
	ident.identifyPack.searchDepth = prevNodes > 0 ? prevNodes - 1 : 0;
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <detect_downstream+0x62>
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	e000      	b.n	8000bac <detect_downstream+0x64>
 8000baa:	2300      	movs	r3, #0
 8000bac:	75bb      	strb	r3, [r7, #22]

	// Start byte
	uint8_t byte = PACKET_START_BYTE;
 8000bae:	23aa      	movs	r3, #170	@ 0xaa
 8000bb0:	73fb      	strb	r3, [r7, #15]

	// First transmission - send start byte and identification packet
	SPI2_NSS_LOW();
 8000bb2:	4b65      	ldr	r3, [pc, #404]	@ (8000d48 <detect_downstream+0x200>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a65      	ldr	r2, [pc, #404]	@ (8000d4c <detect_downstream+0x204>)
 8000bb8:	8811      	ldrh	r1, [r2, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 ffef 	bl	8004ba0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Shorter delay to avoid timing issues
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f002 fce4 	bl	8003590 <HAL_Delay>
	
	// Send start byte
	if (HAL_SPI_Transmit(&master, &byte, 1, 50) != HAL_OK) {
 8000bc8:	f107 010f 	add.w	r1, r7, #15
 8000bcc:	2332      	movs	r3, #50	@ 0x32
 8000bce:	2201      	movs	r2, #1
 8000bd0:	485f      	ldr	r0, [pc, #380]	@ (8000d50 <detect_downstream+0x208>)
 8000bd2:	f004 fd39 	bl	8005648 <HAL_SPI_Transmit>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d009      	beq.n	8000bf0 <detect_downstream+0xa8>
		SPI2_NSS_HIGH();
 8000bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8000d48 <detect_downstream+0x200>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a5a      	ldr	r2, [pc, #360]	@ (8000d4c <detect_downstream+0x204>)
 8000be2:	8811      	ldrh	r1, [r2, #0]
 8000be4:	2201      	movs	r2, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 ffda 	bl	8004ba0 <HAL_GPIO_WritePin>
		return false; // Abort if transmission fails
 8000bec:	2300      	movs	r3, #0
 8000bee:	e0a4      	b.n	8000d3a <detect_downstream+0x1f2>
	}
	
	// Send identification packet (use actual size, not maximum)
	if (HAL_SPI_Transmit(&master, (uint8_t*)&ident, IDENTIFY_WHOLEPACK_SIZE, 100) != HAL_OK) {
 8000bf0:	f107 0110 	add.w	r1, r7, #16
 8000bf4:	2364      	movs	r3, #100	@ 0x64
 8000bf6:	2207      	movs	r2, #7
 8000bf8:	4855      	ldr	r0, [pc, #340]	@ (8000d50 <detect_downstream+0x208>)
 8000bfa:	f004 fd25 	bl	8005648 <HAL_SPI_Transmit>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d009      	beq.n	8000c18 <detect_downstream+0xd0>
		SPI2_NSS_HIGH();
 8000c04:	4b50      	ldr	r3, [pc, #320]	@ (8000d48 <detect_downstream+0x200>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a50      	ldr	r2, [pc, #320]	@ (8000d4c <detect_downstream+0x204>)
 8000c0a:	8811      	ldrh	r1, [r2, #0]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 ffc6 	bl	8004ba0 <HAL_GPIO_WritePin>
		return false; // Abort if transmission fails
 8000c14:	2300      	movs	r3, #0
 8000c16:	e090      	b.n	8000d3a <detect_downstream+0x1f2>
	}
	
	// End first transmission
	SPI2_NSS_HIGH();
 8000c18:	4b4b      	ldr	r3, [pc, #300]	@ (8000d48 <detect_downstream+0x200>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000d4c <detect_downstream+0x204>)
 8000c1e:	8811      	ldrh	r1, [r2, #0]
 8000c20:	2201      	movs	r2, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 ffbc 	bl	8004ba0 <HAL_GPIO_WritePin>

	// Wait for downstream nodes to process the packet
	uint32_t wait_time = getWaitTime(prevNodes) + 20;
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fdc0 	bl	80007b0 <getWaitTime>
 8000c30:	4603      	mov	r3, r0
 8000c32:	3314      	adds	r3, #20
 8000c34:	657b      	str	r3, [r7, #84]	@ 0x54
	osDelay(wait_time);
 8000c36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000c38:	f006 fb59 	bl	80072ee <osDelay>
	
	// Second transmission - receive response
	SPI2_NSS_LOW();
 8000c3c:	4b42      	ldr	r3, [pc, #264]	@ (8000d48 <detect_downstream+0x200>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a42      	ldr	r2, [pc, #264]	@ (8000d4c <detect_downstream+0x204>)
 8000c42:	8811      	ldrh	r1, [r2, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 ffaa 	bl	8004ba0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f002 fc9f 	bl	8003590 <HAL_Delay>
	
	// Clear response buffer
	memset(response, 0, sizeof(Packet));
 8000c52:	2240      	movs	r2, #64	@ 0x40
 8000c54:	2100      	movs	r1, #0
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f009 ffca 	bl	800abf0 <memset>
	
	// First receive header to determine actual packet size
	if (HAL_SPI_Receive(&master, (uint8_t*)response, PACKET_HEADER_SIZE, 100) != HAL_OK) {
 8000c5c:	2364      	movs	r3, #100	@ 0x64
 8000c5e:	2205      	movs	r2, #5
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	483b      	ldr	r0, [pc, #236]	@ (8000d50 <detect_downstream+0x208>)
 8000c64:	f004 fe34 	bl	80058d0 <HAL_SPI_Receive>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d009      	beq.n	8000c82 <detect_downstream+0x13a>
		SPI2_NSS_HIGH();
 8000c6e:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <detect_downstream+0x200>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a36      	ldr	r2, [pc, #216]	@ (8000d4c <detect_downstream+0x204>)
 8000c74:	8811      	ldrh	r1, [r2, #0]
 8000c76:	2201      	movs	r2, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 ff91 	bl	8004ba0 <HAL_GPIO_WritePin>
		return false;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e05b      	b.n	8000d3a <detect_downstream+0x1f2>
	}
	
	// Validate header
	if (response->header.packetSize < PACKET_HEADER_SIZE || 
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	789b      	ldrb	r3, [r3, #2]
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d903      	bls.n	8000c92 <detect_downstream+0x14a>
	    response->header.packetSize > PACKET_MAX_SIZE) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
	if (response->header.packetSize < PACKET_HEADER_SIZE || 
 8000c8e:	2b40      	cmp	r3, #64	@ 0x40
 8000c90:	d909      	bls.n	8000ca6 <detect_downstream+0x15e>
		SPI2_NSS_HIGH();
 8000c92:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <detect_downstream+0x200>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a2d      	ldr	r2, [pc, #180]	@ (8000d4c <detect_downstream+0x204>)
 8000c98:	8811      	ldrh	r1, [r2, #0]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 ff7f 	bl	8004ba0 <HAL_GPIO_WritePin>
		return false;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e049      	b.n	8000d3a <detect_downstream+0x1f2>
	}
	
	// Receive rest of packet if needed
	if (response->header.packetSize > PACKET_HEADER_SIZE) {
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	789b      	ldrb	r3, [r3, #2]
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d919      	bls.n	8000ce2 <detect_downstream+0x19a>
		uint16_t data_size = response->header.packetSize - PACKET_HEADER_SIZE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	3b05      	subs	r3, #5
 8000cb4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		if (HAL_SPI_Receive(&master, (uint8_t*)&response->data, data_size, 100) != HAL_OK) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	1d59      	adds	r1, r3, #5
 8000cbc:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000cc0:	2364      	movs	r3, #100	@ 0x64
 8000cc2:	4823      	ldr	r0, [pc, #140]	@ (8000d50 <detect_downstream+0x208>)
 8000cc4:	f004 fe04 	bl	80058d0 <HAL_SPI_Receive>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d009      	beq.n	8000ce2 <detect_downstream+0x19a>
			SPI2_NSS_HIGH();
 8000cce:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <detect_downstream+0x200>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <detect_downstream+0x204>)
 8000cd4:	8811      	ldrh	r1, [r2, #0]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 ff61 	bl	8004ba0 <HAL_GPIO_WritePin>
			return false;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e02b      	b.n	8000d3a <detect_downstream+0x1f2>
		}
	}
	
	// End second transmission
	SPI2_NSS_HIGH();
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <detect_downstream+0x200>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <detect_downstream+0x204>)
 8000ce8:	8811      	ldrh	r1, [r2, #0]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 ff57 	bl	8004ba0 <HAL_GPIO_WritePin>

	// Check if we received a valid acknowledgment
	if (response->header.packetType == PACKET_TYPE_IDENTIFY_ACK) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	791b      	ldrb	r3, [r3, #4]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d11e      	bne.n	8000d38 <detect_downstream+0x1f0>
		// Validate CRC
		uint8_t crc = response->header.packetType * 2 + 
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	b2da      	uxtb	r2, r3
		              response->header.targetAddr * 3 + 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	781b      	ldrb	r3, [r3, #0]
		uint8_t crc = response->header.packetType * 2 + 
 8000d06:	4619      	mov	r1, r3
 8000d08:	0049      	lsls	r1, r1, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2da      	uxtb	r2, r3
		              response->header.srcAddr * 5;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	785b      	ldrb	r3, [r3, #1]
		              response->header.targetAddr * 3 + 
 8000d16:	4619      	mov	r1, r3
 8000d18:	0089      	lsls	r1, r1, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	b2db      	uxtb	r3, r3
		uint8_t crc = response->header.packetType * 2 + 
 8000d1e:	4413      	add	r3, r2
 8000d20:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
		              
		return (crc == response->header.crc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	78db      	ldrb	r3, [r3, #3]
 8000d28:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	e000      	b.n	8000d3a <detect_downstream+0x1f2>
	}
	
	return false;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3758      	adds	r7, #88	@ 0x58
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000006 	.word	0x20000006
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	200000dc 	.word	0x200000dc

08000d54 <BusNode_Init>:

void BusNode_Init(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	myAddr = 0xFF; // Unassigned
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <BusNode_Init+0x34>)
 8000d5a:	22ff      	movs	r2, #255	@ 0xff
 8000d5c:	701a      	strb	r2, [r3, #0]
	downstreamDetected = false;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <BusNode_Init+0x38>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

	master = hspi2;
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <BusNode_Init+0x3c>)
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <BusNode_Init+0x40>)
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2358      	movs	r3, #88	@ 0x58
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f009 ffc8 	bl	800ad04 <memcpy>
	slave = hspi1;
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <BusNode_Init+0x44>)
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <BusNode_Init+0x48>)
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	2358      	movs	r3, #88	@ 0x58
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f009 ffc0 	bl	800ad04 <memcpy>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000006 	.word	0x20000006
 8000d8c:	20000134 	.word	0x20000134
 8000d90:	200000dc 	.word	0x200000dc
 8000d94:	2000232c 	.word	0x2000232c
 8000d98:	20000084 	.word	0x20000084
 8000d9c:	200022d4 	.word	0x200022d4

08000da0 <forward_packet>:

static void forward_packet(const Packet *pkt) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	@ 0x50
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	// Buffer for response
	Packet response = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2240      	movs	r2, #64	@ 0x40
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f009 ff1d 	bl	800abf0 <memset>
	
	// Start byte
	uint8_t byte = PACKET_START_BYTE;
 8000db6:	23aa      	movs	r3, #170	@ 0xaa
 8000db8:	72fb      	strb	r3, [r7, #11]
	
	// First transmission - send start byte and packet
	SPI2_NSS_LOW();
 8000dba:	4b5c      	ldr	r3, [pc, #368]	@ (8000f2c <forward_packet+0x18c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a5c      	ldr	r2, [pc, #368]	@ (8000f30 <forward_packet+0x190>)
 8000dc0:	8811      	ldrh	r1, [r2, #0]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 feeb 	bl	8004ba0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Shorter delay to avoid timing issues
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f002 fbe0 	bl	8003590 <HAL_Delay>
	
	// Send start byte
	if (HAL_SPI_Transmit(&master, &byte, 1, 50) != HAL_OK) {
 8000dd0:	f107 010b 	add.w	r1, r7, #11
 8000dd4:	2332      	movs	r3, #50	@ 0x32
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4856      	ldr	r0, [pc, #344]	@ (8000f34 <forward_packet+0x194>)
 8000dda:	f004 fc35 	bl	8005648 <HAL_SPI_Transmit>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d008      	beq.n	8000df6 <forward_packet+0x56>
		SPI2_NSS_HIGH();
 8000de4:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <forward_packet+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a51      	ldr	r2, [pc, #324]	@ (8000f30 <forward_packet+0x190>)
 8000dea:	8811      	ldrh	r1, [r2, #0]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fed6 	bl	8004ba0 <HAL_GPIO_WritePin>
		return; // Abort if transmission fails
 8000df4:	e097      	b.n	8000f26 <forward_packet+0x186>
	}
	
	// Send packet (use actual packet size, not maximum)
	uint16_t packet_size = pkt->header.packetSize;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	if (packet_size < PACKET_HEADER_SIZE || packet_size > PACKET_MAX_SIZE) {
 8000dfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d903      	bls.n	8000e0e <forward_packet+0x6e>
 8000e06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000e0a:	2b40      	cmp	r3, #64	@ 0x40
 8000e0c:	d902      	bls.n	8000e14 <forward_packet+0x74>
		packet_size = PACKET_MAX_SIZE; // Fallback to max size if invalid
 8000e0e:	2340      	movs	r3, #64	@ 0x40
 8000e10:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	}
	
	if (HAL_SPI_Transmit(&master, (uint8_t*)pkt, packet_size, 100) != HAL_OK) {
 8000e14:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000e18:	2364      	movs	r3, #100	@ 0x64
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	4845      	ldr	r0, [pc, #276]	@ (8000f34 <forward_packet+0x194>)
 8000e1e:	f004 fc13 	bl	8005648 <HAL_SPI_Transmit>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d008      	beq.n	8000e3a <forward_packet+0x9a>
		SPI2_NSS_HIGH();
 8000e28:	4b40      	ldr	r3, [pc, #256]	@ (8000f2c <forward_packet+0x18c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a40      	ldr	r2, [pc, #256]	@ (8000f30 <forward_packet+0x190>)
 8000e2e:	8811      	ldrh	r1, [r2, #0]
 8000e30:	2201      	movs	r2, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 feb4 	bl	8004ba0 <HAL_GPIO_WritePin>
		return; // Abort if transmission fails
 8000e38:	e075      	b.n	8000f26 <forward_packet+0x186>
	}
	
	// End first transmission
	SPI2_NSS_HIGH();
 8000e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f2c <forward_packet+0x18c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f30 <forward_packet+0x190>)
 8000e40:	8811      	ldrh	r1, [r2, #0]
 8000e42:	2201      	movs	r2, #1
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 feab 	bl	8004ba0 <HAL_GPIO_WritePin>
	
	// Small delay between transmissions
	HAL_Delay(2);
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f002 fba0 	bl	8003590 <HAL_Delay>
	
	// Second transmission - receive response
	SPI2_NSS_LOW();
 8000e50:	4b36      	ldr	r3, [pc, #216]	@ (8000f2c <forward_packet+0x18c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a36      	ldr	r2, [pc, #216]	@ (8000f30 <forward_packet+0x190>)
 8000e56:	8811      	ldrh	r1, [r2, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fea0 	bl	8004ba0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f002 fb95 	bl	8003590 <HAL_Delay>
	
	// First receive header to determine actual packet size
	if (HAL_SPI_Receive(&master, (uint8_t*)&response, PACKET_HEADER_SIZE, 100) != HAL_OK) {
 8000e66:	f107 010c 	add.w	r1, r7, #12
 8000e6a:	2364      	movs	r3, #100	@ 0x64
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	4831      	ldr	r0, [pc, #196]	@ (8000f34 <forward_packet+0x194>)
 8000e70:	f004 fd2e 	bl	80058d0 <HAL_SPI_Receive>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d008      	beq.n	8000e8c <forward_packet+0xec>
		SPI2_NSS_HIGH();
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f2c <forward_packet+0x18c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000f30 <forward_packet+0x190>)
 8000e80:	8811      	ldrh	r1, [r2, #0]
 8000e82:	2201      	movs	r2, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fe8b 	bl	8004ba0 <HAL_GPIO_WritePin>
		return;
 8000e8a:	e04c      	b.n	8000f26 <forward_packet+0x186>
	}
	
	// Validate header
	if (response.header.packetSize < PACKET_HEADER_SIZE || 
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d902      	bls.n	8000e98 <forward_packet+0xf8>
	    response.header.packetSize > PACKET_MAX_SIZE) {
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
	if (response.header.packetSize < PACKET_HEADER_SIZE || 
 8000e94:	2b40      	cmp	r3, #64	@ 0x40
 8000e96:	d908      	bls.n	8000eaa <forward_packet+0x10a>
		SPI2_NSS_HIGH();
 8000e98:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <forward_packet+0x18c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a24      	ldr	r2, [pc, #144]	@ (8000f30 <forward_packet+0x190>)
 8000e9e:	8811      	ldrh	r1, [r2, #0]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 fe7c 	bl	8004ba0 <HAL_GPIO_WritePin>
		return;
 8000ea8:	e03d      	b.n	8000f26 <forward_packet+0x186>
	}
	
	// Receive rest of packet if needed
	if (response.header.packetSize > PACKET_HEADER_SIZE) {
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d918      	bls.n	8000ee2 <forward_packet+0x142>
		uint16_t data_size = response.header.packetSize - PACKET_HEADER_SIZE;
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	3b05      	subs	r3, #5
 8000eb4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		if (HAL_SPI_Receive(&master, (uint8_t*)&response.data, data_size, 100) != HAL_OK) {
 8000eb8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	1d59      	adds	r1, r3, #5
 8000ec2:	2364      	movs	r3, #100	@ 0x64
 8000ec4:	481b      	ldr	r0, [pc, #108]	@ (8000f34 <forward_packet+0x194>)
 8000ec6:	f004 fd03 	bl	80058d0 <HAL_SPI_Receive>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d008      	beq.n	8000ee2 <forward_packet+0x142>
			SPI2_NSS_HIGH();
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <forward_packet+0x18c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a16      	ldr	r2, [pc, #88]	@ (8000f30 <forward_packet+0x190>)
 8000ed6:	8811      	ldrh	r1, [r2, #0]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 fe60 	bl	8004ba0 <HAL_GPIO_WritePin>
			return;
 8000ee0:	e021      	b.n	8000f26 <forward_packet+0x186>
		}
	}
	
	// End second transmission
	SPI2_NSS_HIGH();
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <forward_packet+0x18c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <forward_packet+0x190>)
 8000ee8:	8811      	ldrh	r1, [r2, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fe57 	bl	8004ba0 <HAL_GPIO_WritePin>
	
	// Calculate CRC for response header
	response.header.crc = response.header.packetType * 2 + 
 8000ef2:	7c3b      	ldrb	r3, [r7, #16]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
	                      response.header.targetAddr * 3 + 
 8000ef8:	7b3b      	ldrb	r3, [r7, #12]
	response.header.crc = response.header.packetType * 2 + 
 8000efa:	4619      	mov	r1, r3
 8000efc:	0049      	lsls	r1, r1, #1
 8000efe:	440b      	add	r3, r1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	b2da      	uxtb	r2, r3
	                      response.header.srcAddr * 5;
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
	                      response.header.targetAddr * 3 + 
 8000f08:	4619      	mov	r1, r3
 8000f0a:	0089      	lsls	r1, r1, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	b2db      	uxtb	r3, r3
	response.header.crc = response.header.packetType * 2 + 
 8000f14:	73fb      	strb	r3, [r7, #15]
	
	// Forward response back to the slave (use actual packet size)
	HAL_SPI_Transmit(&slave, (uint8_t*)&response, response.header.packetSize, 100);
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f107 010c 	add.w	r1, r7, #12
 8000f1e:	2364      	movs	r3, #100	@ 0x64
 8000f20:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <forward_packet+0x198>)
 8000f22:	f004 fb91 	bl	8005648 <HAL_SPI_Transmit>
}
 8000f26:	3750      	adds	r7, #80	@ 0x50
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000004 	.word	0x20000004
 8000f34:	200000dc 	.word	0x200000dc
 8000f38:	20000084 	.word	0x20000084

08000f3c <BusNode_RunLoop>:
    	spi_finished = 1;
    	osThreadFlagsSet(logTaskHandle, 0x0001);
    }
}

void BusNode_RunLoop(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0c4      	sub	sp, #272	@ 0x110
 8000f40:	af00      	add	r7, sp, #0
    static uint32_t last_uart_check = 0;
    uint32_t current_tick = osKernelGetTickCount();
 8000f42:	f006 f92d 	bl	80071a0 <osKernelGetTickCount>
 8000f46:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    
    // Check for UART data more frequently (every 2ms)
    // This ensures we prioritize forwarding M-Bus data to ESP32
    if (current_tick - last_uart_check >= 2) {
 8000f4a:	4bc9      	ldr	r3, [pc, #804]	@ (8001270 <BusNode_RunLoop+0x334>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d925      	bls.n	8000fa4 <BusNode_RunLoop+0x68>
        last_uart_check = current_tick;
 8000f58:	4ac5      	ldr	r2, [pc, #788]	@ (8001270 <BusNode_RunLoop+0x334>)
 8000f5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000f5e:	6013      	str	r3, [r2, #0]
        
        // If there's data in the UART queue, process it immediately
        uint32_t msg_count = osMessageQueueGetCount(uartQueueHandle);
 8000f60:	4bc4      	ldr	r3, [pc, #784]	@ (8001274 <BusNode_RunLoop+0x338>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f006 fca5 	bl	80078b4 <osMessageQueueGetCount>
 8000f6a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
        if (msg_count > 0) {
 8000f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d016      	beq.n	8000fa4 <BusNode_RunLoop+0x68>
            // Process all available UART messages (up to 5 at a time to avoid blocking)
            for (uint32_t i = 0; i < msg_count && i < 5; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000f7c:	e006      	b.n	8000f8c <BusNode_RunLoop+0x50>
                handleUARTDataRequest();
 8000f7e:	f7ff fd0d 	bl	800099c <handleUARTDataRequest>
            for (uint32_t i = 0; i < msg_count && i < 5; i++) {
 8000f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f86:	3301      	adds	r3, #1
 8000f88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000f8c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f080 815b 	bcs.w	8001250 <BusNode_RunLoop+0x314>
 8000f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d9ed      	bls.n	8000f7e <BusNode_RunLoop+0x42>
            }
            
            // Return early to prioritize UART data processing
            return;
 8000fa2:	e155      	b.n	8001250 <BusNode_RunLoop+0x314>
        }
    }

    // Check for SPI commands from master
    uint8_t byte = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    
    // Non-blocking check for start byte
    if (HAL_SPI_Receive(&slave, &byte, 1, 5) != HAL_OK || byte != PACKET_START_BYTE) {
 8000faa:	f207 1101 	addw	r1, r7, #257	@ 0x101
 8000fae:	2305      	movs	r3, #5
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	48b1      	ldr	r0, [pc, #708]	@ (8001278 <BusNode_RunLoop+0x33c>)
 8000fb4:	f004 fc8c 	bl	80058d0 <HAL_SPI_Receive>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 814a 	bne.w	8001254 <BusNode_RunLoop+0x318>
 8000fc0:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8000fc4:	2baa      	cmp	r3, #170	@ 0xaa
 8000fc6:	f040 8145 	bne.w	8001254 <BusNode_RunLoop+0x318>
        return; // No valid start byte, return and try again next time
    }
    
    // We received a start byte, now get the packet header first
    PacketHeader header = {0};
 8000fca:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	711a      	strb	r2, [r3, #4]
    
    if (HAL_SPI_Receive(&slave, (uint8_t*)&header, PACKET_HEADER_SIZE, 50) != HAL_OK) {
 8000fd4:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8000fd8:	2332      	movs	r3, #50	@ 0x32
 8000fda:	2205      	movs	r2, #5
 8000fdc:	48a6      	ldr	r0, [pc, #664]	@ (8001278 <BusNode_RunLoop+0x33c>)
 8000fde:	f004 fc77 	bl	80058d0 <HAL_SPI_Receive>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f040 8137 	bne.w	8001258 <BusNode_RunLoop+0x31c>
        return;
    }
    
    // Validate header
    if (header.packetSize < PACKET_HEADER_SIZE || header.packetSize > PACKET_MAX_SIZE) {
 8000fea:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	f240 8134 	bls.w	800125c <BusNode_RunLoop+0x320>
 8000ff4:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8000ff8:	2b40      	cmp	r3, #64	@ 0x40
 8000ffa:	f200 812f 	bhi.w	800125c <BusNode_RunLoop+0x320>
        return;
    }
    
    uint8_t crc = header.packetType * 2 + header.targetAddr * 3 + header.srcAddr * 5;
 8000ffe:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 800100a:	4619      	mov	r1, r3
 800100c:	0049      	lsls	r1, r1, #1
 800100e:	440b      	add	r3, r1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4413      	add	r3, r2
 8001014:	b2da      	uxtb	r2, r3
 8001016:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 800101a:	4619      	mov	r1, r3
 800101c:	0089      	lsls	r1, r1, #2
 800101e:	440b      	add	r3, r1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    if (crc != header.crc) {
 8001028:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800102c:	f897 2103 	ldrb.w	r2, [r7, #259]	@ 0x103
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 8115 	bne.w	8001260 <BusNode_RunLoop+0x324>
        return;
    }
    
    // Now receive the rest of the packet based on the size in the header
    uint8_t data_size = header.packetSize - PACKET_HEADER_SIZE;
 8001036:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 800103a:	3b05      	subs	r3, #5
 800103c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    uint8_t data_buffer[PACKET_DATA_SIZE] = {0};
 8001040:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001044:	223b      	movs	r2, #59	@ 0x3b
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f009 fdd1 	bl	800abf0 <memset>
    
    if (data_size > 0) {
 800104e:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00c      	beq.n	8001070 <BusNode_RunLoop+0x134>
        if (HAL_SPI_Receive(&slave, data_buffer, data_size, 100) != HAL_OK) {
 8001056:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 800105a:	b29a      	uxth	r2, r3
 800105c:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001060:	2364      	movs	r3, #100	@ 0x64
 8001062:	4885      	ldr	r0, [pc, #532]	@ (8001278 <BusNode_RunLoop+0x33c>)
 8001064:	f004 fc34 	bl	80058d0 <HAL_SPI_Receive>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	f040 80fa 	bne.w	8001264 <BusNode_RunLoop+0x328>
            return;
        }
    }
    
    // Reconstruct the full packet
    Packet rx = {0};
 8001070:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001074:	2240      	movs	r2, #64	@ 0x40
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f009 fdb9 	bl	800abf0 <memset>
    rx.header = header;
 800107e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001082:	f107 02fc 	add.w	r2, r7, #252	@ 0xfc
 8001086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108a:	6018      	str	r0, [r3, #0]
 800108c:	3304      	adds	r3, #4
 800108e:	7019      	strb	r1, [r3, #0]
    memcpy(rx.data, data_buffer, data_size);
 8001090:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 8001094:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001098:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800109c:	3305      	adds	r3, #5
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fe30 	bl	800ad04 <memcpy>

    // Handle ASSIGN_ADDR from master (only when unassigned)
    if (rx.header.packetType == PACKET_TYPE_ASSIGN_ADDR && myAddr == 0xFF) {
 80010a4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d108      	bne.n	80010be <BusNode_RunLoop+0x182>
 80010ac:	4b73      	ldr	r3, [pc, #460]	@ (800127c <BusNode_RunLoop+0x340>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2bff      	cmp	r3, #255	@ 0xff
 80010b2:	d104      	bne.n	80010be <BusNode_RunLoop+0x182>
        myAddr = rx.data[0]; // Assigned address from master
 80010b4:	f897 2085 	ldrb.w	r2, [r7, #133]	@ 0x85
 80010b8:	4b70      	ldr	r3, [pc, #448]	@ (800127c <BusNode_RunLoop+0x340>)
 80010ba:	701a      	strb	r2, [r3, #0]
        return;
 80010bc:	e0d3      	b.n	8001266 <BusNode_RunLoop+0x32a>
    }

    // Handle IDENTIFY query
    if (rx.header.packetType == PACKET_TYPE_IDENTIFY && 
 80010be:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d16c      	bne.n	80011a0 <BusNode_RunLoop+0x264>
        (rx.header.targetAddr == myAddr || rx.header.targetAddr == broadcast)) {
 80010c6:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80010ca:	4b6c      	ldr	r3, [pc, #432]	@ (800127c <BusNode_RunLoop+0x340>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
    if (rx.header.packetType == PACKET_TYPE_IDENTIFY && 
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d004      	beq.n	80010dc <BusNode_RunLoop+0x1a0>
        (rx.header.targetAddr == myAddr || rx.header.targetAddr == broadcast)) {
 80010d2:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80010d6:	22ff      	movs	r2, #255	@ 0xff
 80010d8:	4293      	cmp	r3, r2
 80010da:	d161      	bne.n	80011a0 <BusNode_RunLoop+0x264>
        
        Packet response = {0};
 80010dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010e4:	4618      	mov	r0, r3
 80010e6:	2340      	movs	r3, #64	@ 0x40
 80010e8:	461a      	mov	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	f009 fd80 	bl	800abf0 <memset>
        Packet ack = {
 80010f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010f4:	2240      	movs	r2, #64	@ 0x40
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f009 fd79 	bl	800abf0 <memset>
            .header = {
                .targetAddr = rx.header.srcAddr,
 80010fe:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
        Packet ack = {
 8001102:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8001106:	4b5d      	ldr	r3, [pc, #372]	@ (800127c <BusNode_RunLoop+0x340>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800110e:	2307      	movs	r3, #7
 8001110:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001114:	2303      	movs	r3, #3
 8001116:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                .packetType = PACKET_TYPE_IDENTIFY_ACK
            }
        };
        
        // Calculate CRC for header
        ack.header.crc = ack.header.packetType * 2 + ack.header.targetAddr * 3 + ack.header.srcAddr * 5;
 800111a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	b2da      	uxtb	r2, r3
 8001122:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001126:	4619      	mov	r1, r3
 8001128:	0049      	lsls	r1, r1, #1
 800112a:	440b      	add	r3, r1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2da      	uxtb	r2, r3
 8001132:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001136:	4619      	mov	r1, r3
 8001138:	0089      	lsls	r1, r1, #2
 800113a:	440b      	add	r3, r1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        ack.identifyPack.identifiedDevices = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        ack.identifyPack.searchDepth = rx.identifyPack.searchDepth - 1;
 800114c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001150:	3b01      	subs	r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        downstreamDetected = detect_downstream(&response, rx.identifyPack.searchDepth - 1);
 8001158:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800115c:	3b01      	subs	r3, #1
 800115e:	b2da      	uxtb	r2, r3
 8001160:	463b      	mov	r3, r7
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fcef 	bl	8000b48 <detect_downstream>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <BusNode_RunLoop+0x344>)
 8001170:	701a      	strb	r2, [r3, #0]
        if (downstreamDetected) {
 8001172:	4b43      	ldr	r3, [pc, #268]	@ (8001280 <BusNode_RunLoop+0x344>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00a      	beq.n	8001190 <BusNode_RunLoop+0x254>
            ack.identifyPack.identifiedDevices += response.identifyPack.identifiedDevices;
 800117a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800117e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001182:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001186:	795b      	ldrb	r3, [r3, #5]
 8001188:	4413      	add	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        }

        HAL_SPI_Transmit(&slave, (uint8_t*)&ack, IDENTIFY_WHOLEPACK_SIZE, 200);
 8001190:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001194:	23c8      	movs	r3, #200	@ 0xc8
 8001196:	2207      	movs	r2, #7
 8001198:	4837      	ldr	r0, [pc, #220]	@ (8001278 <BusNode_RunLoop+0x33c>)
 800119a:	f004 fa55 	bl	8005648 <HAL_SPI_Transmit>
 800119e:	e062      	b.n	8001266 <BusNode_RunLoop+0x32a>
        return;
    }

    // If it's for us, handle it here
    if (rx.header.targetAddr == myAddr && myAddr != broadcast && 
 80011a0:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <BusNode_RunLoop+0x340>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d141      	bne.n	8001230 <BusNode_RunLoop+0x2f4>
 80011ac:	4b33      	ldr	r3, [pc, #204]	@ (800127c <BusNode_RunLoop+0x340>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	22ff      	movs	r2, #255	@ 0xff
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d03c      	beq.n	8001230 <BusNode_RunLoop+0x2f4>
        rx.header.packetType == PACKET_TYPE_REQUEST_DATA) {
 80011b6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
    if (rx.header.targetAddr == myAddr && myAddr != broadcast && 
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d138      	bne.n	8001230 <BusNode_RunLoop+0x2f4>
        
        switch (rx.requestDataPack.requestDataType) {
 80011be:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80011c2:	3b01      	subs	r3, #1
 80011c4:	2b10      	cmp	r3, #16
 80011c6:	d831      	bhi.n	800122c <BusNode_RunLoop+0x2f0>
 80011c8:	a201      	add	r2, pc, #4	@ (adr r2, 80011d0 <BusNode_RunLoop+0x294>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	0800121b 	.word	0x0800121b
 80011d4:	08001221 	.word	0x08001221
 80011d8:	08001215 	.word	0x08001215
 80011dc:	0800122d 	.word	0x0800122d
 80011e0:	0800122d 	.word	0x0800122d
 80011e4:	0800122d 	.word	0x0800122d
 80011e8:	0800122d 	.word	0x0800122d
 80011ec:	0800122d 	.word	0x0800122d
 80011f0:	0800122d 	.word	0x0800122d
 80011f4:	0800122d 	.word	0x0800122d
 80011f8:	0800122d 	.word	0x0800122d
 80011fc:	0800122d 	.word	0x0800122d
 8001200:	0800122d 	.word	0x0800122d
 8001204:	0800122d 	.word	0x0800122d
 8001208:	0800122d 	.word	0x0800122d
 800120c:	0800122d 	.word	0x0800122d
 8001210:	08001227 	.word	0x08001227
        case RQP_TYPE_SAY_HI:
            handleSayHiRequest();
 8001214:	f7ff fb74 	bl	8000900 <handleSayHiRequest>
            break;
 8001218:	e009      	b.n	800122e <BusNode_RunLoop+0x2f2>

        case RQP_TYPE_ADC_READINGS:
            handleADCDataRequest();
 800121a:	f7ff fad9 	bl	80007d0 <handleADCDataRequest>
            break;
 800121e:	e006      	b.n	800122e <BusNode_RunLoop+0x2f2>

        case RQP_TYPE_UART_DATA:
            handleUARTDataRequest();
 8001220:	f7ff fbbc 	bl	800099c <handleUARTDataRequest>
            break;
 8001224:	e003      	b.n	800122e <BusNode_RunLoop+0x2f2>

        case RQP_TYPE_EXT_ADC_READINGS:
            handleExternalADCDataRequest();
 8001226:	f7ff fb27 	bl	8000878 <handleExternalADCDataRequest>
            break;
 800122a:	e000      	b.n	800122e <BusNode_RunLoop+0x2f2>

        default:
            break;
 800122c:	bf00      	nop
        }
        return;
 800122e:	e01a      	b.n	8001266 <BusNode_RunLoop+0x32a>
    } else if (downstreamDetected && myAddr != rx.header.targetAddr) {
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <BusNode_RunLoop+0x344>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d016      	beq.n	8001266 <BusNode_RunLoop+0x32a>
 8001238:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <BusNode_RunLoop+0x340>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d010      	beq.n	8001266 <BusNode_RunLoop+0x32a>
        forward_packet(&rx);
 8001244:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fda9 	bl	8000da0 <forward_packet>
 800124e:	e00a      	b.n	8001266 <BusNode_RunLoop+0x32a>
            return;
 8001250:	bf00      	nop
 8001252:	e008      	b.n	8001266 <BusNode_RunLoop+0x32a>
        return; // No valid start byte, return and try again next time
 8001254:	bf00      	nop
 8001256:	e006      	b.n	8001266 <BusNode_RunLoop+0x32a>
        return;
 8001258:	bf00      	nop
 800125a:	e004      	b.n	8001266 <BusNode_RunLoop+0x32a>
        return;
 800125c:	bf00      	nop
 800125e:	e002      	b.n	8001266 <BusNode_RunLoop+0x32a>
        return;
 8001260:	bf00      	nop
 8001262:	e000      	b.n	8001266 <BusNode_RunLoop+0x32a>
            return;
 8001264:	bf00      	nop
    }
}
 8001266:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000138 	.word	0x20000138
 8001274:	200029e0 	.word	0x200029e0
 8001278:	20000084 	.word	0x20000084
 800127c:	20000006 	.word	0x20000006
 8001280:	20000134 	.word	0x20000134

08001284 <mbus_buffer_push>:
} MbusCircularBuffer;

static MbusCircularBuffer mbus_buffers[UART_COUNT] = {0};

// Add data to circular buffer
static void mbus_buffer_push(MbusCircularBuffer *buf, const uint8_t *data, uint16_t len) {
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	4613      	mov	r3, r2
 8001290:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < len; i++) {
 8001292:	2300      	movs	r3, #0
 8001294:	82fb      	strh	r3, [r7, #22]
 8001296:	e038      	b.n	800130a <mbus_buffer_push+0x86>
        buf->buffer[buf->head] = data[i];
 8001298:	8afb      	ldrh	r3, [r7, #22]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 80012a4:	7819      	ldrb	r1, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	5499      	strb	r1, [r3, r2]
        buf->head = (buf->head + 1) % MBUS_BUFFER_SIZE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012b0:	3301      	adds	r3, #1
 80012b2:	425a      	negs	r2, r3
 80012b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80012bc:	bf58      	it	pl
 80012be:	4253      	negpl	r3, r2
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
        
        // If buffer is full, move tail to overwrite oldest data
        if (buf->count >= MBUS_BUFFER_SIZE) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 80012ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d2:	d30f      	bcc.n	80012f4 <mbus_buffer_push+0x70>
            buf->tail = (buf->tail + 1) % MBUS_BUFFER_SIZE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80012da:	3301      	adds	r3, #1
 80012dc:	425a      	negs	r2, r3
 80012de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80012e6:	bf58      	it	pl
 80012e8:	4253      	negpl	r3, r2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80012f2:	e007      	b.n	8001304 <mbus_buffer_push+0x80>
        } else {
            buf->count++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 80012fa:	3301      	adds	r3, #1
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
    for (uint16_t i = 0; i < len; i++) {
 8001304:	8afb      	ldrh	r3, [r7, #22]
 8001306:	3301      	adds	r3, #1
 8001308:	82fb      	strh	r3, [r7, #22]
 800130a:	8afa      	ldrh	r2, [r7, #22]
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	429a      	cmp	r2, r3
 8001310:	d3c2      	bcc.n	8001298 <mbus_buffer_push+0x14>
        }
    }
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <mbus_find_packet>:

// Find a complete M-Bus packet in the buffer
static int mbus_find_packet(MbusCircularBuffer *buf, uint16_t *start_idx, uint16_t *packet_len) {
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
    if (buf->count < 6) {  // Minimum M-Bus packet size (start + L + L + start + C + stop)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001332:	2b05      	cmp	r3, #5
 8001334:	d801      	bhi.n	800133a <mbus_find_packet+0x1a>
        return 0;
 8001336:	2300      	movs	r3, #0
 8001338:	e06f      	b.n	800141a <mbus_find_packet+0xfa>
    }
    
    // Search for M-Bus packet pattern: 0x68 L L 0x68 ... 0x16
    for (uint16_t i = 0; i < buf->count - 5; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	83fb      	strh	r3, [r7, #30]
 800133e:	e064      	b.n	800140a <mbus_find_packet+0xea>
        uint16_t idx = (buf->tail + i) % MBUS_BUFFER_SIZE;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8001346:	8bfb      	ldrh	r3, [r7, #30]
 8001348:	4413      	add	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001350:	83bb      	strh	r3, [r7, #28]
        
        // Check for start byte
        if (buf->buffer[idx] == MBUS_START_BYTE) {
 8001352:	8bbb      	ldrh	r3, [r7, #28]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	2b68      	cmp	r3, #104	@ 0x68
 800135a:	d153      	bne.n	8001404 <mbus_find_packet+0xe4>
            // Get L-field (length)
            uint16_t idx_len1 = (idx + 1) % MBUS_BUFFER_SIZE;
 800135c:	8bbb      	ldrh	r3, [r7, #28]
 800135e:	3301      	adds	r3, #1
 8001360:	425a      	negs	r2, r3
 8001362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001366:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800136a:	bf58      	it	pl
 800136c:	4253      	negpl	r3, r2
 800136e:	837b      	strh	r3, [r7, #26]
            uint16_t idx_len2 = (idx + 2) % MBUS_BUFFER_SIZE;
 8001370:	8bbb      	ldrh	r3, [r7, #28]
 8001372:	3302      	adds	r3, #2
 8001374:	425a      	negs	r2, r3
 8001376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800137a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800137e:	bf58      	it	pl
 8001380:	4253      	negpl	r3, r2
 8001382:	833b      	strh	r3, [r7, #24]
            uint16_t idx_2nd_start = (idx + 3) % MBUS_BUFFER_SIZE;
 8001384:	8bbb      	ldrh	r3, [r7, #28]
 8001386:	3303      	adds	r3, #3
 8001388:	425a      	negs	r2, r3
 800138a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800138e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001392:	bf58      	it	pl
 8001394:	4253      	negpl	r3, r2
 8001396:	82fb      	strh	r3, [r7, #22]
            
            // Verify second start byte and matching length fields
            if (buf->buffer[idx_2nd_start] == MBUS_START_BYTE && 
 8001398:	8afb      	ldrh	r3, [r7, #22]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	2b68      	cmp	r3, #104	@ 0x68
 80013a0:	d130      	bne.n	8001404 <mbus_find_packet+0xe4>
                buf->buffer[idx_len1] == buf->buffer[idx_len2]) {
 80013a2:	8b7b      	ldrh	r3, [r7, #26]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	5cd2      	ldrb	r2, [r2, r3]
 80013a8:	8b3b      	ldrh	r3, [r7, #24]
 80013aa:	68f9      	ldr	r1, [r7, #12]
 80013ac:	5ccb      	ldrb	r3, [r1, r3]
            if (buf->buffer[idx_2nd_start] == MBUS_START_BYTE && 
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d128      	bne.n	8001404 <mbus_find_packet+0xe4>
                
                uint8_t l_field = buf->buffer[idx_len1];
 80013b2:	8b7b      	ldrh	r3, [r7, #26]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	757b      	strb	r3, [r7, #21]
                
                // Total packet length = 4 (start,L,L,start) + L + 2 (checksum,stop)
                uint16_t total_len = 4 + l_field + 2;
 80013ba:	7d7b      	ldrb	r3, [r7, #21]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3306      	adds	r3, #6
 80013c0:	827b      	strh	r3, [r7, #18]
                
                // Check if we have enough bytes for the complete packet
                if (i + total_len <= buf->count) {
 80013c2:	8bfa      	ldrh	r2, [r7, #30]
 80013c4:	8a7b      	ldrh	r3, [r7, #18]
 80013c6:	4413      	add	r3, r2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	@ 0x404
 80013ce:	4293      	cmp	r3, r2
 80013d0:	dc18      	bgt.n	8001404 <mbus_find_packet+0xe4>
                    // Check for stop byte
                    uint16_t stop_idx = (idx + total_len - 1) % MBUS_BUFFER_SIZE;
 80013d2:	8bba      	ldrh	r2, [r7, #28]
 80013d4:	8a7b      	ldrh	r3, [r7, #18]
 80013d6:	4413      	add	r3, r2
 80013d8:	3b01      	subs	r3, #1
 80013da:	425a      	negs	r2, r3
 80013dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80013e4:	bf58      	it	pl
 80013e6:	4253      	negpl	r3, r2
 80013e8:	823b      	strh	r3, [r7, #16]
                    if (buf->buffer[stop_idx] == MBUS_STOP_BYTE) {
 80013ea:	8a3b      	ldrh	r3, [r7, #16]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	2b16      	cmp	r3, #22
 80013f2:	d107      	bne.n	8001404 <mbus_find_packet+0xe4>
                        *start_idx = idx;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	8bba      	ldrh	r2, [r7, #28]
 80013f8:	801a      	strh	r2, [r3, #0]
                        *packet_len = total_len;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	8a7a      	ldrh	r2, [r7, #18]
 80013fe:	801a      	strh	r2, [r3, #0]
                        return 1;
 8001400:	2301      	movs	r3, #1
 8001402:	e00a      	b.n	800141a <mbus_find_packet+0xfa>
    for (uint16_t i = 0; i < buf->count - 5; i++) {
 8001404:	8bfb      	ldrh	r3, [r7, #30]
 8001406:	3301      	adds	r3, #1
 8001408:	83fb      	strh	r3, [r7, #30]
 800140a:	8bfa      	ldrh	r2, [r7, #30]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001412:	3b05      	subs	r3, #5
 8001414:	429a      	cmp	r2, r3
 8001416:	db93      	blt.n	8001340 <mbus_find_packet+0x20>
                }
            }
        }
    }
    
    return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <mbus_buffer_pop>:

// Remove bytes from the buffer
static void mbus_buffer_pop(MbusCircularBuffer *buf, uint16_t len) {
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	807b      	strh	r3, [r7, #2]
    if (len > buf->count) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001438:	887a      	ldrh	r2, [r7, #2]
 800143a:	429a      	cmp	r2, r3
 800143c:	d903      	bls.n	8001446 <mbus_buffer_pop+0x20>
        len = buf->count;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001444:	807b      	strh	r3, [r7, #2]
    }
    
    buf->tail = (buf->tail + len) % MBUS_BUFFER_SIZE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
    buf->count -= len;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <mbus_extract_packet>:

// Extract a complete packet from the buffer
static int mbus_extract_packet(MbusCircularBuffer *buf, uint8_t *packet, uint16_t max_len) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
    static uint16_t ongoing_packet_len[UART_COUNT] = {0};
    static uint16_t ongoing_packet_pos[UART_COUNT] = {0};
    static uint8_t ongoing_uart_id[UART_COUNT] = {0};
    
    // Get UART ID from buffer pointer (hacky but works)
    uint8_t uart_id = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for (uart_id = 0; uart_id < UART_COUNT; uart_id++) {
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001496:	e00f      	b.n	80014b8 <mbus_extract_packet+0x3c>
        if (buf == &mbus_buffers[uart_id]) {
 8001498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800149c:	f240 4206 	movw	r2, #1030	@ 0x406
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	4a87      	ldr	r2, [pc, #540]	@ (80016c4 <mbus_extract_packet+0x248>)
 80014a6:	4413      	add	r3, r2
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d009      	beq.n	80014c2 <mbus_extract_packet+0x46>
    for (uart_id = 0; uart_id < UART_COUNT; uart_id++) {
 80014ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014b2:	3301      	adds	r3, #1
 80014b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014bc:	2b07      	cmp	r3, #7
 80014be:	d9eb      	bls.n	8001498 <mbus_extract_packet+0x1c>
 80014c0:	e000      	b.n	80014c4 <mbus_extract_packet+0x48>
            break;
 80014c2:	bf00      	nop
        }
    }
    
    // If we're in the middle of streaming a packet
    if (ongoing_packet_len[uart_id] > 0) {
 80014c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014c8:	4a7f      	ldr	r2, [pc, #508]	@ (80016c8 <mbus_extract_packet+0x24c>)
 80014ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d07c      	beq.n	80015cc <mbus_extract_packet+0x150>
        // Calculate how much data we can send in this chunk
        uint16_t remaining = ongoing_packet_len[uart_id] - ongoing_packet_pos[uart_id];
 80014d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014d6:	4a7c      	ldr	r2, [pc, #496]	@ (80016c8 <mbus_extract_packet+0x24c>)
 80014d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014e0:	497a      	ldr	r1, [pc, #488]	@ (80016cc <mbus_extract_packet+0x250>)
 80014e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	83bb      	strh	r3, [r7, #28]
        uint16_t chunk_size = (remaining > max_len) ? max_len : remaining;
 80014ea:	8bba      	ldrh	r2, [r7, #28]
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	4293      	cmp	r3, r2
 80014f0:	bf28      	it	cs
 80014f2:	4613      	movcs	r3, r2
 80014f4:	837b      	strh	r3, [r7, #26]
        
        // Copy chunk to output buffer
        for (uint16_t i = 0; i < chunk_size; i++) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80014fa:	e01f      	b.n	800153c <mbus_extract_packet+0xc0>
            uint16_t idx = (ongoing_packet_idx[uart_id] + ongoing_packet_pos[uart_id] + i) % MBUS_BUFFER_SIZE;
 80014fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001500:	4a73      	ldr	r2, [pc, #460]	@ (80016d0 <mbus_extract_packet+0x254>)
 8001502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001506:	4619      	mov	r1, r3
 8001508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800150c:	4a6f      	ldr	r2, [pc, #444]	@ (80016cc <mbus_extract_packet+0x250>)
 800150e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001512:	18ca      	adds	r2, r1, r3
 8001514:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001516:	4413      	add	r3, r2
 8001518:	425a      	negs	r2, r3
 800151a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001522:	bf58      	it	pl
 8001524:	4253      	negpl	r3, r2
 8001526:	833b      	strh	r3, [r7, #24]
            packet[i] = buf->buffer[idx];
 8001528:	8b3a      	ldrh	r2, [r7, #24]
 800152a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	440b      	add	r3, r1
 8001530:	68f9      	ldr	r1, [r7, #12]
 8001532:	5c8a      	ldrb	r2, [r1, r2]
 8001534:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < chunk_size; i++) {
 8001536:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001538:	3301      	adds	r3, #1
 800153a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800153c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800153e:	8b7b      	ldrh	r3, [r7, #26]
 8001540:	429a      	cmp	r2, r3
 8001542:	d3db      	bcc.n	80014fc <mbus_extract_packet+0x80>
        }
        
        // Update position
        ongoing_packet_pos[uart_id] += chunk_size;
 8001544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001548:	4a60      	ldr	r2, [pc, #384]	@ (80016cc <mbus_extract_packet+0x250>)
 800154a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800154e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001552:	8b7a      	ldrh	r2, [r7, #26]
 8001554:	440a      	add	r2, r1
 8001556:	b291      	uxth	r1, r2
 8001558:	4a5c      	ldr	r2, [pc, #368]	@ (80016cc <mbus_extract_packet+0x250>)
 800155a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        
        // If we've sent the entire packet, clean up
        if (ongoing_packet_pos[uart_id] >= ongoing_packet_len[uart_id]) {
 800155e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001562:	4a5a      	ldr	r2, [pc, #360]	@ (80016cc <mbus_extract_packet+0x250>)
 8001564:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800156c:	4956      	ldr	r1, [pc, #344]	@ (80016c8 <mbus_extract_packet+0x24c>)
 800156e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001572:	429a      	cmp	r2, r3
 8001574:	d320      	bcc.n	80015b8 <mbus_extract_packet+0x13c>
            // Remove the packet from the buffer
            mbus_buffer_pop(buf, ongoing_packet_idx[uart_id] - buf->tail + ongoing_packet_len[uart_id]);
 8001576:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800157a:	4a55      	ldr	r2, [pc, #340]	@ (80016d0 <mbus_extract_packet+0x254>)
 800157c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	b29a      	uxth	r2, r3
 800158a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800158e:	494e      	ldr	r1, [pc, #312]	@ (80016c8 <mbus_extract_packet+0x24c>)
 8001590:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001594:	4413      	add	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff ff43 	bl	8001426 <mbus_buffer_pop>
            
            // Reset tracking variables
            ongoing_packet_len[uart_id] = 0;
 80015a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015a4:	4a48      	ldr	r2, [pc, #288]	@ (80016c8 <mbus_extract_packet+0x24c>)
 80015a6:	2100      	movs	r1, #0
 80015a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            ongoing_packet_pos[uart_id] = 0;
 80015ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015b0:	4a46      	ldr	r2, [pc, #280]	@ (80016cc <mbus_extract_packet+0x250>)
 80015b2:	2100      	movs	r1, #0
 80015b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        
        // Store UART ID for reference
        ongoing_uart_id[uart_id] = uart_id + 1;
 80015b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80015c0:	3201      	adds	r2, #1
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	4a43      	ldr	r2, [pc, #268]	@ (80016d4 <mbus_extract_packet+0x258>)
 80015c6:	54d1      	strb	r1, [r2, r3]
        
        return chunk_size;
 80015c8:	8b7b      	ldrh	r3, [r7, #26]
 80015ca:	e077      	b.n	80016bc <mbus_extract_packet+0x240>
    }
    
    // Look for a new packet
    uint16_t start_idx = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	82fb      	strh	r3, [r7, #22]
    uint16_t packet_len = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	82bb      	strh	r3, [r7, #20]
    
    if (!mbus_find_packet(buf, &start_idx, &packet_len)) {
 80015d4:	f107 0214 	add.w	r2, r7, #20
 80015d8:	f107 0316 	add.w	r3, r7, #22
 80015dc:	4619      	mov	r1, r3
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f7ff fe9e 	bl	8001320 <mbus_find_packet>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <mbus_extract_packet+0x172>
        return 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e066      	b.n	80016bc <mbus_extract_packet+0x240>
    }
    
    // Start streaming this packet
    ongoing_packet_idx[uart_id] = start_idx;
 80015ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015f2:	8af9      	ldrh	r1, [r7, #22]
 80015f4:	4a36      	ldr	r2, [pc, #216]	@ (80016d0 <mbus_extract_packet+0x254>)
 80015f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    ongoing_packet_len[uart_id] = packet_len;
 80015fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015fe:	8ab9      	ldrh	r1, [r7, #20]
 8001600:	4a31      	ldr	r2, [pc, #196]	@ (80016c8 <mbus_extract_packet+0x24c>)
 8001602:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    ongoing_packet_pos[uart_id] = 0;
 8001606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800160a:	4a30      	ldr	r2, [pc, #192]	@ (80016cc <mbus_extract_packet+0x250>)
 800160c:	2100      	movs	r1, #0
 800160e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    
    // Calculate how much data we can send in this first chunk
    uint16_t chunk_size = (packet_len > max_len) ? max_len : packet_len;
 8001612:	8abb      	ldrh	r3, [r7, #20]
 8001614:	88fa      	ldrh	r2, [r7, #6]
 8001616:	4293      	cmp	r3, r2
 8001618:	bf28      	it	cs
 800161a:	4613      	movcs	r3, r2
 800161c:	843b      	strh	r3, [r7, #32]
    
    // Copy chunk to output buffer
    for (uint16_t i = 0; i < chunk_size; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001622:	e010      	b.n	8001646 <mbus_extract_packet+0x1ca>
        uint16_t idx = (start_idx + i) % MBUS_BUFFER_SIZE;
 8001624:	8afa      	ldrh	r2, [r7, #22]
 8001626:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001628:	4413      	add	r3, r2
 800162a:	b29b      	uxth	r3, r3
 800162c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001630:	83fb      	strh	r3, [r7, #30]
        packet[i] = buf->buffer[idx];
 8001632:	8bfa      	ldrh	r2, [r7, #30]
 8001634:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	440b      	add	r3, r1
 800163a:	68f9      	ldr	r1, [r7, #12]
 800163c:	5c8a      	ldrb	r2, [r1, r2]
 800163e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < chunk_size; i++) {
 8001640:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001642:	3301      	adds	r3, #1
 8001644:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001646:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001648:	8c3b      	ldrh	r3, [r7, #32]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3ea      	bcc.n	8001624 <mbus_extract_packet+0x1a8>
    }
    
    // Update position
    ongoing_packet_pos[uart_id] += chunk_size;
 800164e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001652:	4a1e      	ldr	r2, [pc, #120]	@ (80016cc <mbus_extract_packet+0x250>)
 8001654:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800165c:	8c3a      	ldrh	r2, [r7, #32]
 800165e:	440a      	add	r2, r1
 8001660:	b291      	uxth	r1, r2
 8001662:	4a1a      	ldr	r2, [pc, #104]	@ (80016cc <mbus_extract_packet+0x250>)
 8001664:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    
    // If we've sent the entire packet, clean up
    if (ongoing_packet_pos[uart_id] >= packet_len) {
 8001668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800166c:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <mbus_extract_packet+0x250>)
 800166e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001672:	8abb      	ldrh	r3, [r7, #20]
 8001674:	429a      	cmp	r2, r3
 8001676:	d318      	bcc.n	80016aa <mbus_extract_packet+0x22e>
        // Remove the packet from the buffer
        mbus_buffer_pop(buf, start_idx - buf->tail + packet_len);
 8001678:	8afa      	ldrh	r2, [r7, #22]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	8abb      	ldrh	r3, [r7, #20]
 8001686:	4413      	add	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	4619      	mov	r1, r3
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff feca 	bl	8001426 <mbus_buffer_pop>
        
        // Reset tracking variables
        ongoing_packet_len[uart_id] = 0;
 8001692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001696:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <mbus_extract_packet+0x24c>)
 8001698:	2100      	movs	r1, #0
 800169a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        ongoing_packet_pos[uart_id] = 0;
 800169e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <mbus_extract_packet+0x250>)
 80016a4:	2100      	movs	r1, #0
 80016a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    
    // Store UART ID for reference
    ongoing_uart_id[uart_id] = uart_id + 1;
 80016aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016ae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80016b2:	3201      	adds	r2, #1
 80016b4:	b2d1      	uxtb	r1, r2
 80016b6:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <mbus_extract_packet+0x258>)
 80016b8:	54d1      	strb	r1, [r2, r3]
    
    return chunk_size;
 80016ba:	8c3b      	ldrh	r3, [r7, #32]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3728      	adds	r7, #40	@ 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000144 	.word	0x20000144
 80016c8:	20002174 	.word	0x20002174
 80016cc:	20002184 	.word	0x20002184
 80016d0:	20002194 	.word	0x20002194
 80016d4:	200021a4 	.word	0x200021a4

080016d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_COUNT; i++) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	e03d      	b.n	8001762 <HAL_UART_RxCpltCallback+0x8a>
        UART_HandleTypeDef *current = NULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
        switch (i) {
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d82b      	bhi.n	8001748 <HAL_UART_RxCpltCallback+0x70>
 80016f0:	a201      	add	r2, pc, #4	@ (adr r2, 80016f8 <HAL_UART_RxCpltCallback+0x20>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	08001719 	.word	0x08001719
 80016fc:	0800171f 	.word	0x0800171f
 8001700:	08001725 	.word	0x08001725
 8001704:	0800172b 	.word	0x0800172b
 8001708:	08001731 	.word	0x08001731
 800170c:	08001737 	.word	0x08001737
 8001710:	0800173d 	.word	0x0800173d
 8001714:	08001743 	.word	0x08001743
        case 0:
            current = &huart1;
 8001718:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <HAL_UART_RxCpltCallback+0xa0>)
 800171a:	60bb      	str	r3, [r7, #8]
            break;
 800171c:	e014      	b.n	8001748 <HAL_UART_RxCpltCallback+0x70>
        case 1:
            current = &huart2;
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_UART_RxCpltCallback+0xa4>)
 8001720:	60bb      	str	r3, [r7, #8]
            break;
 8001722:	e011      	b.n	8001748 <HAL_UART_RxCpltCallback+0x70>
        case 2:
            current = &huart3;
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_UART_RxCpltCallback+0xa8>)
 8001726:	60bb      	str	r3, [r7, #8]
            break;
 8001728:	e00e      	b.n	8001748 <HAL_UART_RxCpltCallback+0x70>
        case 3:
            current = &huart4;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_UART_RxCpltCallback+0xac>)
 800172c:	60bb      	str	r3, [r7, #8]
            break;
 800172e:	e00b      	b.n	8001748 <HAL_UART_RxCpltCallback+0x70>
        case 4:
            current = &huart5;
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_UART_RxCpltCallback+0xb0>)
 8001732:	60bb      	str	r3, [r7, #8]
            break;
 8001734:	e008      	b.n	8001748 <HAL_UART_RxCpltCallback+0x70>
        case 5:
            current = &huart6;
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_RxCpltCallback+0xb4>)
 8001738:	60bb      	str	r3, [r7, #8]
            break;
 800173a:	e005      	b.n	8001748 <HAL_UART_RxCpltCallback+0x70>
        case 6:
            current = &huart7;
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_UART_RxCpltCallback+0xb8>)
 800173e:	60bb      	str	r3, [r7, #8]
            break;
 8001740:	e002      	b.n	8001748 <HAL_UART_RxCpltCallback+0x70>
        case 7:
            current = &huart8;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_UART_RxCpltCallback+0xbc>)
 8001744:	60bb      	str	r3, [r7, #8]
            break;
 8001746:	bf00      	nop
        }

        if (huart == current) {
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	d105      	bne.n	800175c <HAL_UART_RxCpltCallback+0x84>
            uart_dma_ready[i] = true;
 8001750:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <HAL_UART_RxCpltCallback+0xc0>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
            break;
 800175a:	e006      	b.n	800176a <HAL_UART_RxCpltCallback+0x92>
    for (int i = 0; i < UART_COUNT; i++) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b07      	cmp	r3, #7
 8001766:	ddbe      	ble.n	80016e6 <HAL_UART_RxCpltCallback+0xe>
        }
    }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200025ac 	.word	0x200025ac
 800177c:	200025f4 	.word	0x200025f4
 8001780:	2000263c 	.word	0x2000263c
 8001784:	2000248c 	.word	0x2000248c
 8001788:	200024d4 	.word	0x200024d4
 800178c:	20002684 	.word	0x20002684
 8001790:	2000251c 	.word	0x2000251c
 8001794:	20002564 	.word	0x20002564
 8001798:	2000013c 	.word	0x2000013c

0800179c <huartTaskEntry>:

void huartTaskEntry(void *arg) {
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b0a0      	sub	sp, #128	@ 0x80
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    // Buffer for DMA reception
    static uint8_t uart_rx_buffers[UART_COUNT][16];  // Smaller DMA buffer for faster reception
    
    // Array of UART handles
    UART_HandleTypeDef *huarts[UART_COUNT] = { 
 80017a4:	4b49      	ldr	r3, [pc, #292]	@ (80018cc <huartTaskEntry+0x130>)
 80017a6:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80017aa:	461d      	mov	r5, r3
 80017ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        &huart1, &huart2, &huart3, &huart4, 
        &huart5, &huart6, &huart7, &huart8
    };
    
    // Initialize DMA reception for all UARTs
    for (int i = 0; i < UART_COUNT; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017bc:	e010      	b.n	80017e0 <huartTaskEntry+0x44>
        HAL_UART_Receive_DMA(huarts[i], uart_rx_buffers[i], 16);
 80017be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	3380      	adds	r3, #128	@ 0x80
 80017c4:	443b      	add	r3, r7
 80017c6:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80017ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4a40      	ldr	r2, [pc, #256]	@ (80018d0 <huartTaskEntry+0x134>)
 80017d0:	4413      	add	r3, r2
 80017d2:	2210      	movs	r2, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	f004 ff6b 	bl	80066b0 <HAL_UART_Receive_DMA>
    for (int i = 0; i < UART_COUNT; i++) {
 80017da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017dc:	3301      	adds	r3, #1
 80017de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017e2:	2b07      	cmp	r3, #7
 80017e4:	ddeb      	ble.n	80017be <huartTaskEntry+0x22>
    // Buffer for extracted M-Bus packets
    uint8_t packet_buffer[UART_DATA_SIZE];
    
    // Main task loop
    while (1) {
        bool data_processed = false;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        
        // Check each UART for received data
        for (int i = 0; i < UART_COUNT; i++) {
 80017ec:	2300      	movs	r3, #0
 80017ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80017f0:	e05d      	b.n	80018ae <huartTaskEntry+0x112>
            if (uart_dma_ready[i]) {
 80017f2:	4a38      	ldr	r2, [pc, #224]	@ (80018d4 <huartTaskEntry+0x138>)
 80017f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017f6:	4413      	add	r3, r2
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d053      	beq.n	80018a8 <huartTaskEntry+0x10c>
                uart_dma_ready[i] = false;
 8001800:	4a34      	ldr	r2, [pc, #208]	@ (80018d4 <huartTaskEntry+0x138>)
 8001802:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001804:	4413      	add	r3, r2
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
                data_processed = true;
 800180a:	2301      	movs	r3, #1
 800180c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
                
                // Add received data to circular buffer
                mbus_buffer_push(&mbus_buffers[i], uart_rx_buffers[i], 16);
 8001810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001812:	f240 4206 	movw	r2, #1030	@ 0x406
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	4a2f      	ldr	r2, [pc, #188]	@ (80018d8 <huartTaskEntry+0x13c>)
 800181c:	1898      	adds	r0, r3, r2
 800181e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4a2b      	ldr	r2, [pc, #172]	@ (80018d0 <huartTaskEntry+0x134>)
 8001824:	4413      	add	r3, r2
 8001826:	2210      	movs	r2, #16
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff fd2b 	bl	8001284 <mbus_buffer_push>
                
                // Restart DMA immediately
                HAL_UART_Receive_DMA(huarts[i], uart_rx_buffers[i], 16);
 800182e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	3380      	adds	r3, #128	@ 0x80
 8001834:	443b      	add	r3, r7
 8001836:	f853 0c30 	ldr.w	r0, [r3, #-48]
 800183a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4a24      	ldr	r2, [pc, #144]	@ (80018d0 <huartTaskEntry+0x134>)
 8001840:	4413      	add	r3, r2
 8001842:	2210      	movs	r2, #16
 8001844:	4619      	mov	r1, r3
 8001846:	f004 ff33 	bl	80066b0 <HAL_UART_Receive_DMA>
                
                // Extract and forward complete M-Bus packets
                int packet_len;
                while ((packet_len = mbus_extract_packet(&mbus_buffers[i], packet_buffer, UART_DATA_SIZE)) > 0) {
 800184a:	e01c      	b.n	8001886 <huartTaskEntry+0xea>
                    // Create UART packet
                    UartPacket uart_packet = {0};
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2221      	movs	r2, #33	@ 0x21
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f009 f9cb 	bl	800abf0 <memset>
                    uart_packet.uart_id = i + 1;  // UART ID (1-based)
 800185a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3301      	adds	r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	733b      	strb	r3, [r7, #12]
                    
                    // Copy M-Bus packet data
                    memcpy(uart_packet.data, packet_buffer, packet_len);
 8001864:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001866:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	3301      	adds	r3, #1
 8001870:	4618      	mov	r0, r3
 8001872:	f009 fa47 	bl	800ad04 <memcpy>
                    
                    // Put packet in queue for transmission to ESP32
                    osMessageQueuePut(uartQueueHandle, &uart_packet, 0, 0);
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <huartTaskEntry+0x140>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	f107 010c 	add.w	r1, r7, #12
 800187e:	2300      	movs	r3, #0
 8001880:	2200      	movs	r2, #0
 8001882:	f005 ff59 	bl	8007738 <osMessageQueuePut>
                while ((packet_len = mbus_extract_packet(&mbus_buffers[i], packet_buffer, UART_DATA_SIZE)) > 0) {
 8001886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001888:	f240 4206 	movw	r2, #1030	@ 0x406
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	4a11      	ldr	r2, [pc, #68]	@ (80018d8 <huartTaskEntry+0x13c>)
 8001892:	4413      	add	r3, r2
 8001894:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001898:	2220      	movs	r2, #32
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fdee 	bl	800147c <mbus_extract_packet>
 80018a0:	6738      	str	r0, [r7, #112]	@ 0x70
 80018a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	dcd1      	bgt.n	800184c <huartTaskEntry+0xb0>
        for (int i = 0; i < UART_COUNT; i++) {
 80018a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018aa:	3301      	adds	r3, #1
 80018ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80018ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018b0:	2b07      	cmp	r3, #7
 80018b2:	dd9e      	ble.n	80017f2 <huartTaskEntry+0x56>
                }
            }
        }
        
        // Yield to other tasks
        osDelay(data_processed ? 2 : 5);
 80018b4:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <huartTaskEntry+0x124>
 80018bc:	2302      	movs	r3, #2
 80018be:	e000      	b.n	80018c2 <huartTaskEntry+0x126>
 80018c0:	2305      	movs	r3, #5
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 fd13 	bl	80072ee <osDelay>
    while (1) {
 80018c8:	e78d      	b.n	80017e6 <huartTaskEntry+0x4a>
 80018ca:	bf00      	nop
 80018cc:	0800adec 	.word	0x0800adec
 80018d0:	200021ac 	.word	0x200021ac
 80018d4:	2000013c 	.word	0x2000013c
 80018d8:	20000144 	.word	0x20000144
 80018dc:	200029e0 	.word	0x200029e0

080018e0 <HAL_ADC_ConvCpltCallback>:

uint16_t adcReadings[12] = { 0 };
uint16_t externalADCReadings[11] = { 0 };
volatile int isADCFinished = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	isADCFinished = 1;
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <HAL_ADC_ConvCpltCallback+0x1c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20002a1c 	.word	0x20002a1c

08001900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001904:	f001 fe02 	bl	800350c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001908:	f000 f88e 	bl	8001a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190c:	f000 fca8 	bl	8002260 <MX_GPIO_Init>
  MX_DMA_Init();
 8001910:	f000 fc38 	bl	8002184 <MX_DMA_Init>
  MX_SPI1_Init();
 8001914:	f000 f9e0 	bl	8001cd8 <MX_SPI1_Init>
  MX_UART4_Init();
 8001918:	f000 fae4 	bl	8001ee4 <MX_UART4_Init>
  MX_UART5_Init();
 800191c:	f000 fb0c 	bl	8001f38 <MX_UART5_Init>
  MX_UART7_Init();
 8001920:	f000 fb34 	bl	8001f8c <MX_UART7_Init>
  MX_UART8_Init();
 8001924:	f000 fb5c 	bl	8001fe0 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001928:	f000 fb84 	bl	8002034 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800192c:	f000 fbac 	bl	8002088 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001930:	f000 fbd4 	bl	80020dc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001934:	f000 fbfc 	bl	8002130 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001938:	f000 fa36 	bl	8001da8 <MX_SPI3_Init>
  MX_SPI4_Init();
 800193c:	f000 fa66 	bl	8001e0c <MX_SPI4_Init>
  MX_SPI5_Init();
 8001940:	f000 fa9a 	bl	8001e78 <MX_SPI5_Init>
  MX_ADC1_Init();
 8001944:	f000 f8dc 	bl	8001b00 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001948:	f000 f9f8 	bl	8001d3c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800194c:	f005 fbde 	bl	800710c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of adcBufReadMutex */
  adcBufReadMutexHandle = osMutexNew(&adcBufReadMutex_attributes);
 8001950:	4820      	ldr	r0, [pc, #128]	@ (80019d4 <main+0xd4>)
 8001952:	f005 fce7 	bl	8007324 <osMutexNew>
 8001956:	4603      	mov	r3, r0
 8001958:	4a1f      	ldr	r2, [pc, #124]	@ (80019d8 <main+0xd8>)
 800195a:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of spi_rx */
  spi_rxHandle = osSemaphoreNew(1, 0, &spi_rx_attributes);
 800195c:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <main+0xdc>)
 800195e:	2100      	movs	r1, #0
 8001960:	2001      	movs	r0, #1
 8001962:	f005 fded 	bl	8007540 <osSemaphoreNew>
 8001966:	4603      	mov	r3, r0
 8001968:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <main+0xe0>)
 800196a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (20, 17, &uartQueue_attributes);
 800196c:	4a1d      	ldr	r2, [pc, #116]	@ (80019e4 <main+0xe4>)
 800196e:	2111      	movs	r1, #17
 8001970:	2014      	movs	r0, #20
 8001972:	f005 fe6e 	bl	8007652 <osMessageQueueNew>
 8001976:	4603      	mov	r3, r0
 8001978:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <main+0xe8>)
 800197a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800197c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <main+0xec>)
 800197e:	2100      	movs	r1, #0
 8001980:	481b      	ldr	r0, [pc, #108]	@ (80019f0 <main+0xf0>)
 8001982:	f005 fc22 	bl	80071ca <osThreadNew>
 8001986:	4603      	mov	r3, r0
 8001988:	4a1a      	ldr	r2, [pc, #104]	@ (80019f4 <main+0xf4>)
 800198a:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(logTaskEntry, NULL, &logTask_attributes);
 800198c:	4a1a      	ldr	r2, [pc, #104]	@ (80019f8 <main+0xf8>)
 800198e:	2100      	movs	r1, #0
 8001990:	481a      	ldr	r0, [pc, #104]	@ (80019fc <main+0xfc>)
 8001992:	f005 fc1a 	bl	80071ca <osThreadNew>
 8001996:	4603      	mov	r3, r0
 8001998:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <main+0x100>)
 800199a:	6013      	str	r3, [r2, #0]

  /* creation of adcReadTask */
  adcReadTaskHandle = osThreadNew(adcReadTaskEntry, NULL, &adcReadTask_attributes);
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <main+0x104>)
 800199e:	2100      	movs	r1, #0
 80019a0:	4819      	ldr	r0, [pc, #100]	@ (8001a08 <main+0x108>)
 80019a2:	f005 fc12 	bl	80071ca <osThreadNew>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a18      	ldr	r2, [pc, #96]	@ (8001a0c <main+0x10c>)
 80019aa:	6013      	str	r3, [r2, #0]

  /* creation of huartTask */
  huartTaskHandle = osThreadNew(huartTaskEntry, NULL, &huartTask_attributes);
 80019ac:	4a18      	ldr	r2, [pc, #96]	@ (8001a10 <main+0x110>)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <main+0x114>)
 80019b2:	f005 fc0a 	bl	80071ca <osThreadNew>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <main+0x118>)
 80019ba:	6013      	str	r3, [r2, #0]

  /* creation of adsReadTask */
  adsReadTaskHandle = osThreadNew(adsTaskEntry, NULL, &adsReadTask_attributes);
 80019bc:	4a17      	ldr	r2, [pc, #92]	@ (8001a1c <main+0x11c>)
 80019be:	2100      	movs	r1, #0
 80019c0:	4817      	ldr	r0, [pc, #92]	@ (8001a20 <main+0x120>)
 80019c2:	f005 fc02 	bl	80071ca <osThreadNew>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <main+0x124>)
 80019ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019cc:	f005 fbc2 	bl	8007154 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <main+0xd0>
 80019d4:	0800af58 	.word	0x0800af58
 80019d8:	200029e4 	.word	0x200029e4
 80019dc:	0800af68 	.word	0x0800af68
 80019e0:	200029e8 	.word	0x200029e8
 80019e4:	0800af40 	.word	0x0800af40
 80019e8:	200029e0 	.word	0x200029e0
 80019ec:	0800ae8c 	.word	0x0800ae8c
 80019f0:	08002495 	.word	0x08002495
 80019f4:	200029cc 	.word	0x200029cc
 80019f8:	0800aeb0 	.word	0x0800aeb0
 80019fc:	080024a9 	.word	0x080024a9
 8001a00:	200029d0 	.word	0x200029d0
 8001a04:	0800aed4 	.word	0x0800aed4
 8001a08:	080024d5 	.word	0x080024d5
 8001a0c:	200029d4 	.word	0x200029d4
 8001a10:	0800aef8 	.word	0x0800aef8
 8001a14:	0800179d 	.word	0x0800179d
 8001a18:	200029d8 	.word	0x200029d8
 8001a1c:	0800af1c 	.word	0x0800af1c
 8001a20:	08002589 	.word	0x08002589
 8001a24:	200029dc 	.word	0x200029dc

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b094      	sub	sp, #80	@ 0x50
 8001a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	f107 0320 	add.w	r3, r7, #32
 8001a32:	2230      	movs	r2, #48	@ 0x30
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f009 f8da 	bl	800abf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <SystemClock_Config+0xd0>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	4a28      	ldr	r2, [pc, #160]	@ (8001af8 <SystemClock_Config+0xd0>)
 8001a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <SystemClock_Config+0xd0>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	4b23      	ldr	r3, [pc, #140]	@ (8001afc <SystemClock_Config+0xd4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a22      	ldr	r2, [pc, #136]	@ (8001afc <SystemClock_Config+0xd4>)
 8001a72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <SystemClock_Config+0xd4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a84:	2301      	movs	r3, #1
 8001a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001a98:	230d      	movs	r3, #13
 8001a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a9c:	23a8      	movs	r3, #168	@ 0xa8
 8001a9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa8:	f107 0320 	add.w	r3, r7, #32
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 f891 	bl	8004bd4 <HAL_RCC_OscConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ab8:	f000 fdce 	bl	8002658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abc:	230f      	movs	r3, #15
 8001abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001ac8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2105      	movs	r1, #5
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 faf2 	bl	80050c4 <HAL_RCC_ClockConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ae6:	f000 fdb7 	bl	8002658 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001aea:	f003 fbd1 	bl	8005290 <HAL_RCC_EnableCSS>
}
 8001aee:	bf00      	nop
 8001af0:	3750      	adds	r7, #80	@ 0x50
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b06:	463b      	mov	r3, r7
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b12:	4b6e      	ldr	r3, [pc, #440]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b14:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd0 <MX_ADC1_Init+0x1d0>)
 8001b16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b18:	4b6c      	ldr	r3, [pc, #432]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b20:	4b6a      	ldr	r3, [pc, #424]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b26:	4b69      	ldr	r3, [pc, #420]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b2c:	4b67      	ldr	r3, [pc, #412]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b32:	4b66      	ldr	r3, [pc, #408]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b3a:	4b64      	ldr	r3, [pc, #400]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b40:	4b62      	ldr	r3, [pc, #392]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b42:	4a64      	ldr	r2, [pc, #400]	@ (8001cd4 <MX_ADC1_Init+0x1d4>)
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b46:	4b61      	ldr	r3, [pc, #388]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001b4c:	4b5f      	ldr	r3, [pc, #380]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b52:	4b5e      	ldr	r3, [pc, #376]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b60:	485a      	ldr	r0, [pc, #360]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b62:	f001 fd39 	bl	80035d8 <HAL_ADC_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b6c:	f000 fd74 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4852      	ldr	r0, [pc, #328]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b82:	f001 feef 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b8c:	f000 fd64 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	484b      	ldr	r0, [pc, #300]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001b9e:	f001 fee1 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ba8:	f000 fd56 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4844      	ldr	r0, [pc, #272]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001bba:	f001 fed3 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001bc4:	f000 fd48 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	483d      	ldr	r0, [pc, #244]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001bd6:	f001 fec5 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001be0:	f000 fd3a 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001be4:	2308      	movs	r3, #8
 8001be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001be8:	2305      	movs	r3, #5
 8001bea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4836      	ldr	r0, [pc, #216]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001bf2:	f001 feb7 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001bfc:	f000 fd2c 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c00:	2309      	movs	r3, #9
 8001c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001c04:	2306      	movs	r3, #6
 8001c06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	482f      	ldr	r0, [pc, #188]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001c0e:	f001 fea9 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001c18:	f000 fd1e 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001c20:	2307      	movs	r3, #7
 8001c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	4619      	mov	r1, r3
 8001c28:	4828      	ldr	r0, [pc, #160]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001c2a:	f001 fe9b 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001c34:	f000 fd10 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001c38:	230b      	movs	r3, #11
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c40:	463b      	mov	r3, r7
 8001c42:	4619      	mov	r1, r3
 8001c44:	4821      	ldr	r0, [pc, #132]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001c46:	f001 fe8d 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001c50:	f000 fd02 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001c54:	230c      	movs	r3, #12
 8001c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001c58:	2309      	movs	r3, #9
 8001c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	4619      	mov	r1, r3
 8001c60:	481a      	ldr	r0, [pc, #104]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001c62:	f001 fe7f 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001c6c:	f000 fcf4 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001c70:	230d      	movs	r3, #13
 8001c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001c74:	230a      	movs	r3, #10
 8001c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4813      	ldr	r0, [pc, #76]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001c7e:	f001 fe71 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001c88:	f000 fce6 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c8c:	230e      	movs	r3, #14
 8001c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001c90:	230b      	movs	r3, #11
 8001c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001c9a:	f001 fe63 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001ca4:	f000 fcd8 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001ca8:	230f      	movs	r3, #15
 8001caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001cac:	230c      	movs	r3, #12
 8001cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_ADC1_Init+0x1cc>)
 8001cb6:	f001 fe55 	bl	8003964 <HAL_ADC_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001cc0:	f000 fcca 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2000222c 	.word	0x2000222c
 8001cd0:	40012000 	.word	0x40012000
 8001cd4:	0f000001 	.word	0x0f000001

08001cd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001cde:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <MX_SPI1_Init+0x60>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001d1a:	220a      	movs	r2, #10
 8001d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_SPI1_Init+0x5c>)
 8001d20:	f003 fc09 	bl	8005536 <HAL_SPI_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8001d2a:	f000 fc95 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200022d4 	.word	0x200022d4
 8001d38:	40013000 	.word	0x40013000

08001d3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d40:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d42:	4a18      	ldr	r2, [pc, #96]	@ (8001da4 <MX_SPI2_Init+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d70:	2220      	movs	r2, #32
 8001d72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d88:	220a      	movs	r2, #10
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_SPI2_Init+0x64>)
 8001d8e:	f003 fbd2 	bl	8005536 <HAL_SPI_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d98:	f000 fc5e 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000232c 	.word	0x2000232c
 8001da4:	40003800 	.word	0x40003800

08001da8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dae:	4a16      	ldr	r2, [pc, #88]	@ (8001e08 <MX_SPI3_Init+0x60>)
 8001db0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001dea:	220a      	movs	r2, #10
 8001dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_SPI3_Init+0x5c>)
 8001df0:	f003 fba1 	bl	8005536 <HAL_SPI_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 8001dfa:	f000 fc2d 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20002384 	.word	0x20002384
 8001e08:	40003c00 	.word	0x40003c00

08001e0c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e12:	4a18      	ldr	r2, [pc, #96]	@ (8001e74 <MX_SPI4_Init+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e1c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e24:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e3c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e40:	2238      	movs	r2, #56	@ 0x38
 8001e42:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e50:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e58:	220a      	movs	r2, #10
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <MX_SPI4_Init+0x64>)
 8001e5e:	f003 fb6a 	bl	8005536 <HAL_SPI_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e68:	f000 fbf6 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200023dc 	.word	0x200023dc
 8001e74:	40013400 	.word	0x40013400

08001e78 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001e7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <MX_SPI5_Init+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e82:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001e84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e88:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001ea4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ea8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001ec4:	220a      	movs	r2, #10
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ec8:	4804      	ldr	r0, [pc, #16]	@ (8001edc <MX_SPI5_Init+0x64>)
 8001eca:	f003 fb34 	bl	8005536 <HAL_SPI_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ed4:	f000 fbc0 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20002434 	.word	0x20002434
 8001ee0:	40015000 	.word	0x40015000

08001ee4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001eea:	4a12      	ldr	r2, [pc, #72]	@ (8001f34 <MX_UART4_Init+0x50>)
 8001eec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = mbus_uart_baud;
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001ef0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001ef4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0e:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f1a:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <MX_UART4_Init+0x4c>)
 8001f1c:	f004 fb78 	bl	8006610 <HAL_UART_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f26:	f000 fb97 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000248c 	.word	0x2000248c
 8001f34:	40004c00 	.word	0x40004c00

08001f38 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <MX_UART5_Init+0x50>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = mbus_uart_baud;
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f44:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001f48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <MX_UART5_Init+0x4c>)
 8001f70:	f004 fb4e 	bl	8006610 <HAL_UART_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001f7a:	f000 fb6d 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200024d4 	.word	0x200024d4
 8001f88:	40005000 	.word	0x40005000

08001f8c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <MX_UART7_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = mbus_uart_baud;
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001f98:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001f9c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_UART7_Init+0x4c>)
 8001fc4:	f004 fb24 	bl	8006610 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001fce:	f000 fb43 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000251c 	.word	0x2000251c
 8001fdc:	40007800 	.word	0x40007800

08001fe0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <MX_UART8_Init+0x4c>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <MX_UART8_Init+0x50>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = mbus_uart_baud;
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <MX_UART8_Init+0x4c>)
 8001fec:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001ff0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <MX_UART8_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <MX_UART8_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <MX_UART8_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <MX_UART8_Init+0x4c>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <MX_UART8_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <MX_UART8_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	@ (800202c <MX_UART8_Init+0x4c>)
 8002018:	f004 fafa 	bl	8006610 <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002022:	f000 fb19 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20002564 	.word	0x20002564
 8002030:	40007c00 	.word	0x40007c00

08002034 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <MX_USART1_UART_Init+0x50>)
 800203c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = mbus_uart_baud;
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002040:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 800206c:	f004 fad0 	bl	8006610 <HAL_UART_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002076:	f000 faef 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200025ac 	.word	0x200025ac
 8002084:	40011000 	.word	0x40011000

08002088 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 800208e:	4a12      	ldr	r2, [pc, #72]	@ (80020d8 <MX_USART2_UART_Init+0x50>)
 8002090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = mbus_uart_baud;
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 8002094:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020c0:	f004 faa6 	bl	8006610 <HAL_UART_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ca:	f000 fac5 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200025f4 	.word	0x200025f4
 80020d8:	40004400 	.word	0x40004400

080020dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020e0:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <MX_USART3_UART_Init+0x50>)
 80020e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = mbus_uart_baud;
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 80020e8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80020ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	@ (8002128 <MX_USART3_UART_Init+0x4c>)
 8002114:	f004 fa7c 	bl	8006610 <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800211e:	f000 fa9b 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000263c 	.word	0x2000263c
 800212c:	40004800 	.word	0x40004800

08002130 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 8002136:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <MX_USART6_UART_Init+0x50>)
 8002138:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = mbus_uart_baud;
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 800213c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002140:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <MX_USART6_UART_Init+0x4c>)
 8002168:	f004 fa52 	bl	8006610 <HAL_UART_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002172:	f000 fa71 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20002684 	.word	0x20002684
 8002180:	40011400 	.word	0x40011400

08002184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b33      	ldr	r3, [pc, #204]	@ (800225c <MX_DMA_Init+0xd8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a32      	ldr	r2, [pc, #200]	@ (800225c <MX_DMA_Init+0xd8>)
 8002194:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b30      	ldr	r3, [pc, #192]	@ (800225c <MX_DMA_Init+0xd8>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4b2c      	ldr	r3, [pc, #176]	@ (800225c <MX_DMA_Init+0xd8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a2b      	ldr	r2, [pc, #172]	@ (800225c <MX_DMA_Init+0xd8>)
 80021b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b29      	ldr	r3, [pc, #164]	@ (800225c <MX_DMA_Init+0xd8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2105      	movs	r1, #5
 80021c6:	200b      	movs	r0, #11
 80021c8:	f001 ff34 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021cc:	200b      	movs	r0, #11
 80021ce:	f001 ff4d 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2105      	movs	r1, #5
 80021d6:	200c      	movs	r0, #12
 80021d8:	f001 ff2c 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021dc:	200c      	movs	r0, #12
 80021de:	f001 ff45 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2105      	movs	r1, #5
 80021e6:	200d      	movs	r0, #13
 80021e8:	f001 ff24 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021ec:	200d      	movs	r0, #13
 80021ee:	f001 ff3d 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2105      	movs	r1, #5
 80021f6:	200e      	movs	r0, #14
 80021f8:	f001 ff1c 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80021fc:	200e      	movs	r0, #14
 80021fe:	f001 ff35 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2105      	movs	r1, #5
 8002206:	2010      	movs	r0, #16
 8002208:	f001 ff14 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800220c:	2010      	movs	r0, #16
 800220e:	f001 ff2d 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2105      	movs	r1, #5
 8002216:	2011      	movs	r0, #17
 8002218:	f001 ff0c 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800221c:	2011      	movs	r0, #17
 800221e:	f001 ff25 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2105      	movs	r1, #5
 8002226:	2038      	movs	r0, #56	@ 0x38
 8002228:	f001 ff04 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800222c:	2038      	movs	r0, #56	@ 0x38
 800222e:	f001 ff1d 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2105      	movs	r1, #5
 8002236:	2039      	movs	r0, #57	@ 0x39
 8002238:	f001 fefc 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800223c:	2039      	movs	r0, #57	@ 0x39
 800223e:	f001 ff15 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2105      	movs	r1, #5
 8002246:	203a      	movs	r0, #58	@ 0x3a
 8002248:	f001 fef4 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800224c:	203a      	movs	r0, #58	@ 0x3a
 800224e:	f001 ff0d 	bl	800406c <HAL_NVIC_EnableIRQ>

}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	@ 0x38
 8002264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
 800227a:	4b7f      	ldr	r3, [pc, #508]	@ (8002478 <MX_GPIO_Init+0x218>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a7e      	ldr	r2, [pc, #504]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002280:	f043 0310 	orr.w	r3, r3, #16
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b7c      	ldr	r3, [pc, #496]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	4b78      	ldr	r3, [pc, #480]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a77      	ldr	r2, [pc, #476]	@ (8002478 <MX_GPIO_Init+0x218>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b75      	ldr	r3, [pc, #468]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	4b71      	ldr	r3, [pc, #452]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a70      	ldr	r2, [pc, #448]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022b8:	f043 0320 	orr.w	r3, r3, #32
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b6e      	ldr	r3, [pc, #440]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4a69      	ldr	r2, [pc, #420]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022da:	4b67      	ldr	r3, [pc, #412]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b63      	ldr	r3, [pc, #396]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	4a62      	ldr	r2, [pc, #392]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f6:	4b60      	ldr	r3, [pc, #384]	@ (8002478 <MX_GPIO_Init+0x218>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b5c      	ldr	r3, [pc, #368]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	4a5b      	ldr	r2, [pc, #364]	@ (8002478 <MX_GPIO_Init+0x218>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6313      	str	r3, [r2, #48]	@ 0x30
 8002312:	4b59      	ldr	r3, [pc, #356]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	4b55      	ldr	r3, [pc, #340]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	4a54      	ldr	r2, [pc, #336]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
 800232e:	4b52      	ldr	r3, [pc, #328]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	4b4e      	ldr	r3, [pc, #312]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a4d      	ldr	r2, [pc, #308]	@ (8002478 <MX_GPIO_Init+0x218>)
 8002344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b4b      	ldr	r3, [pc, #300]	@ (8002478 <MX_GPIO_Init+0x218>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|SPI4_SoftNSS_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	2118      	movs	r1, #24
 800235a:	4848      	ldr	r0, [pc, #288]	@ (800247c <MX_GPIO_Init+0x21c>)
 800235c:	f002 fc20 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002360:	2200      	movs	r2, #0
 8002362:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002366:	4846      	ldr	r0, [pc, #280]	@ (8002480 <MX_GPIO_Init+0x220>)
 8002368:	f002 fc1a 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800236c:	2200      	movs	r2, #0
 800236e:	f240 413b 	movw	r1, #1083	@ 0x43b
 8002372:	4844      	ldr	r0, [pc, #272]	@ (8002484 <MX_GPIO_Init+0x224>)
 8002374:	f002 fc14 	bl	8004ba0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_SoftNSS_Pin|LED_ONBOARD_Pin, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800237e:	4842      	ldr	r0, [pc, #264]	@ (8002488 <MX_GPIO_Init+0x228>)
 8002380:	f002 fc0e 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ADS_RESET_Pin|ADS_START_Pin, GPIO_PIN_SET);
 8002384:	2201      	movs	r2, #1
 8002386:	2114      	movs	r1, #20
 8002388:	4840      	ldr	r0, [pc, #256]	@ (800248c <MX_GPIO_Init+0x22c>)
 800238a:	f002 fc09 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_15, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002394:	483d      	ldr	r0, [pc, #244]	@ (800248c <MX_GPIO_Init+0x22c>)
 8002396:	f002 fc03 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80023a0:	483b      	ldr	r0, [pc, #236]	@ (8002490 <MX_GPIO_Init+0x230>)
 80023a2:	f002 fbfd 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 SPI4_SoftNSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPI4_SoftNSS_Pin;
 80023a6:	2318      	movs	r3, #24
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ba:	4619      	mov	r1, r3
 80023bc:	482f      	ldr	r0, [pc, #188]	@ (800247c <MX_GPIO_Init+0x21c>)
 80023be:	f002 fa43 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c8:	2301      	movs	r3, #1
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d8:	4619      	mov	r1, r3
 80023da:	4829      	ldr	r0, [pc, #164]	@ (8002480 <MX_GPIO_Init+0x220>)
 80023dc:	f002 fa34 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF3 PF4
                           PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80023e0:	f240 433b 	movw	r3, #1083	@ 0x43b
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f6:	4619      	mov	r1, r3
 80023f8:	4822      	ldr	r0, [pc, #136]	@ (8002484 <MX_GPIO_Init+0x224>)
 80023fa:	f002 fa25 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SoftNSS_Pin LED_ONBOARD_Pin */
  GPIO_InitStruct.Pin = SPI2_SoftNSS_Pin|LED_ONBOARD_Pin;
 80023fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	2301      	movs	r3, #1
 8002406:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	481c      	ldr	r0, [pc, #112]	@ (8002488 <MX_GPIO_Init+0x228>)
 8002418:	f002 fa16 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADS_RESET_Pin ADS_START_Pin PG7 PG15 */
  GPIO_InitStruct.Pin = ADS_RESET_Pin|ADS_START_Pin|GPIO_PIN_7|GPIO_PIN_15;
 800241c:	f248 0394 	movw	r3, #32916	@ 0x8094
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800242e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002432:	4619      	mov	r1, r3
 8002434:	4815      	ldr	r0, [pc, #84]	@ (800248c <MX_GPIO_Init+0x22c>)
 8002436:	f002 fa07 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800243a:	2308      	movs	r3, #8
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800244a:	4619      	mov	r1, r3
 800244c:	480f      	ldr	r0, [pc, #60]	@ (800248c <MX_GPIO_Init+0x22c>)
 800244e:	f002 f9fb 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002452:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002458:	2301      	movs	r3, #1
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002468:	4619      	mov	r1, r3
 800246a:	4809      	ldr	r0, [pc, #36]	@ (8002490 <MX_GPIO_Init+0x230>)
 800246c:	f002 f9ec 	bl	8004848 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002470:	bf00      	nop
 8002472:	3738      	adds	r7, #56	@ 0x38
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	40021000 	.word	0x40021000
 8002480:	40020800 	.word	0x40020800
 8002484:	40021400 	.word	0x40021400
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021800 	.word	0x40021800
 8002490:	40020400 	.word	0x40020400

08002494 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(osWaitForever);
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f004 ff25 	bl	80072ee <osDelay>
 80024a4:	e7fa      	b.n	800249c <StartDefaultTask+0x8>
	...

080024a8 <logTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_logTaskEntry */
void logTaskEntry(void *argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN logTaskEntry */

	BusNode_Init();
 80024b0:	f7fe fc50 	bl	8000d54 <BusNode_Init>

	HAL_GPIO_WritePin(SPI2_SoftNSS_GPIO_Port, SPI2_SoftNSS_Pin, GPIO_PIN_SET);
 80024b4:	2201      	movs	r2, #1
 80024b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024ba:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <logTaskEntry+0x28>)
 80024bc:	f002 fb70 	bl	8004ba0 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {
		BusNode_RunLoop();
 80024c0:	f7fe fd3c 	bl	8000f3c <BusNode_RunLoop>
		osDelay(1);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f004 ff12 	bl	80072ee <osDelay>
		BusNode_RunLoop();
 80024ca:	bf00      	nop
 80024cc:	e7f8      	b.n	80024c0 <logTaskEntry+0x18>
 80024ce:	bf00      	nop
 80024d0:	40020c00 	.word	0x40020c00

080024d4 <adcReadTaskEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_adcReadTaskEntry */
void adcReadTaskEntry(void *argument)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adcReadTaskEntry */
	/* Infinite loop */

	// Initialize ADC readings array
	memset(adcReadings, 0, sizeof(adcReadings));
 80024dc:	2218      	movs	r2, #24
 80024de:	2100      	movs	r1, #0
 80024e0:	4824      	ldr	r0, [pc, #144]	@ (8002574 <adcReadTaskEntry+0xa0>)
 80024e2:	f008 fb85 	bl	800abf0 <memset>
	
	// Use static buffer to avoid stack issues
	static uint16_t adcBuf[12] = { 0 };
	
	// Start ADC with DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 80024e6:	220c      	movs	r2, #12
 80024e8:	4923      	ldr	r1, [pc, #140]	@ (8002578 <adcReadTaskEntry+0xa4>)
 80024ea:	4824      	ldr	r0, [pc, #144]	@ (800257c <adcReadTaskEntry+0xa8>)
 80024ec:	f001 f8b8 	bl	8003660 <HAL_ADC_Start_DMA>
	
	// Variables for timing
	uint32_t last_adc_update = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
	const uint32_t ADC_UPDATE_INTERVAL = 500; // 500ms interval for ADC updates
 80024f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024f8:	613b      	str	r3, [r7, #16]
	
	for (;;) {
		uint32_t current_tick = osKernelGetTickCount();
 80024fa:	f004 fe51 	bl	80071a0 <osKernelGetTickCount>
 80024fe:	60f8      	str	r0, [r7, #12]
		
		// Check if ADC conversion is complete
		if (isADCFinished == 1) {
 8002500:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <adcReadTaskEntry+0xac>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d121      	bne.n	800254c <adcReadTaskEntry+0x78>
			isADCFinished = 0;
 8002508:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <adcReadTaskEntry+0xac>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
			
			// Acquire mutex before updating shared data
			if (osMutexAcquire(adcBufReadMutexHandle, 100) == osOK) {
 800250e:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <adcReadTaskEntry+0xb0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2164      	movs	r1, #100	@ 0x64
 8002514:	4618      	mov	r0, r3
 8002516:	f004 ff8b 	bl	8007430 <osMutexAcquire>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d110      	bne.n	8002542 <adcReadTaskEntry+0x6e>
				// Copy ADC readings to shared buffer
				memcpy(adcReadings, adcBuf, sizeof(adcReadings));
 8002520:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <adcReadTaskEntry+0xa0>)
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <adcReadTaskEntry+0xa4>)
 8002524:	4614      	mov	r4, r2
 8002526:	461d      	mov	r5, r3
 8002528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800252a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002530:	e884 0003 	stmia.w	r4, {r0, r1}
				osMutexRelease(adcBufReadMutexHandle);
 8002534:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <adcReadTaskEntry+0xb0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f004 ffc4 	bl	80074c6 <osMutexRelease>
				
				// Update timestamp
				last_adc_update = current_tick;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	617b      	str	r3, [r7, #20]
			}
			
			// Restart ADC conversion
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 8002542:	220c      	movs	r2, #12
 8002544:	490c      	ldr	r1, [pc, #48]	@ (8002578 <adcReadTaskEntry+0xa4>)
 8002546:	480d      	ldr	r0, [pc, #52]	@ (800257c <adcReadTaskEntry+0xa8>)
 8002548:	f001 f88a 	bl	8003660 <HAL_ADC_Start_DMA>
		}
		
		// If it's been too long since the last update, force a new conversion
		if (current_tick - last_adc_update > ADC_UPDATE_INTERVAL) {
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	429a      	cmp	r2, r3
 8002556:	d209      	bcs.n	800256c <adcReadTaskEntry+0x98>
			// Stop any ongoing conversion
			HAL_ADC_Stop_DMA(&hadc1);
 8002558:	4808      	ldr	r0, [pc, #32]	@ (800257c <adcReadTaskEntry+0xa8>)
 800255a:	f001 f995 	bl	8003888 <HAL_ADC_Stop_DMA>
			
			// Restart ADC conversion
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 12);
 800255e:	220c      	movs	r2, #12
 8002560:	4905      	ldr	r1, [pc, #20]	@ (8002578 <adcReadTaskEntry+0xa4>)
 8002562:	4806      	ldr	r0, [pc, #24]	@ (800257c <adcReadTaskEntry+0xa8>)
 8002564:	f001 f87c 	bl	8003660 <HAL_ADC_Start_DMA>
			
			// Update timestamp to prevent multiple forced conversions
			last_adc_update = current_tick;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	617b      	str	r3, [r7, #20]
		}
		
		// Short delay to yield to other tasks
		osDelay(20);
 800256c:	2014      	movs	r0, #20
 800256e:	f004 febe 	bl	80072ee <osDelay>
	for (;;) {
 8002572:	e7c2      	b.n	80024fa <adcReadTaskEntry+0x26>
 8002574:	200029ec 	.word	0x200029ec
 8002578:	20002a20 	.word	0x20002a20
 800257c:	2000222c 	.word	0x2000222c
 8002580:	20002a1c 	.word	0x20002a1c
 8002584:	200029e4 	.word	0x200029e4

08002588 <adsTaskEntry>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
/* USER CODE END Header_adsTaskEntry */
void adsTaskEntry(void *argument)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adsTaskEntry */
	/* Infinite loop */
	
	// Initialize the external ADC
	ADS124S08 adc = { .hspi = &hspi4, .nss_pin = SPI4_SoftNSS_Pin, .nss_port = GPIOE};
 8002590:	4a26      	ldr	r2, [pc, #152]	@ (800262c <adsTaskEntry+0xa4>)
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	ca07      	ldmia	r2, {r0, r1, r2}
 8002598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ADS124S08_Init(&adc);
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ffc3 	bl	800052c <ADS124S08_Init>
	
	// Set initial channel
	ADS124S08_SetInputChannel(&adc, 0, 13);
 80025a6:	f107 0308 	add.w	r3, r7, #8
 80025aa:	220d      	movs	r2, #13
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe f87a 	bl	80006a8 <ADS124S08_SetInputChannel>
	
	// Start conversion
	ADS124S08_StartConversion(&adc);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe f814 	bl	80005e6 <ADS124S08_StartConversion>
	
	// Variables for timing
	uint32_t last_update = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
	const uint32_t UPDATE_INTERVAL = 500; // 500ms interval for updates
 80025c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80025c6:	61fb      	str	r3, [r7, #28]
	
	for (;;) {
		uint32_t current_tick = osKernelGetTickCount();
 80025c8:	f004 fdea 	bl	80071a0 <osKernelGetTickCount>
 80025cc:	61b8      	str	r0, [r7, #24]
		
		// Only update readings at the specified interval
		if (current_tick - last_update >= UPDATE_INTERVAL) {
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d823      	bhi.n	8002622 <adsTaskEntry+0x9a>
			// Read all channels
			for (size_t i = 0; i < 11; i++) {
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	e01b      	b.n	8002618 <adsTaskEntry+0x90>
				// Set channel
				ADS124S08_SetInputChannel(&adc, i, 12);
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	b2d9      	uxtb	r1, r3
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	220c      	movs	r2, #12
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe f85c 	bl	80006a8 <ADS124S08_SetInputChannel>
				
				// Read data and shift right by 8 bits (to get 16-bit value)
				int32_t reading = ADS124S08_ReadData(&adc) >> 8;
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe f89b 	bl	8000730 <ADS124S08_ReadData>
 80025fa:	4603      	mov	r3, r0
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	617b      	str	r3, [r7, #20]
				
				// Store reading
				externalADCReadings[i] = reading;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	b299      	uxth	r1, r3
 8002604:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <adsTaskEntry+0xa8>)
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				
				// Small delay between channel readings to avoid SPI conflicts
				osDelay(5);
 800260c:	2005      	movs	r0, #5
 800260e:	f004 fe6e 	bl	80072ee <osDelay>
			for (size_t i = 0; i < 11; i++) {
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	3301      	adds	r3, #1
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	2b0a      	cmp	r3, #10
 800261c:	d9e0      	bls.n	80025e0 <adsTaskEntry+0x58>
			}
			
			// Update timestamp
			last_update = current_tick;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		
		// Yield to other tasks
		osDelay(20);
 8002622:	2014      	movs	r0, #20
 8002624:	f004 fe63 	bl	80072ee <osDelay>
	for (;;) {
 8002628:	e7ce      	b.n	80025c8 <adsTaskEntry+0x40>
 800262a:	bf00      	nop
 800262c:	0800ae68 	.word	0x0800ae68
 8002630:	20002a04 	.word	0x20002a04

08002634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a04      	ldr	r2, [pc, #16]	@ (8002654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002646:	f000 ff83 	bl	8003550 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40001000 	.word	0x40001000

08002658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800265c:	b672      	cpsid	i
}
 800265e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <Error_Handler+0x8>

08002664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_MspInit+0x54>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <HAL_MspInit+0x54>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002678:	6453      	str	r3, [r2, #68]	@ 0x44
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_MspInit+0x54>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_MspInit+0x54>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <HAL_MspInit+0x54>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_MspInit+0x54>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	210f      	movs	r1, #15
 80026a6:	f06f 0001 	mvn.w	r0, #1
 80026aa:	f001 fcc3 	bl	8004034 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800

080026bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	@ 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a49      	ldr	r2, [pc, #292]	@ (8002800 <HAL_ADC_MspInit+0x144>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	f040 808b 	bne.w	80027f6 <HAL_ADC_MspInit+0x13a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	4b47      	ldr	r3, [pc, #284]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	4a46      	ldr	r2, [pc, #280]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f0:	4b44      	ldr	r3, [pc, #272]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 80026f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	4b40      	ldr	r3, [pc, #256]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	4a3f      	ldr	r2, [pc, #252]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6313      	str	r3, [r2, #48]	@ 0x30
 800270c:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	4a38      	ldr	r2, [pc, #224]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6313      	str	r3, [r2, #48]	@ 0x30
 8002728:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	4a31      	ldr	r2, [pc, #196]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 800273e:	f043 0302 	orr.w	r3, r3, #2
 8002742:	6313      	str	r3, [r2, #48]	@ 0x30
 8002744:	4b2f      	ldr	r3, [pc, #188]	@ (8002804 <HAL_ADC_MspInit+0x148>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002750:	233f      	movs	r3, #63	@ 0x3f
 8002752:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002754:	2303      	movs	r3, #3
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	4829      	ldr	r0, [pc, #164]	@ (8002808 <HAL_ADC_MspInit+0x14c>)
 8002764:	f002 f870 	bl	8004848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002768:	230f      	movs	r3, #15
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276c:	2303      	movs	r3, #3
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	4824      	ldr	r0, [pc, #144]	@ (800280c <HAL_ADC_MspInit+0x150>)
 800277c:	f002 f864 	bl	8004848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002780:	2303      	movs	r3, #3
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002784:	2303      	movs	r3, #3
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	4619      	mov	r1, r3
 8002792:	481f      	ldr	r0, [pc, #124]	@ (8002810 <HAL_ADC_MspInit+0x154>)
 8002794:	f002 f858 	bl	8004848 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002798:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 800279a:	4a1f      	ldr	r2, [pc, #124]	@ (8002818 <HAL_ADC_MspInit+0x15c>)
 800279c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027b0:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027b8:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027c0:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027c8:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027da:	480e      	ldr	r0, [pc, #56]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027dc:	f001 fc54 	bl	8004088 <HAL_DMA_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80027e6:	f7ff ff37 	bl	8002658 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80027f0:	4a08      	ldr	r2, [pc, #32]	@ (8002814 <HAL_ADC_MspInit+0x158>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80027f6:	bf00      	nop
 80027f8:	3730      	adds	r7, #48	@ 0x30
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40012000 	.word	0x40012000
 8002804:	40023800 	.word	0x40023800
 8002808:	40020800 	.word	0x40020800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	20002274 	.word	0x20002274
 8002818:	40026410 	.word	0x40026410

0800281c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b092      	sub	sp, #72	@ 0x48
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a8d      	ldr	r2, [pc, #564]	@ (8002a70 <HAL_SPI_MspInit+0x254>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12c      	bne.n	8002898 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	633b      	str	r3, [r7, #48]	@ 0x30
 8002842:	4b8c      	ldr	r3, [pc, #560]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	4a8b      	ldr	r2, [pc, #556]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002848:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800284c:	6453      	str	r3, [r2, #68]	@ 0x44
 800284e:	4b89      	ldr	r3, [pc, #548]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002856:	633b      	str	r3, [r7, #48]	@ 0x30
 8002858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285e:	4b85      	ldr	r3, [pc, #532]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	4a84      	ldr	r2, [pc, #528]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	@ 0x30
 800286a:	4b82      	ldr	r3, [pc, #520]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002876:	23f0      	movs	r3, #240	@ 0xf0
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002886:	2305      	movs	r3, #5
 8002888:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800288e:	4619      	mov	r1, r3
 8002890:	4879      	ldr	r0, [pc, #484]	@ (8002a78 <HAL_SPI_MspInit+0x25c>)
 8002892:	f001 ffd9 	bl	8004848 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002896:	e0e7      	b.n	8002a68 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a77      	ldr	r2, [pc, #476]	@ (8002a7c <HAL_SPI_MspInit+0x260>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d12d      	bne.n	80028fe <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a6:	4b73      	ldr	r3, [pc, #460]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a72      	ldr	r2, [pc, #456]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b2:	4b70      	ldr	r3, [pc, #448]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a6b      	ldr	r2, [pc, #428]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b69      	ldr	r3, [pc, #420]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028da:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80028de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028ec:	2305      	movs	r3, #5
 80028ee:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028f4:	4619      	mov	r1, r3
 80028f6:	4862      	ldr	r0, [pc, #392]	@ (8002a80 <HAL_SPI_MspInit+0x264>)
 80028f8:	f001 ffa6 	bl	8004848 <HAL_GPIO_Init>
}
 80028fc:	e0b4      	b.n	8002a68 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI3)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a60      	ldr	r2, [pc, #384]	@ (8002a84 <HAL_SPI_MspInit+0x268>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d14b      	bne.n	80029a0 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	4a58      	ldr	r2, [pc, #352]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002916:	6413      	str	r3, [r2, #64]	@ 0x40
 8002918:	4b56      	ldr	r3, [pc, #344]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	4b52      	ldr	r3, [pc, #328]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292c:	4a51      	ldr	r2, [pc, #324]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6313      	str	r3, [r2, #48]	@ 0x30
 8002934:	4b4f      	ldr	r3, [pc, #316]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002950:	4b48      	ldr	r3, [pc, #288]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800295c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800296e:	2306      	movs	r3, #6
 8002970:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002972:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002976:	4619      	mov	r1, r3
 8002978:	483f      	ldr	r0, [pc, #252]	@ (8002a78 <HAL_SPI_MspInit+0x25c>)
 800297a:	f001 ff65 	bl	8004848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800297e:	2338      	movs	r3, #56	@ 0x38
 8002980:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298a:	2303      	movs	r3, #3
 800298c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800298e:	2306      	movs	r3, #6
 8002990:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002996:	4619      	mov	r1, r3
 8002998:	4839      	ldr	r0, [pc, #228]	@ (8002a80 <HAL_SPI_MspInit+0x264>)
 800299a:	f001 ff55 	bl	8004848 <HAL_GPIO_Init>
}
 800299e:	e063      	b.n	8002a68 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a38      	ldr	r2, [pc, #224]	@ (8002a88 <HAL_SPI_MspInit+0x26c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12c      	bne.n	8002a04 <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	4a30      	ldr	r2, [pc, #192]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80029b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a29      	ldr	r2, [pc, #164]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80029d0:	f043 0310 	orr.w	r3, r3, #16
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80029e2:	2364      	movs	r3, #100	@ 0x64
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80029f2:	2305      	movs	r3, #5
 80029f4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029fa:	4619      	mov	r1, r3
 80029fc:	4823      	ldr	r0, [pc, #140]	@ (8002a8c <HAL_SPI_MspInit+0x270>)
 80029fe:	f001 ff23 	bl	8004848 <HAL_GPIO_Init>
}
 8002a02:	e031      	b.n	8002a68 <HAL_SPI_MspInit+0x24c>
  else if(hspi->Instance==SPI5)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a21      	ldr	r2, [pc, #132]	@ (8002a90 <HAL_SPI_MspInit+0x274>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d12c      	bne.n	8002a68 <HAL_SPI_MspInit+0x24c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b18      	ldr	r3, [pc, #96]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	4a17      	ldr	r2, [pc, #92]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002a18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002a34:	f043 0320 	orr.w	r3, r3, #32
 8002a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a74 <HAL_SPI_MspInit+0x258>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002a46:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002a58:	2305      	movs	r3, #5
 8002a5a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a60:	4619      	mov	r1, r3
 8002a62:	480c      	ldr	r0, [pc, #48]	@ (8002a94 <HAL_SPI_MspInit+0x278>)
 8002a64:	f001 fef0 	bl	8004848 <HAL_GPIO_Init>
}
 8002a68:	bf00      	nop
 8002a6a:	3748      	adds	r7, #72	@ 0x48
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40013000 	.word	0x40013000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40003800 	.word	0x40003800
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40003c00 	.word	0x40003c00
 8002a88:	40013400 	.word	0x40013400
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40015000 	.word	0x40015000
 8002a94:	40021400 	.word	0x40021400

08002a98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b098      	sub	sp, #96	@ 0x60
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a6f      	ldr	r2, [pc, #444]	@ (8002c74 <HAL_UART_MspInit+0x1dc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d15b      	bne.n	8002b72 <HAL_UART_MspInit+0xda>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002abe:	4b6e      	ldr	r3, [pc, #440]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	4a6d      	ldr	r2, [pc, #436]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aca:	4b6b      	ldr	r3, [pc, #428]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ada:	4b67      	ldr	r3, [pc, #412]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	4a66      	ldr	r2, [pc, #408]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae6:	4b64      	ldr	r3, [pc, #400]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002af2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b00:	2303      	movs	r3, #3
 8002b02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b04:	2308      	movs	r3, #8
 8002b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	485b      	ldr	r0, [pc, #364]	@ (8002c7c <HAL_UART_MspInit+0x1e4>)
 8002b10:	f001 fe9a 	bl	8004848 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002b14:	4b5a      	ldr	r3, [pc, #360]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b16:	4a5b      	ldr	r2, [pc, #364]	@ (8002c84 <HAL_UART_MspInit+0x1ec>)
 8002b18:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002b1a:	4b59      	ldr	r3, [pc, #356]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b20:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b22:	4b57      	ldr	r3, [pc, #348]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b28:	4b55      	ldr	r3, [pc, #340]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2e:	4b54      	ldr	r3, [pc, #336]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b34:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b36:	4b52      	ldr	r3, [pc, #328]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3c:	4b50      	ldr	r3, [pc, #320]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002b42:	4b4f      	ldr	r3, [pc, #316]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b48:	4b4d      	ldr	r3, [pc, #308]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002b54:	484a      	ldr	r0, [pc, #296]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b56:	f001 fa97 	bl	8004088 <HAL_DMA_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002b60:	f7ff fd7a 	bl	8002658 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a46      	ldr	r2, [pc, #280]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b6a:	4a45      	ldr	r2, [pc, #276]	@ (8002c80 <HAL_UART_MspInit+0x1e8>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b70:	e2ec      	b.n	800314c <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==UART5)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a44      	ldr	r2, [pc, #272]	@ (8002c88 <HAL_UART_MspInit+0x1f0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f040 808d 	bne.w	8002c98 <HAL_UART_MspInit+0x200>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b82:	4b3d      	ldr	r3, [pc, #244]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	4a3c      	ldr	r2, [pc, #240]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002b88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b96:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b9e:	4b36      	ldr	r3, [pc, #216]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	4a35      	ldr	r2, [pc, #212]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002baa:	4b33      	ldr	r3, [pc, #204]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bba:	4b2f      	ldr	r3, [pc, #188]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c78 <HAL_UART_MspInit+0x1e0>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002be4:	2308      	movs	r3, #8
 8002be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bec:	4619      	mov	r1, r3
 8002bee:	4823      	ldr	r0, [pc, #140]	@ (8002c7c <HAL_UART_MspInit+0x1e4>)
 8002bf0:	f001 fe2a 	bl	8004848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c00:	2303      	movs	r3, #3
 8002c02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c04:	2308      	movs	r3, #8
 8002c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	481f      	ldr	r0, [pc, #124]	@ (8002c8c <HAL_UART_MspInit+0x1f4>)
 8002c10:	f001 fe1a 	bl	8004848 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_UART_MspInit+0x1fc>)
 8002c18:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c20:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c34:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c36:	4b16      	ldr	r3, [pc, #88]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002c42:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c48:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002c54:	480e      	ldr	r0, [pc, #56]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c56:	f001 fa17 	bl	8004088 <HAL_DMA_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8002c60:	f7ff fcfa 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c6a:	4a09      	ldr	r2, [pc, #36]	@ (8002c90 <HAL_UART_MspInit+0x1f8>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c70:	e26c      	b.n	800314c <HAL_UART_MspInit+0x6b4>
 8002c72:	bf00      	nop
 8002c74:	40004c00 	.word	0x40004c00
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020800 	.word	0x40020800
 8002c80:	200026cc 	.word	0x200026cc
 8002c84:	40026040 	.word	0x40026040
 8002c88:	40005000 	.word	0x40005000
 8002c8c:	40020c00 	.word	0x40020c00
 8002c90:	2000272c 	.word	0x2000272c
 8002c94:	40026010 	.word	0x40026010
  else if(huart->Instance==UART7)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a8f      	ldr	r2, [pc, #572]	@ (8002edc <HAL_UART_MspInit+0x444>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d15b      	bne.n	8002d5a <HAL_UART_MspInit+0x2c2>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca6:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	4a8d      	ldr	r2, [pc, #564]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002cac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cc2:	4b87      	ldr	r3, [pc, #540]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a86      	ldr	r2, [pc, #536]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002cc8:	f043 0310 	orr.w	r3, r3, #16
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b84      	ldr	r3, [pc, #528]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002cda:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002cec:	2308      	movs	r3, #8
 8002cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cf0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	487b      	ldr	r0, [pc, #492]	@ (8002ee4 <HAL_UART_MspInit+0x44c>)
 8002cf8:	f001 fda6 	bl	8004848 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002cfc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002cfe:	4a7b      	ldr	r2, [pc, #492]	@ (8002eec <HAL_UART_MspInit+0x454>)
 8002d00:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8002d02:	4b79      	ldr	r3, [pc, #484]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d04:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002d08:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0a:	4b77      	ldr	r3, [pc, #476]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d10:	4b75      	ldr	r3, [pc, #468]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d16:	4b74      	ldr	r3, [pc, #464]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d1c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1e:	4b72      	ldr	r3, [pc, #456]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d24:	4b70      	ldr	r3, [pc, #448]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8002d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d30:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d36:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002d3c:	486a      	ldr	r0, [pc, #424]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d3e:	f001 f9a3 	bl	8004088 <HAL_DMA_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8002d48:	f7ff fc86 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d52:	4a65      	ldr	r2, [pc, #404]	@ (8002ee8 <HAL_UART_MspInit+0x450>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d58:	e1f8      	b.n	800314c <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==UART8)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a64      	ldr	r2, [pc, #400]	@ (8002ef0 <HAL_UART_MspInit+0x458>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d15a      	bne.n	8002e1a <HAL_UART_MspInit+0x382>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d68:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002d6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d74:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d84:	4b56      	ldr	r3, [pc, #344]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	4a55      	ldr	r2, [pc, #340]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002d8a:	f043 0310 	orr.w	r3, r3, #16
 8002d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d90:	4b53      	ldr	r3, [pc, #332]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002dac:	2308      	movs	r3, #8
 8002dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002db0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002db4:	4619      	mov	r1, r3
 8002db6:	484b      	ldr	r0, [pc, #300]	@ (8002ee4 <HAL_UART_MspInit+0x44c>)
 8002db8:	f001 fd46 	bl	8004848 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8002ef8 <HAL_UART_MspInit+0x460>)
 8002dc0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8002dc2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002dc4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002dc8:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd0:	4b48      	ldr	r3, [pc, #288]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ddc:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dde:	4b45      	ldr	r3, [pc, #276]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002de4:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002dea:	4b42      	ldr	r3, [pc, #264]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002df0:	4b40      	ldr	r3, [pc, #256]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002dfc:	483d      	ldr	r0, [pc, #244]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002dfe:	f001 f943 	bl	8004088 <HAL_DMA_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_MspInit+0x374>
      Error_Handler();
 8002e08:	f7ff fc26 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a39      	ldr	r2, [pc, #228]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002e10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e12:	4a38      	ldr	r2, [pc, #224]	@ (8002ef4 <HAL_UART_MspInit+0x45c>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002e18:	e198      	b.n	800314c <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a37      	ldr	r2, [pc, #220]	@ (8002efc <HAL_UART_MspInit+0x464>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d173      	bne.n	8002f0c <HAL_UART_MspInit+0x474>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002e2e:	f043 0310 	orr.w	r3, r3, #16
 8002e32:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	4b26      	ldr	r3, [pc, #152]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e48:	4a25      	ldr	r2, [pc, #148]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e50:	4b23      	ldr	r3, [pc, #140]	@ (8002ee0 <HAL_UART_MspInit+0x448>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	623b      	str	r3, [r7, #32]
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e5c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e6e:	2307      	movs	r3, #7
 8002e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e76:	4619      	mov	r1, r3
 8002e78:	4821      	ldr	r0, [pc, #132]	@ (8002f00 <HAL_UART_MspInit+0x468>)
 8002e7a:	f001 fce5 	bl	8004848 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002e7e:	4b21      	ldr	r3, [pc, #132]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002e80:	4a21      	ldr	r2, [pc, #132]	@ (8002f08 <HAL_UART_MspInit+0x470>)
 8002e82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e84:	4b1f      	ldr	r3, [pc, #124]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002e86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e92:	4b1c      	ldr	r3, [pc, #112]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e98:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea0:	4b18      	ldr	r3, [pc, #96]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ea6:	4b17      	ldr	r3, [pc, #92]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002eac:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eb2:	4b14      	ldr	r3, [pc, #80]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eb8:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ebe:	4811      	ldr	r0, [pc, #68]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002ec0:	f001 f8e2 	bl	8004088 <HAL_DMA_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_UART_MspInit+0x436>
      Error_Handler();
 8002eca:	f7ff fbc5 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f04 <HAL_UART_MspInit+0x46c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002eda:	e137      	b.n	800314c <HAL_UART_MspInit+0x6b4>
 8002edc:	40007800 	.word	0x40007800
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	2000278c 	.word	0x2000278c
 8002eec:	40026058 	.word	0x40026058
 8002ef0:	40007c00 	.word	0x40007c00
 8002ef4:	200027ec 	.word	0x200027ec
 8002ef8:	400260a0 	.word	0x400260a0
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40020000 	.word	0x40020000
 8002f04:	2000284c 	.word	0x2000284c
 8002f08:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a90      	ldr	r2, [pc, #576]	@ (8003154 <HAL_UART_MspInit+0x6bc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d15a      	bne.n	8002fcc <HAL_UART_MspInit+0x534>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	4a8e      	ldr	r2, [pc, #568]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f26:	4b8c      	ldr	r3, [pc, #560]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	4b88      	ldr	r3, [pc, #544]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	4a87      	ldr	r2, [pc, #540]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f42:	4b85      	ldr	r3, [pc, #532]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f4e:	2360      	movs	r3, #96	@ 0x60
 8002f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f5e:	2307      	movs	r3, #7
 8002f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f62:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f66:	4619      	mov	r1, r3
 8002f68:	487c      	ldr	r0, [pc, #496]	@ (800315c <HAL_UART_MspInit+0x6c4>)
 8002f6a:	f001 fc6d 	bl	8004848 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002f70:	4a7c      	ldr	r2, [pc, #496]	@ (8003164 <HAL_UART_MspInit+0x6cc>)
 8002f72:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002f74:	4b7a      	ldr	r3, [pc, #488]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002f76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f7c:	4b78      	ldr	r3, [pc, #480]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f82:	4b77      	ldr	r3, [pc, #476]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f88:	4b75      	ldr	r3, [pc, #468]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002f8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f90:	4b73      	ldr	r3, [pc, #460]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f96:	4b72      	ldr	r3, [pc, #456]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f9c:	4b70      	ldr	r3, [pc, #448]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fa2:	4b6f      	ldr	r3, [pc, #444]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa8:	4b6d      	ldr	r3, [pc, #436]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fae:	486c      	ldr	r0, [pc, #432]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002fb0:	f001 f86a 	bl	8004088 <HAL_DMA_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_UART_MspInit+0x526>
      Error_Handler();
 8002fba:	f7ff fb4d 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a67      	ldr	r2, [pc, #412]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fc4:	4a66      	ldr	r2, [pc, #408]	@ (8003160 <HAL_UART_MspInit+0x6c8>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002fca:	e0bf      	b.n	800314c <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART3)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a65      	ldr	r2, [pc, #404]	@ (8003168 <HAL_UART_MspInit+0x6d0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d15b      	bne.n	800308e <HAL_UART_MspInit+0x5f6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	4b5f      	ldr	r3, [pc, #380]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a5e      	ldr	r2, [pc, #376]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	4b58      	ldr	r3, [pc, #352]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a57      	ldr	r2, [pc, #348]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b55      	ldr	r3, [pc, #340]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800300e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003012:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003020:	2307      	movs	r3, #7
 8003022:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003024:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003028:	4619      	mov	r1, r3
 800302a:	4850      	ldr	r0, [pc, #320]	@ (800316c <HAL_UART_MspInit+0x6d4>)
 800302c:	f001 fc0c 	bl	8004848 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003030:	4b4f      	ldr	r3, [pc, #316]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003032:	4a50      	ldr	r2, [pc, #320]	@ (8003174 <HAL_UART_MspInit+0x6dc>)
 8003034:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003036:	4b4e      	ldr	r3, [pc, #312]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003038:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800303c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800303e:	4b4c      	ldr	r3, [pc, #304]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003044:	4b4a      	ldr	r3, [pc, #296]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800304a:	4b49      	ldr	r3, [pc, #292]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 800304c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003050:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003052:	4b47      	ldr	r3, [pc, #284]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003054:	2200      	movs	r2, #0
 8003056:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003058:	4b45      	ldr	r3, [pc, #276]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800305e:	4b44      	ldr	r3, [pc, #272]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003060:	2200      	movs	r2, #0
 8003062:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003064:	4b42      	ldr	r3, [pc, #264]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800306a:	4b41      	ldr	r3, [pc, #260]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 800306c:	2200      	movs	r2, #0
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003070:	483f      	ldr	r0, [pc, #252]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003072:	f001 f809 	bl	8004088 <HAL_DMA_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0x5e8>
      Error_Handler();
 800307c:	f7ff faec 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3b      	ldr	r2, [pc, #236]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003084:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003086:	4a3a      	ldr	r2, [pc, #232]	@ (8003170 <HAL_UART_MspInit+0x6d8>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800308c:	e05e      	b.n	800314c <HAL_UART_MspInit+0x6b4>
  else if(huart->Instance==USART6)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a39      	ldr	r2, [pc, #228]	@ (8003178 <HAL_UART_MspInit+0x6e0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d159      	bne.n	800314c <HAL_UART_MspInit+0x6b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	4b2e      	ldr	r3, [pc, #184]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 800309e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 80030a2:	f043 0320 	orr.w	r3, r3, #32
 80030a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 80030aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	4b27      	ldr	r3, [pc, #156]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	4a26      	ldr	r2, [pc, #152]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c4:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_UART_MspInit+0x6c0>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030d0:	23c0      	movs	r3, #192	@ 0xc0
 80030d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030dc:	2303      	movs	r3, #3
 80030de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030e0:	2308      	movs	r3, #8
 80030e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80030e8:	4619      	mov	r1, r3
 80030ea:	4824      	ldr	r0, [pc, #144]	@ (800317c <HAL_UART_MspInit+0x6e4>)
 80030ec:	f001 fbac 	bl	8004848 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80030f0:	4b23      	ldr	r3, [pc, #140]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 80030f2:	4a24      	ldr	r2, [pc, #144]	@ (8003184 <HAL_UART_MspInit+0x6ec>)
 80030f4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030f6:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 80030f8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80030fc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003104:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800310a:	4b1d      	ldr	r3, [pc, #116]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 800310c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003110:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003112:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 8003114:	2200      	movs	r2, #0
 8003116:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 800311a:	2200      	movs	r2, #0
 800311c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800311e:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 8003120:	2200      	movs	r2, #0
 8003122:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003124:	4b16      	ldr	r3, [pc, #88]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 8003126:	2200      	movs	r2, #0
 8003128:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312a:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 800312c:	2200      	movs	r2, #0
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003130:	4813      	ldr	r0, [pc, #76]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 8003132:	f000 ffa9 	bl	8004088 <HAL_DMA_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_MspInit+0x6a8>
      Error_Handler();
 800313c:	f7ff fa8c 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a0f      	ldr	r2, [pc, #60]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 8003144:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003146:	4a0e      	ldr	r2, [pc, #56]	@ (8003180 <HAL_UART_MspInit+0x6e8>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800314c:	bf00      	nop
 800314e:	3760      	adds	r7, #96	@ 0x60
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40004400 	.word	0x40004400
 8003158:	40023800 	.word	0x40023800
 800315c:	40020c00 	.word	0x40020c00
 8003160:	200028ac 	.word	0x200028ac
 8003164:	40026088 	.word	0x40026088
 8003168:	40004800 	.word	0x40004800
 800316c:	40020400 	.word	0x40020400
 8003170:	2000290c 	.word	0x2000290c
 8003174:	40026028 	.word	0x40026028
 8003178:	40011400 	.word	0x40011400
 800317c:	40020800 	.word	0x40020800
 8003180:	2000296c 	.word	0x2000296c
 8003184:	40026428 	.word	0x40026428

08003188 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08e      	sub	sp, #56	@ 0x38
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	4b33      	ldr	r3, [pc, #204]	@ (800326c <HAL_InitTick+0xe4>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	4a32      	ldr	r2, [pc, #200]	@ (800326c <HAL_InitTick+0xe4>)
 80031a2:	f043 0310 	orr.w	r3, r3, #16
 80031a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a8:	4b30      	ldr	r3, [pc, #192]	@ (800326c <HAL_InitTick+0xe4>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031b4:	f107 0210 	add.w	r2, r7, #16
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 f96c 	bl	800549c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80031ce:	f002 f93d 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 80031d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80031d4:	e004      	b.n	80031e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80031d6:	f002 f939 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 80031da:	4603      	mov	r3, r0
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e2:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <HAL_InitTick+0xe8>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	0c9b      	lsrs	r3, r3, #18
 80031ea:	3b01      	subs	r3, #1
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80031ee:	4b21      	ldr	r3, [pc, #132]	@ (8003274 <HAL_InitTick+0xec>)
 80031f0:	4a21      	ldr	r2, [pc, #132]	@ (8003278 <HAL_InitTick+0xf0>)
 80031f2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003274 <HAL_InitTick+0xec>)
 80031f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <HAL_InitTick+0xec>)
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003202:	4b1c      	ldr	r3, [pc, #112]	@ (8003274 <HAL_InitTick+0xec>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003208:	4b1a      	ldr	r3, [pc, #104]	@ (8003274 <HAL_InitTick+0xec>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320e:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_InitTick+0xec>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003214:	4817      	ldr	r0, [pc, #92]	@ (8003274 <HAL_InitTick+0xec>)
 8003216:	f002 ff5f 	bl	80060d8 <HAL_TIM_Base_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003220:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003224:	2b00      	cmp	r3, #0
 8003226:	d11b      	bne.n	8003260 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003228:	4812      	ldr	r0, [pc, #72]	@ (8003274 <HAL_InitTick+0xec>)
 800322a:	f002 ffaf 	bl	800618c <HAL_TIM_Base_Start_IT>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003234:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003238:	2b00      	cmp	r3, #0
 800323a:	d111      	bne.n	8003260 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800323c:	2036      	movs	r0, #54	@ 0x36
 800323e:	f000 ff15 	bl	800406c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b0f      	cmp	r3, #15
 8003246:	d808      	bhi.n	800325a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003248:	2200      	movs	r2, #0
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	2036      	movs	r0, #54	@ 0x36
 800324e:	f000 fef1 	bl	8004034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <HAL_InitTick+0xf4>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	e002      	b.n	8003260 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003260:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003264:	4618      	mov	r0, r3
 8003266:	3738      	adds	r7, #56	@ 0x38
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	431bde83 	.word	0x431bde83
 8003274:	20002a38 	.word	0x20002a38
 8003278:	40001000 	.word	0x40001000
 800327c:	2000000c 	.word	0x2000000c

08003280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003284:	f002 f93c 	bl	8005500 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <NMI_Handler+0x8>

0800328c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <HardFault_Handler+0x4>

08003294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <MemManage_Handler+0x4>

0800329c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <BusFault_Handler+0x4>

080032a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <UsageFault_Handler+0x4>

080032ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80032c0:	4802      	ldr	r0, [pc, #8]	@ (80032cc <DMA1_Stream0_IRQHandler+0x10>)
 80032c2:	f001 f857 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	2000272c 	.word	0x2000272c

080032d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80032d4:	4802      	ldr	r0, [pc, #8]	@ (80032e0 <DMA1_Stream1_IRQHandler+0x10>)
 80032d6:	f001 f84d 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	2000290c 	.word	0x2000290c

080032e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80032e8:	4802      	ldr	r0, [pc, #8]	@ (80032f4 <DMA1_Stream2_IRQHandler+0x10>)
 80032ea:	f001 f843 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200026cc 	.word	0x200026cc

080032f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80032fc:	4802      	ldr	r0, [pc, #8]	@ (8003308 <DMA1_Stream3_IRQHandler+0x10>)
 80032fe:	f001 f839 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	2000278c 	.word	0x2000278c

0800330c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003310:	4802      	ldr	r0, [pc, #8]	@ (800331c <DMA1_Stream5_IRQHandler+0x10>)
 8003312:	f001 f82f 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200028ac 	.word	0x200028ac

08003320 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003324:	4802      	ldr	r0, [pc, #8]	@ (8003330 <DMA1_Stream6_IRQHandler+0x10>)
 8003326:	f001 f825 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200027ec 	.word	0x200027ec

08003334 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003338:	4802      	ldr	r0, [pc, #8]	@ (8003344 <TIM6_DAC_IRQHandler+0x10>)
 800333a:	f002 ff97 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20002a38 	.word	0x20002a38

08003348 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800334c:	4802      	ldr	r0, [pc, #8]	@ (8003358 <DMA2_Stream0_IRQHandler+0x10>)
 800334e:	f001 f811 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20002274 	.word	0x20002274

0800335c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003360:	4802      	ldr	r0, [pc, #8]	@ (800336c <DMA2_Stream1_IRQHandler+0x10>)
 8003362:	f001 f807 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000296c 	.word	0x2000296c

08003370 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003374:	4802      	ldr	r0, [pc, #8]	@ (8003380 <DMA2_Stream2_IRQHandler+0x10>)
 8003376:	f000 fffd 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000284c 	.word	0x2000284c

08003384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003388:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <SystemInit+0x20>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338e:	4a05      	ldr	r2, [pc, #20]	@ (80033a4 <SystemInit+0x20>)
 8003390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033ac:	f7ff ffea 	bl	8003384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033b0:	480c      	ldr	r0, [pc, #48]	@ (80033e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033b2:	490d      	ldr	r1, [pc, #52]	@ (80033e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033b4:	4a0d      	ldr	r2, [pc, #52]	@ (80033ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b8:	e002      	b.n	80033c0 <LoopCopyDataInit>

080033ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033be:	3304      	adds	r3, #4

080033c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c4:	d3f9      	bcc.n	80033ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c6:	4a0a      	ldr	r2, [pc, #40]	@ (80033f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033c8:	4c0a      	ldr	r4, [pc, #40]	@ (80033f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033cc:	e001      	b.n	80033d2 <LoopFillZerobss>

080033ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033d0:	3204      	adds	r2, #4

080033d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d4:	d3fb      	bcc.n	80033ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80033d6:	f007 fc71 	bl	800acbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033da:	f7fe fa91 	bl	8001900 <main>
  bx  lr    
 80033de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80033e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80033ec:	0800afa8 	.word	0x0800afa8
  ldr r2, =_sbss
 80033f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80033f4:	200075b4 	.word	0x200075b4

080033f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC_IRQHandler>

080033fa <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003408:	b672      	cpsid	i
}
 800340a:	bf00      	nop
 800340c:	f7ff f924 	bl	8002658 <Error_Handler>
 8003410:	bf00      	nop
 8003412:	e7fd      	b.n	8003410 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	7a1b      	ldrb	r3, [r3, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d905      	bls.n	8003428 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
 8003420:	f7ff f91a 	bl	8002658 <Error_Handler>
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7a1b      	ldrb	r3, [r3, #8]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	b2d1      	uxtb	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	7211      	strb	r1, [r2, #8]
 8003434:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003436:	f3ef 8211 	mrs	r2, BASEPRI
 800343a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	60fa      	str	r2, [r7, #12]
 800344c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800346c:	b672      	cpsid	i
}
 800346e:	bf00      	nop
 8003470:	f7ff f8f2 	bl	8002658 <Error_Handler>
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7a1b      	ldrb	r3, [r3, #8]
 800347c:	3b01      	subs	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7a1b      	ldrb	r3, [r3, #8]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d905      	bls.n	8003498 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 800348c:	b672      	cpsid	i
}
 800348e:	bf00      	nop
 8003490:	f7ff f8e2 	bl	8002658 <Error_Handler>
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7a1b      	ldrb	r3, [r3, #8]
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034ac:	bf00      	nop
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80034c4:	b672      	cpsid	i
}
 80034c6:	bf00      	nop
 80034c8:	f7ff f8c6 	bl	8002658 <Error_Handler>
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff91 	bl	80033fa <stm32_lock_acquire>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80034ee:	b672      	cpsid	i
}
 80034f0:	bf00      	nop
 80034f2:	f7ff f8b1 	bl	8002658 <Error_Handler>
 80034f6:	bf00      	nop
 80034f8:	e7fd      	b.n	80034f6 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ffae 	bl	800345e <stm32_lock_release>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003510:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <HAL_Init+0x40>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0d      	ldr	r2, [pc, #52]	@ (800354c <HAL_Init+0x40>)
 8003516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800351a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <HAL_Init+0x40>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <HAL_Init+0x40>)
 8003522:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003528:	4b08      	ldr	r3, [pc, #32]	@ (800354c <HAL_Init+0x40>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a07      	ldr	r2, [pc, #28]	@ (800354c <HAL_Init+0x40>)
 800352e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003534:	2003      	movs	r0, #3
 8003536:	f000 fd72 	bl	800401e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800353a:	200f      	movs	r0, #15
 800353c:	f7ff fe24 	bl	8003188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003540:	f7ff f890 	bl	8002664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023c00 	.word	0x40023c00

08003550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_IncTick+0x20>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_IncTick+0x24>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <HAL_IncTick+0x24>)
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000010 	.word	0x20000010
 8003574:	20002a8c 	.word	0x20002a8c

08003578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return uwTick;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_GetTick+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20002a8c 	.word	0x20002a8c

08003590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7ff ffee 	bl	8003578 <HAL_GetTick>
 800359c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d005      	beq.n	80035b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_Delay+0x44>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035b6:	bf00      	nop
 80035b8:	f7ff ffde 	bl	8003578 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d8f7      	bhi.n	80035b8 <HAL_Delay+0x28>
  {
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000010 	.word	0x20000010

080035d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e033      	b.n	8003656 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff f860 	bl	80026bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800361e:	f023 0302 	bic.w	r3, r3, #2
 8003622:	f043 0202 	orr.w	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 facc 	bl	8003bc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
 8003646:	e001      	b.n	800364c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_ADC_Start_DMA+0x22>
 800367e:	2302      	movs	r3, #2
 8003680:	e0eb      	b.n	800385a <HAL_ADC_Start_DMA+0x1fa>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d018      	beq.n	80036ca <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036a8:	4b6e      	ldr	r3, [pc, #440]	@ (8003864 <HAL_ADC_Start_DMA+0x204>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003868 <HAL_ADC_Start_DMA+0x208>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0c9a      	lsrs	r2, r3, #18
 80036b4:	4613      	mov	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80036bc:	e002      	b.n	80036c4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f9      	bne.n	80036be <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d8:	d107      	bne.n	80036ea <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 80a3 	bne.w	8003840 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003724:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003738:	d106      	bne.n	8003748 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f023 0206 	bic.w	r2, r3, #6
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44
 8003746:	e002      	b.n	800374e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003756:	4b45      	ldr	r3, [pc, #276]	@ (800386c <HAL_ADC_Start_DMA+0x20c>)
 8003758:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375e:	4a44      	ldr	r2, [pc, #272]	@ (8003870 <HAL_ADC_Start_DMA+0x210>)
 8003760:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	4a43      	ldr	r2, [pc, #268]	@ (8003874 <HAL_ADC_Start_DMA+0x214>)
 8003768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376e:	4a42      	ldr	r2, [pc, #264]	@ (8003878 <HAL_ADC_Start_DMA+0x218>)
 8003770:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800377a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800378a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800379a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	334c      	adds	r3, #76	@ 0x4c
 80037a6:	4619      	mov	r1, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f000 fd1a 	bl	80041e4 <HAL_DMA_Start_IT>
 80037b0:	4603      	mov	r3, r0
 80037b2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d12a      	bne.n	8003816 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2d      	ldr	r2, [pc, #180]	@ (800387c <HAL_ADC_Start_DMA+0x21c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d015      	beq.n	80037f6 <HAL_ADC_Start_DMA+0x196>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003880 <HAL_ADC_Start_DMA+0x220>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d105      	bne.n	80037e0 <HAL_ADC_Start_DMA+0x180>
 80037d4:	4b25      	ldr	r3, [pc, #148]	@ (800386c <HAL_ADC_Start_DMA+0x20c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a27      	ldr	r2, [pc, #156]	@ (8003884 <HAL_ADC_Start_DMA+0x224>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d136      	bne.n	8003858 <HAL_ADC_Start_DMA+0x1f8>
 80037ea:	4b20      	ldr	r3, [pc, #128]	@ (800386c <HAL_ADC_Start_DMA+0x20c>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d130      	bne.n	8003858 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d129      	bne.n	8003858 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	e020      	b.n	8003858 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_ADC_Start_DMA+0x21c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d11b      	bne.n	8003858 <HAL_ADC_Start_DMA+0x1f8>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d114      	bne.n	8003858 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	e00b      	b.n	8003858 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	f043 0210 	orr.w	r2, r3, #16
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003858:	7ffb      	ldrb	r3, [r7, #31]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000008 	.word	0x20000008
 8003868:	431bde83 	.word	0x431bde83
 800386c:	40012300 	.word	0x40012300
 8003870:	08003dc1 	.word	0x08003dc1
 8003874:	08003e7b 	.word	0x08003e7b
 8003878:	08003e97 	.word	0x08003e97
 800387c:	40012000 	.word	0x40012000
 8003880:	40012100 	.word	0x40012100
 8003884:	40012200 	.word	0x40012200

08003888 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_Stop_DMA+0x1a>
 800389e:	2302      	movs	r3, #2
 80038a0:	e048      	b.n	8003934 <HAL_ADC_Stop_DMA+0xac>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d130      	bne.n	800392a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038d6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d10f      	bne.n	8003906 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fcd2 	bl	8004294 <HAL_DMA_Abort>
 80038f0:	4603      	mov	r3, r0
 80038f2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003914:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1c>
 800397c:	2302      	movs	r3, #2
 800397e:	e113      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x244>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b09      	cmp	r3, #9
 800398e:	d925      	bls.n	80039dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68d9      	ldr	r1, [r3, #12]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	3b1e      	subs	r3, #30
 80039a6:	2207      	movs	r2, #7
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43da      	mvns	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	400a      	ands	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68d9      	ldr	r1, [r3, #12]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4618      	mov	r0, r3
 80039c8:	4603      	mov	r3, r0
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4403      	add	r3, r0
 80039ce:	3b1e      	subs	r3, #30
 80039d0:	409a      	lsls	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	e022      	b.n	8003a22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6919      	ldr	r1, [r3, #16]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	2207      	movs	r2, #7
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	400a      	ands	r2, r1
 80039fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6919      	ldr	r1, [r3, #16]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4618      	mov	r0, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4403      	add	r3, r0
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d824      	bhi.n	8003a74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	3b05      	subs	r3, #5
 8003a3c:	221f      	movs	r2, #31
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	400a      	ands	r2, r1
 8003a4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	4618      	mov	r0, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	3b05      	subs	r3, #5
 8003a66:	fa00 f203 	lsl.w	r2, r0, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a72:	e04c      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d824      	bhi.n	8003ac6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3b23      	subs	r3, #35	@ 0x23
 8003a8e:	221f      	movs	r2, #31
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43da      	mvns	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b23      	subs	r3, #35	@ 0x23
 8003ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ac4:	e023      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b41      	subs	r3, #65	@ 0x41
 8003ad8:	221f      	movs	r2, #31
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	4618      	mov	r0, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	3b41      	subs	r3, #65	@ 0x41
 8003b02:	fa00 f203 	lsl.w	r2, r0, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b0e:	4b29      	ldr	r3, [pc, #164]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x250>)
 8003b10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a28      	ldr	r2, [pc, #160]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x254>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d10f      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x1d8>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b12      	cmp	r3, #18
 8003b22:	d10b      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x254>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d12b      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x23a>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <HAL_ADC_ConfigChannel+0x258>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <HAL_ADC_ConfigChannel+0x1f4>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b11      	cmp	r3, #17
 8003b56:	d122      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a11      	ldr	r2, [pc, #68]	@ (8003bbc <HAL_ADC_ConfigChannel+0x258>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d111      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b7a:	4b11      	ldr	r3, [pc, #68]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x25c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a11      	ldr	r2, [pc, #68]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x260>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	0c9a      	lsrs	r2, r3, #18
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b90:	e002      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f9      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40012300 	.word	0x40012300
 8003bb8:	40012000 	.word	0x40012000
 8003bbc:	10000012 	.word	0x10000012
 8003bc0:	20000008 	.word	0x20000008
 8003bc4:	431bde83 	.word	0x431bde83

08003bc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd0:	4b79      	ldr	r3, [pc, #484]	@ (8003db8 <ADC_Init+0x1f0>)
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	021a      	lsls	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6899      	ldr	r1, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	4a58      	ldr	r2, [pc, #352]	@ (8003dbc <ADC_Init+0x1f4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6899      	ldr	r1, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	e00f      	b.n	8003cc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003cb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cc4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0202 	bic.w	r2, r2, #2
 8003cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7e1b      	ldrb	r3, [r3, #24]
 8003ce0:	005a      	lsls	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01b      	beq.n	8003d2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	035a      	lsls	r2, r3, #13
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	e007      	b.n	8003d3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	051a      	lsls	r2, r3, #20
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d7e:	025a      	lsls	r2, r3, #9
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6899      	ldr	r1, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	029a      	lsls	r2, r3, #10
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	40012300 	.word	0x40012300
 8003dbc:	0f000001 	.word	0x0f000001

08003dc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d13c      	bne.n	8003e54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d12b      	bne.n	8003e4c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d127      	bne.n	8003e4c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d119      	bne.n	8003e4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0220 	bic.w	r2, r2, #32
 8003e26:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7fd fd47 	bl	80018e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e52:	e00e      	b.n	8003e72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7ff fd75 	bl	8003950 <HAL_ADC_ErrorCallback>
}
 8003e66:	e004      	b.n	8003e72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff fd57 	bl	800393c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2240      	movs	r2, #64	@ 0x40
 8003ea8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fd4a 	bl	8003950 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ef6:	4a04      	ldr	r2, [pc, #16]	@ (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	60d3      	str	r3, [r2, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f10:	4b04      	ldr	r3, [pc, #16]	@ (8003f24 <__NVIC_GetPriorityGrouping+0x18>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	f003 0307 	and.w	r3, r3, #7
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	db0b      	blt.n	8003f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	4907      	ldr	r1, [pc, #28]	@ (8003f60 <__NVIC_EnableIRQ+0x38>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2001      	movs	r0, #1
 8003f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	e000e100 	.word	0xe000e100

08003f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	db0a      	blt.n	8003f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	490c      	ldr	r1, [pc, #48]	@ (8003fb0 <__NVIC_SetPriority+0x4c>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	440b      	add	r3, r1
 8003f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f8c:	e00a      	b.n	8003fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4908      	ldr	r1, [pc, #32]	@ (8003fb4 <__NVIC_SetPriority+0x50>)
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	3b04      	subs	r3, #4
 8003f9c:	0112      	lsls	r2, r2, #4
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	761a      	strb	r2, [r3, #24]
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000e100 	.word	0xe000e100
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	@ 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f1c3 0307 	rsb	r3, r3, #7
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	bf28      	it	cs
 8003fd6:	2304      	movcs	r3, #4
 8003fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d902      	bls.n	8003fe8 <NVIC_EncodePriority+0x30>
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3b03      	subs	r3, #3
 8003fe6:	e000      	b.n	8003fea <NVIC_EncodePriority+0x32>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004000:	f04f 31ff 	mov.w	r1, #4294967295
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	43d9      	mvns	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004010:	4313      	orrs	r3, r2
         );
}
 8004012:	4618      	mov	r0, r3
 8004014:	3724      	adds	r7, #36	@ 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff ff4c 	bl	8003ec4 <__NVIC_SetPriorityGrouping>
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004046:	f7ff ff61 	bl	8003f0c <__NVIC_GetPriorityGrouping>
 800404a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	6978      	ldr	r0, [r7, #20]
 8004052:	f7ff ffb1 	bl	8003fb8 <NVIC_EncodePriority>
 8004056:	4602      	mov	r2, r0
 8004058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ff80 	bl	8003f64 <__NVIC_SetPriority>
}
 8004064:	bf00      	nop
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff54 	bl	8003f28 <__NVIC_EnableIRQ>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004094:	f7ff fa70 	bl	8003578 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e099      	b.n	80041d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040c4:	e00f      	b.n	80040e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c6:	f7ff fa57 	bl	8003578 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b05      	cmp	r3, #5
 80040d2:	d908      	bls.n	80040e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2203      	movs	r2, #3
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e078      	b.n	80041d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e8      	bne.n	80040c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4b38      	ldr	r3, [pc, #224]	@ (80041e0 <HAL_DMA_Init+0x158>)
 8004100:	4013      	ands	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004112:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	2b04      	cmp	r3, #4
 800413e:	d107      	bne.n	8004150 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	4313      	orrs	r3, r2
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0307 	bic.w	r3, r3, #7
 8004166:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	2b04      	cmp	r3, #4
 8004178:	d117      	bne.n	80041aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fadf 	bl	8004750 <DMA_CheckFifoParam>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2240      	movs	r2, #64	@ 0x40
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80041a6:	2301      	movs	r3, #1
 80041a8:	e016      	b.n	80041d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fa96 	bl	80046e4 <DMA_CalcBaseAndBitshift>
 80041b8:	4603      	mov	r3, r0
 80041ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c0:	223f      	movs	r2, #63	@ 0x3f
 80041c2:	409a      	lsls	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	f010803f 	.word	0xf010803f

080041e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_DMA_Start_IT+0x26>
 8004206:	2302      	movs	r3, #2
 8004208:	e040      	b.n	800428c <HAL_DMA_Start_IT+0xa8>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d12f      	bne.n	800427e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fa28 	bl	8004688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423c:	223f      	movs	r2, #63	@ 0x3f
 800423e:	409a      	lsls	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0216 	orr.w	r2, r2, #22
 8004252:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0208 	orr.w	r2, r2, #8
 800426a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e005      	b.n	800428a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042a2:	f7ff f969 	bl	8003578 <HAL_GetTick>
 80042a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d008      	beq.n	80042c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2280      	movs	r2, #128	@ 0x80
 80042b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e052      	b.n	800436c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0216 	bic.w	r2, r2, #22
 80042d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <HAL_DMA_Abort+0x62>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0208 	bic.w	r2, r2, #8
 8004304:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004316:	e013      	b.n	8004340 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004318:	f7ff f92e 	bl	8003578 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b05      	cmp	r3, #5
 8004324:	d90c      	bls.n	8004340 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2203      	movs	r2, #3
 8004330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e015      	b.n	800436c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e4      	bne.n	8004318 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	223f      	movs	r2, #63	@ 0x3f
 8004354:	409a      	lsls	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004380:	4b8e      	ldr	r3, [pc, #568]	@ (80045bc <HAL_DMA_IRQHandler+0x248>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a8e      	ldr	r2, [pc, #568]	@ (80045c0 <HAL_DMA_IRQHandler+0x24c>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0a9b      	lsrs	r3, r3, #10
 800438c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	2208      	movs	r2, #8
 80043a0:	409a      	lsls	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01a      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043cc:	2208      	movs	r2, #8
 80043ce:	409a      	lsls	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	f043 0201 	orr.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d012      	beq.n	8004416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004402:	2201      	movs	r2, #1
 8004404:	409a      	lsls	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	f043 0202 	orr.w	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441a:	2204      	movs	r2, #4
 800441c:	409a      	lsls	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d012      	beq.n	800444c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00b      	beq.n	800444c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004438:	2204      	movs	r2, #4
 800443a:	409a      	lsls	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	f043 0204 	orr.w	r2, r3, #4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	2210      	movs	r2, #16
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d043      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d03c      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446e:	2210      	movs	r2, #16
 8004470:	409a      	lsls	r2, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d018      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d024      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
 80044a2:	e01f      	b.n	80044e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01b      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
 80044b4:	e016      	b.n	80044e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d107      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0208 	bic.w	r2, r2, #8
 80044d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e8:	2220      	movs	r2, #32
 80044ea:	409a      	lsls	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 808f 	beq.w	8004614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8087 	beq.w	8004614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	2220      	movs	r2, #32
 800450c:	409a      	lsls	r2, r3
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b05      	cmp	r3, #5
 800451c:	d136      	bne.n	800458c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0216 	bic.w	r2, r2, #22
 800452c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800453c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <HAL_DMA_IRQHandler+0x1da>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0208 	bic.w	r2, r2, #8
 800455c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004562:	223f      	movs	r2, #63	@ 0x3f
 8004564:	409a      	lsls	r2, r3
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457e:	2b00      	cmp	r3, #0
 8004580:	d07e      	beq.n	8004680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
        }
        return;
 800458a:	e079      	b.n	8004680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01d      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d031      	beq.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
 80045b8:	e02c      	b.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
 80045ba:	bf00      	nop
 80045bc:	20000008 	.word	0x20000008
 80045c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d023      	beq.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
 80045d4:	e01e      	b.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10f      	bne.n	8004604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0210 	bic.w	r2, r2, #16
 80045f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004618:	2b00      	cmp	r3, #0
 800461a:	d032      	beq.n	8004682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d022      	beq.n	800466e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2205      	movs	r2, #5
 800462c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	3301      	adds	r3, #1
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	429a      	cmp	r2, r3
 800464a:	d307      	bcc.n	800465c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f2      	bne.n	8004640 <HAL_DMA_IRQHandler+0x2cc>
 800465a:	e000      	b.n	800465e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800465c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
 800467e:	e000      	b.n	8004682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004680:	bf00      	nop
    }
  }
}
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b40      	cmp	r3, #64	@ 0x40
 80046b4:	d108      	bne.n	80046c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046c6:	e007      	b.n	80046d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3b10      	subs	r3, #16
 80046f4:	4a14      	ldr	r2, [pc, #80]	@ (8004748 <DMA_CalcBaseAndBitshift+0x64>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046fe:	4a13      	ldr	r2, [pc, #76]	@ (800474c <DMA_CalcBaseAndBitshift+0x68>)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b03      	cmp	r3, #3
 8004710:	d909      	bls.n	8004726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	1d1a      	adds	r2, r3, #4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	659a      	str	r2, [r3, #88]	@ 0x58
 8004724:	e007      	b.n	8004736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	aaaaaaab 	.word	0xaaaaaaab
 800474c:	0800af90 	.word	0x0800af90

08004750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11f      	bne.n	80047aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d856      	bhi.n	800481e <DMA_CheckFifoParam+0xce>
 8004770:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <DMA_CheckFifoParam+0x28>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	08004789 	.word	0x08004789
 800477c:	0800479b 	.word	0x0800479b
 8004780:	08004789 	.word	0x08004789
 8004784:	0800481f 	.word	0x0800481f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d046      	beq.n	8004822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004798:	e043      	b.n	8004822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047a2:	d140      	bne.n	8004826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a8:	e03d      	b.n	8004826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b2:	d121      	bne.n	80047f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d837      	bhi.n	800482a <DMA_CheckFifoParam+0xda>
 80047ba:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <DMA_CheckFifoParam+0x70>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047d1 	.word	0x080047d1
 80047c4:	080047d7 	.word	0x080047d7
 80047c8:	080047d1 	.word	0x080047d1
 80047cc:	080047e9 	.word	0x080047e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      break;
 80047d4:	e030      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d025      	beq.n	800482e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e6:	e022      	b.n	800482e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047f0:	d11f      	bne.n	8004832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047f6:	e01c      	b.n	8004832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d903      	bls.n	8004806 <DMA_CheckFifoParam+0xb6>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d003      	beq.n	800480c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004804:	e018      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
      break;
 800480a:	e015      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
      break;
 800481c:	e00b      	b.n	8004836 <DMA_CheckFifoParam+0xe6>
      break;
 800481e:	bf00      	nop
 8004820:	e00a      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 8004822:	bf00      	nop
 8004824:	e008      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 8004826:	bf00      	nop
 8004828:	e006      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 800482a:	bf00      	nop
 800482c:	e004      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;   
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 8004836:	bf00      	nop
    }
  } 
  
  return status; 
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004848:	b480      	push	{r7}
 800484a:	b089      	sub	sp, #36	@ 0x24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e177      	b.n	8004b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004864:	2201      	movs	r2, #1
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4013      	ands	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	429a      	cmp	r2, r3
 800487e:	f040 8166 	bne.w	8004b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d005      	beq.n	800489a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004896:	2b02      	cmp	r3, #2
 8004898:	d130      	bne.n	80048fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	2203      	movs	r2, #3
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048d0:	2201      	movs	r2, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 0201 	and.w	r2, r3, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b03      	cmp	r3, #3
 8004906:	d017      	beq.n	8004938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	2203      	movs	r2, #3
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d123      	bne.n	800498c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	08da      	lsrs	r2, r3, #3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3208      	adds	r2, #8
 800494c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	220f      	movs	r2, #15
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	08da      	lsrs	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3208      	adds	r2, #8
 8004986:	69b9      	ldr	r1, [r7, #24]
 8004988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0203 	and.w	r2, r3, #3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80c0 	beq.w	8004b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	4b66      	ldr	r3, [pc, #408]	@ (8004b6c <HAL_GPIO_Init+0x324>)
 80049d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d6:	4a65      	ldr	r2, [pc, #404]	@ (8004b6c <HAL_GPIO_Init+0x324>)
 80049d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80049de:	4b63      	ldr	r3, [pc, #396]	@ (8004b6c <HAL_GPIO_Init+0x324>)
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ea:	4a61      	ldr	r2, [pc, #388]	@ (8004b70 <HAL_GPIO_Init+0x328>)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	3302      	adds	r3, #2
 80049f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	220f      	movs	r2, #15
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a58      	ldr	r2, [pc, #352]	@ (8004b74 <HAL_GPIO_Init+0x32c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d037      	beq.n	8004a86 <HAL_GPIO_Init+0x23e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a57      	ldr	r2, [pc, #348]	@ (8004b78 <HAL_GPIO_Init+0x330>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d031      	beq.n	8004a82 <HAL_GPIO_Init+0x23a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a56      	ldr	r2, [pc, #344]	@ (8004b7c <HAL_GPIO_Init+0x334>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02b      	beq.n	8004a7e <HAL_GPIO_Init+0x236>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a55      	ldr	r2, [pc, #340]	@ (8004b80 <HAL_GPIO_Init+0x338>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d025      	beq.n	8004a7a <HAL_GPIO_Init+0x232>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a54      	ldr	r2, [pc, #336]	@ (8004b84 <HAL_GPIO_Init+0x33c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01f      	beq.n	8004a76 <HAL_GPIO_Init+0x22e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a53      	ldr	r2, [pc, #332]	@ (8004b88 <HAL_GPIO_Init+0x340>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d019      	beq.n	8004a72 <HAL_GPIO_Init+0x22a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a52      	ldr	r2, [pc, #328]	@ (8004b8c <HAL_GPIO_Init+0x344>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_GPIO_Init+0x226>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a51      	ldr	r2, [pc, #324]	@ (8004b90 <HAL_GPIO_Init+0x348>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00d      	beq.n	8004a6a <HAL_GPIO_Init+0x222>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a50      	ldr	r2, [pc, #320]	@ (8004b94 <HAL_GPIO_Init+0x34c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d007      	beq.n	8004a66 <HAL_GPIO_Init+0x21e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a4f      	ldr	r2, [pc, #316]	@ (8004b98 <HAL_GPIO_Init+0x350>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d101      	bne.n	8004a62 <HAL_GPIO_Init+0x21a>
 8004a5e:	2309      	movs	r3, #9
 8004a60:	e012      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a62:	230a      	movs	r3, #10
 8004a64:	e010      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a66:	2308      	movs	r3, #8
 8004a68:	e00e      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a6a:	2307      	movs	r3, #7
 8004a6c:	e00c      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a6e:	2306      	movs	r3, #6
 8004a70:	e00a      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a72:	2305      	movs	r3, #5
 8004a74:	e008      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a76:	2304      	movs	r3, #4
 8004a78:	e006      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e004      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e002      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a86:	2300      	movs	r3, #0
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	f002 0203 	and.w	r2, r2, #3
 8004a8e:	0092      	lsls	r2, r2, #2
 8004a90:	4093      	lsls	r3, r2
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a98:	4935      	ldr	r1, [pc, #212]	@ (8004b70 <HAL_GPIO_Init+0x328>)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aca:	4a34      	ldr	r2, [pc, #208]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ad0:	4b32      	ldr	r3, [pc, #200]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004af4:	4a29      	ldr	r2, [pc, #164]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004afa:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b24:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b48:	4a14      	ldr	r2, [pc, #80]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3301      	adds	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	f67f ae84 	bls.w	8004864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	3724      	adds	r7, #36	@ 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40013800 	.word	0x40013800
 8004b74:	40020000 	.word	0x40020000
 8004b78:	40020400 	.word	0x40020400
 8004b7c:	40020800 	.word	0x40020800
 8004b80:	40020c00 	.word	0x40020c00
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40021400 	.word	0x40021400
 8004b8c:	40021800 	.word	0x40021800
 8004b90:	40021c00 	.word	0x40021c00
 8004b94:	40022000 	.word	0x40022000
 8004b98:	40022400 	.word	0x40022400
 8004b9c:	40013c00 	.word	0x40013c00

08004ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	807b      	strh	r3, [r7, #2]
 8004bac:	4613      	mov	r3, r2
 8004bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bb0:	787b      	ldrb	r3, [r7, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bb6:	887a      	ldrh	r2, [r7, #2]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bbc:	e003      	b.n	8004bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	041a      	lsls	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	619a      	str	r2, [r3, #24]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e267      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d075      	beq.n	8004cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bf2:	4b88      	ldr	r3, [pc, #544]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d00c      	beq.n	8004c18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfe:	4b85      	ldr	r3, [pc, #532]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d112      	bne.n	8004c30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0a:	4b82      	ldr	r3, [pc, #520]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c16:	d10b      	bne.n	8004c30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	4b7e      	ldr	r3, [pc, #504]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d05b      	beq.n	8004cdc <HAL_RCC_OscConfig+0x108>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d157      	bne.n	8004cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e242      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c38:	d106      	bne.n	8004c48 <HAL_RCC_OscConfig+0x74>
 8004c3a:	4b76      	ldr	r3, [pc, #472]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a75      	ldr	r2, [pc, #468]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e01d      	b.n	8004c84 <HAL_RCC_OscConfig+0xb0>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x98>
 8004c52:	4b70      	ldr	r3, [pc, #448]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6f      	ldr	r2, [pc, #444]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a6c      	ldr	r2, [pc, #432]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCC_OscConfig+0xb0>
 8004c6c:	4b69      	ldr	r3, [pc, #420]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a68      	ldr	r2, [pc, #416]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	4b66      	ldr	r3, [pc, #408]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a65      	ldr	r2, [pc, #404]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d013      	beq.n	8004cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fe fc74 	bl	8003578 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fe fc70 	bl	8003578 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e207      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0xc0>
 8004cb2:	e014      	b.n	8004cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fe fc60 	bl	8003578 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fe fc5c 	bl	8003578 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	@ 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e1f3      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	4b51      	ldr	r3, [pc, #324]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0xe8>
 8004cda:	e000      	b.n	8004cde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d063      	beq.n	8004db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cea:	4b4a      	ldr	r3, [pc, #296]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf6:	4b47      	ldr	r3, [pc, #284]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d11c      	bne.n	8004d3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d02:	4b44      	ldr	r3, [pc, #272]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d116      	bne.n	8004d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d0e:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_RCC_OscConfig+0x152>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d001      	beq.n	8004d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e1c7      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d26:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4937      	ldr	r1, [pc, #220]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3a:	e03a      	b.n	8004db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d44:	4b34      	ldr	r3, [pc, #208]	@ (8004e18 <HAL_RCC_OscConfig+0x244>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4a:	f7fe fc15 	bl	8003578 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d52:	f7fe fc11 	bl	8003578 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e1a8      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d64:	4b2b      	ldr	r3, [pc, #172]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d70:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4925      	ldr	r1, [pc, #148]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	600b      	str	r3, [r1, #0]
 8004d84:	e015      	b.n	8004db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d86:	4b24      	ldr	r3, [pc, #144]	@ (8004e18 <HAL_RCC_OscConfig+0x244>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fe fbf4 	bl	8003578 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d94:	f7fe fbf0 	bl	8003578 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e187      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d036      	beq.n	8004e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d016      	beq.n	8004df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dc6:	4b15      	ldr	r3, [pc, #84]	@ (8004e1c <HAL_RCC_OscConfig+0x248>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fe fbd4 	bl	8003578 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd4:	f7fe fbd0 	bl	8003578 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e167      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_RCC_OscConfig+0x240>)
 8004de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x200>
 8004df2:	e01b      	b.n	8004e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df4:	4b09      	ldr	r3, [pc, #36]	@ (8004e1c <HAL_RCC_OscConfig+0x248>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfa:	f7fe fbbd 	bl	8003578 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e00:	e00e      	b.n	8004e20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e02:	f7fe fbb9 	bl	8003578 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d907      	bls.n	8004e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e150      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
 8004e14:	40023800 	.word	0x40023800
 8004e18:	42470000 	.word	0x42470000
 8004e1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e20:	4b88      	ldr	r3, [pc, #544]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ea      	bne.n	8004e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8097 	beq.w	8004f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e3e:	4b81      	ldr	r3, [pc, #516]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10f      	bne.n	8004e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	4a7c      	ldr	r2, [pc, #496]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e66:	2301      	movs	r3, #1
 8004e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6a:	4b77      	ldr	r3, [pc, #476]	@ (8005048 <HAL_RCC_OscConfig+0x474>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d118      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e76:	4b74      	ldr	r3, [pc, #464]	@ (8005048 <HAL_RCC_OscConfig+0x474>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a73      	ldr	r2, [pc, #460]	@ (8005048 <HAL_RCC_OscConfig+0x474>)
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e82:	f7fe fb79 	bl	8003578 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8a:	f7fe fb75 	bl	8003578 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e10c      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005048 <HAL_RCC_OscConfig+0x474>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d106      	bne.n	8004ebe <HAL_RCC_OscConfig+0x2ea>
 8004eb0:	4b64      	ldr	r3, [pc, #400]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb4:	4a63      	ldr	r2, [pc, #396]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ebc:	e01c      	b.n	8004ef8 <HAL_RCC_OscConfig+0x324>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b05      	cmp	r3, #5
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x30c>
 8004ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eca:	4a5e      	ldr	r2, [pc, #376]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	f043 0304 	orr.w	r3, r3, #4
 8004ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCC_OscConfig+0x324>
 8004ee0:	4b58      	ldr	r3, [pc, #352]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	4a57      	ldr	r2, [pc, #348]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eec:	4b55      	ldr	r3, [pc, #340]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef0:	4a54      	ldr	r2, [pc, #336]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	f023 0304 	bic.w	r3, r3, #4
 8004ef6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d015      	beq.n	8004f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fe fb3a 	bl	8003578 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f08:	f7fe fb36 	bl	8003578 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e0cb      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1e:	4b49      	ldr	r3, [pc, #292]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0ee      	beq.n	8004f08 <HAL_RCC_OscConfig+0x334>
 8004f2a:	e014      	b.n	8004f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2c:	f7fe fb24 	bl	8003578 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fe fb20 	bl	8003578 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e0b5      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ee      	bne.n	8004f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5c:	4b39      	ldr	r3, [pc, #228]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	4a38      	ldr	r2, [pc, #224]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80a1 	beq.w	80050b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f72:	4b34      	ldr	r3, [pc, #208]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d05c      	beq.n	8005038 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d141      	bne.n	800500a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f86:	4b31      	ldr	r3, [pc, #196]	@ (800504c <HAL_RCC_OscConfig+0x478>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fe faf4 	bl	8003578 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fe faf0 	bl	8003578 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e087      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa6:	4b27      	ldr	r3, [pc, #156]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69da      	ldr	r2, [r3, #28]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	019b      	lsls	r3, r3, #6
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd4:	061b      	lsls	r3, r3, #24
 8004fd6:	491b      	ldr	r1, [pc, #108]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800504c <HAL_RCC_OscConfig+0x478>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fe fac9 	bl	8003578 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fea:	f7fe fac5 	bl	8003578 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e05c      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffc:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_OscConfig+0x416>
 8005008:	e054      	b.n	80050b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b10      	ldr	r3, [pc, #64]	@ (800504c <HAL_RCC_OscConfig+0x478>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7fe fab2 	bl	8003578 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fe faae 	bl	8003578 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e045      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_RCC_OscConfig+0x470>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x444>
 8005036:	e03d      	b.n	80050b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d107      	bne.n	8005050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e038      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
 8005044:	40023800 	.word	0x40023800
 8005048:	40007000 	.word	0x40007000
 800504c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005050:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_RCC_OscConfig+0x4ec>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d028      	beq.n	80050b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d121      	bne.n	80050b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d11a      	bne.n	80050b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005080:	4013      	ands	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005088:	4293      	cmp	r3, r2
 800508a:	d111      	bne.n	80050b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	3b01      	subs	r3, #1
 800509a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d107      	bne.n	80050b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40023800 	.word	0x40023800

080050c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0cc      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050d8:	4b68      	ldr	r3, [pc, #416]	@ (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d90c      	bls.n	8005100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b65      	ldr	r3, [pc, #404]	@ (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b63      	ldr	r3, [pc, #396]	@ (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0b8      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d020      	beq.n	800514e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005118:	4b59      	ldr	r3, [pc, #356]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a58      	ldr	r2, [pc, #352]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005122:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005130:	4b53      	ldr	r3, [pc, #332]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a52      	ldr	r2, [pc, #328]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800513a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800513c:	4b50      	ldr	r3, [pc, #320]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	494d      	ldr	r1, [pc, #308]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d044      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d107      	bne.n	8005172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005162:	4b47      	ldr	r3, [pc, #284]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d119      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e07f      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d003      	beq.n	8005182 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800517e:	2b03      	cmp	r3, #3
 8005180:	d107      	bne.n	8005192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005182:	4b3f      	ldr	r3, [pc, #252]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e06f      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005192:	4b3b      	ldr	r3, [pc, #236]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e067      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a2:	4b37      	ldr	r3, [pc, #220]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 0203 	bic.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4934      	ldr	r1, [pc, #208]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b4:	f7fe f9e0 	bl	8003578 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051bc:	f7fe f9dc 	bl	8003578 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e04f      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 020c 	and.w	r2, r3, #12
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1eb      	bne.n	80051bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051e4:	4b25      	ldr	r3, [pc, #148]	@ (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d20c      	bcs.n	800520c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b22      	ldr	r3, [pc, #136]	@ (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b20      	ldr	r3, [pc, #128]	@ (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e032      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005218:	4b19      	ldr	r3, [pc, #100]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4916      	ldr	r1, [pc, #88]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005236:	4b12      	ldr	r3, [pc, #72]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	490e      	ldr	r1, [pc, #56]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800524a:	f000 f82d 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 800524e:	4602      	mov	r2, r0
 8005250:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	490a      	ldr	r1, [pc, #40]	@ (8005284 <HAL_RCC_ClockConfig+0x1c0>)
 800525c:	5ccb      	ldrb	r3, [r1, r3]
 800525e:	fa22 f303 	lsr.w	r3, r2, r3
 8005262:	4a09      	ldr	r2, [pc, #36]	@ (8005288 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005266:	4b09      	ldr	r3, [pc, #36]	@ (800528c <HAL_RCC_ClockConfig+0x1c8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fd ff8c 	bl	8003188 <HAL_InitTick>

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40023c00 	.word	0x40023c00
 8005280:	40023800 	.word	0x40023800
 8005284:	0800af78 	.word	0x0800af78
 8005288:	20000008 	.word	0x20000008
 800528c:	2000000c 	.word	0x2000000c

08005290 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005294:	4b03      	ldr	r3, [pc, #12]	@ (80052a4 <HAL_RCC_EnableCSS+0x14>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	4247004c 	.word	0x4247004c

080052a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ac:	b090      	sub	sp, #64	@ 0x40
 80052ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c0:	4b59      	ldr	r3, [pc, #356]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 030c 	and.w	r3, r3, #12
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d00d      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0x40>
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	f200 80a1 	bhi.w	8005414 <HAL_RCC_GetSysClockFreq+0x16c>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x34>
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052da:	e09b      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052dc:	4b53      	ldr	r3, [pc, #332]	@ (800542c <HAL_RCC_GetSysClockFreq+0x184>)
 80052de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052e0:	e09b      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052e2:	4b53      	ldr	r3, [pc, #332]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x188>)
 80052e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052e6:	e098      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d028      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	099b      	lsrs	r3, r3, #6
 8005304:	2200      	movs	r2, #0
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	627a      	str	r2, [r7, #36]	@ 0x24
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005310:	2100      	movs	r1, #0
 8005312:	4b47      	ldr	r3, [pc, #284]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x188>)
 8005314:	fb03 f201 	mul.w	r2, r3, r1
 8005318:	2300      	movs	r3, #0
 800531a:	fb00 f303 	mul.w	r3, r0, r3
 800531e:	4413      	add	r3, r2
 8005320:	4a43      	ldr	r2, [pc, #268]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x188>)
 8005322:	fba0 1202 	umull	r1, r2, r0, r2
 8005326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005328:	460a      	mov	r2, r1
 800532a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800532c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532e:	4413      	add	r3, r2
 8005330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005334:	2200      	movs	r2, #0
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	61fa      	str	r2, [r7, #28]
 800533a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800533e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005342:	f7fa ff5d 	bl	8000200 <__aeabi_uldivmod>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4613      	mov	r3, r2
 800534c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800534e:	e053      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005350:	4b35      	ldr	r3, [pc, #212]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	2200      	movs	r2, #0
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	617a      	str	r2, [r7, #20]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005362:	f04f 0b00 	mov.w	fp, #0
 8005366:	4652      	mov	r2, sl
 8005368:	465b      	mov	r3, fp
 800536a:	f04f 0000 	mov.w	r0, #0
 800536e:	f04f 0100 	mov.w	r1, #0
 8005372:	0159      	lsls	r1, r3, #5
 8005374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005378:	0150      	lsls	r0, r2, #5
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	ebb2 080a 	subs.w	r8, r2, sl
 8005382:	eb63 090b 	sbc.w	r9, r3, fp
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005392:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005396:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800539a:	ebb2 0408 	subs.w	r4, r2, r8
 800539e:	eb63 0509 	sbc.w	r5, r3, r9
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	00eb      	lsls	r3, r5, #3
 80053ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053b0:	00e2      	lsls	r2, r4, #3
 80053b2:	4614      	mov	r4, r2
 80053b4:	461d      	mov	r5, r3
 80053b6:	eb14 030a 	adds.w	r3, r4, sl
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	eb45 030b 	adc.w	r3, r5, fp
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ce:	4629      	mov	r1, r5
 80053d0:	028b      	lsls	r3, r1, #10
 80053d2:	4621      	mov	r1, r4
 80053d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053d8:	4621      	mov	r1, r4
 80053da:	028a      	lsls	r2, r1, #10
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e2:	2200      	movs	r2, #0
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	60fa      	str	r2, [r7, #12]
 80053e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053ec:	f7fa ff08 	bl	8000200 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4613      	mov	r3, r2
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005408:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005412:	e002      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <HAL_RCC_GetSysClockFreq+0x184>)
 8005416:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800541c:	4618      	mov	r0, r3
 800541e:	3740      	adds	r7, #64	@ 0x40
 8005420:	46bd      	mov	sp, r7
 8005422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	00f42400 	.word	0x00f42400
 8005430:	018cba80 	.word	0x018cba80

08005434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005438:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <HAL_RCC_GetHCLKFreq+0x14>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000008 	.word	0x20000008

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005450:	f7ff fff0 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	@ (800546c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0a9b      	lsrs	r3, r3, #10
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4903      	ldr	r1, [pc, #12]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40023800 	.word	0x40023800
 8005470:	0800af88 	.word	0x0800af88

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005478:	f7ff ffdc 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0b5b      	lsrs	r3, r3, #13
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	@ (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40023800 	.word	0x40023800
 8005498:	0800af88 	.word	0x0800af88

0800549c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	220f      	movs	r2, #15
 80054aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054ac:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0203 	and.w	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054b8:	4b0f      	ldr	r3, [pc, #60]	@ (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054c4:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80054d0:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	08db      	lsrs	r3, r3, #3
 80054d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054de:	4b07      	ldr	r3, [pc, #28]	@ (80054fc <HAL_RCC_GetClockConfig+0x60>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	601a      	str	r2, [r3, #0]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40023c00 	.word	0x40023c00

08005500 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005504:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550c:	2b80      	cmp	r3, #128	@ 0x80
 800550e:	d104      	bne.n	800551a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005510:	f000 f80a 	bl	8005528 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005514:	4b03      	ldr	r3, [pc, #12]	@ (8005524 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005516:	2280      	movs	r2, #128	@ 0x80
 8005518:	701a      	strb	r2, [r3, #0]
  }
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	4002380e 	.word	0x4002380e

08005528 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e07b      	b.n	8005640 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d108      	bne.n	8005562 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005558:	d009      	beq.n	800556e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	61da      	str	r2, [r3, #28]
 8005560:	e005      	b.n	800556e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fd f947 	bl	800281c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	ea42 0103 	orr.w	r1, r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	f003 0104 	and.w	r1, r3, #4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005614:	f003 0210 	and.w	r2, r3, #16
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800562e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005658:	f7fd ff8e 	bl	8003578 <HAL_GetTick>
 800565c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800566e:	2302      	movs	r3, #2
 8005670:	e12a      	b.n	80058c8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_SPI_Transmit+0x36>
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e122      	b.n	80058c8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_SPI_Transmit+0x48>
 800568c:	2302      	movs	r3, #2
 800568e:	e11b      	b.n	80058c8 <HAL_SPI_Transmit+0x280>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2203      	movs	r2, #3
 800569c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	88fa      	ldrh	r2, [r7, #6]
 80056b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056de:	d10f      	bne.n	8005700 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d007      	beq.n	800571e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005726:	d152      	bne.n	80057ce <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_SPI_Transmit+0xee>
 8005730:	8b7b      	ldrh	r3, [r7, #26]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d145      	bne.n	80057c2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800575a:	e032      	b.n	80057c2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b02      	cmp	r3, #2
 8005768:	d112      	bne.n	8005790 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576e:	881a      	ldrh	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577a:	1c9a      	adds	r2, r3, #2
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800578e:	e018      	b.n	80057c2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005790:	f7fd fef2 	bl	8003578 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d803      	bhi.n	80057a8 <HAL_SPI_Transmit+0x160>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x166>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e082      	b.n	80058c8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1c7      	bne.n	800575c <HAL_SPI_Transmit+0x114>
 80057cc:	e053      	b.n	8005876 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_SPI_Transmit+0x194>
 80057d6:	8b7b      	ldrh	r3, [r7, #26]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d147      	bne.n	800586c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	7812      	ldrb	r2, [r2, #0]
 80057e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005802:	e033      	b.n	800586c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b02      	cmp	r3, #2
 8005810:	d113      	bne.n	800583a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005838:	e018      	b.n	800586c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800583a:	f7fd fe9d 	bl	8003578 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d803      	bhi.n	8005852 <HAL_SPI_Transmit+0x20a>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d102      	bne.n	8005858 <HAL_SPI_Transmit+0x210>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e02d      	b.n	80058c8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1c6      	bne.n	8005804 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fbd8 	bl	8006030 <SPI_EndRxTxTransaction>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80058c6:	2300      	movs	r3, #0
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d001      	beq.n	80058f0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
 80058ee:	e104      	b.n	8005afa <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_Receive+0x2c>
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0fc      	b.n	8005afa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005908:	d112      	bne.n	8005930 <HAL_SPI_Receive+0x60>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10e      	bne.n	8005930 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2204      	movs	r2, #4
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f8eb 	bl	8005b02 <HAL_SPI_TransmitReceive>
 800592c:	4603      	mov	r3, r0
 800592e:	e0e4      	b.n	8005afa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005930:	f7fd fe22 	bl	8003578 <HAL_GetTick>
 8005934:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_SPI_Receive+0x74>
 8005940:	2302      	movs	r3, #2
 8005942:	e0da      	b.n	8005afa <HAL_SPI_Receive+0x22a>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2204      	movs	r2, #4
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005992:	d10f      	bne.n	80059b4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059be:	2b40      	cmp	r3, #64	@ 0x40
 80059c0:	d007      	beq.n	80059d2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d170      	bne.n	8005abc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059da:	e035      	b.n	8005a48 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d115      	bne.n	8005a16 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f103 020c 	add.w	r2, r3, #12
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	7812      	ldrb	r2, [r2, #0]
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a14:	e018      	b.n	8005a48 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a16:	f7fd fdaf 	bl	8003578 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d803      	bhi.n	8005a2e <HAL_SPI_Receive+0x15e>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d102      	bne.n	8005a34 <HAL_SPI_Receive+0x164>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e058      	b.n	8005afa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1c4      	bne.n	80059dc <HAL_SPI_Receive+0x10c>
 8005a52:	e038      	b.n	8005ac6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d113      	bne.n	8005a8a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6c:	b292      	uxth	r2, r2
 8005a6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a88:	e018      	b.n	8005abc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a8a:	f7fd fd75 	bl	8003578 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d803      	bhi.n	8005aa2 <HAL_SPI_Receive+0x1d2>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d102      	bne.n	8005aa8 <HAL_SPI_Receive+0x1d8>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e01e      	b.n	8005afa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1c6      	bne.n	8005a54 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa4a 	bl	8005f64 <SPI_EndRxTransaction>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08a      	sub	sp, #40	@ 0x28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b10:	2301      	movs	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b14:	f7fd fd30 	bl	8003578 <HAL_GetTick>
 8005b18:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b20:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005b28:	887b      	ldrh	r3, [r7, #2]
 8005b2a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b2c:	7ffb      	ldrb	r3, [r7, #31]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d00c      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x4a>
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b38:	d106      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x46>
 8005b42:	7ffb      	ldrb	r3, [r7, #31]
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d001      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e17f      	b.n	8005e4c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x5c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x5c>
 8005b58:	887b      	ldrh	r3, [r7, #2]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e174      	b.n	8005e4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x6e>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e16d      	b.n	8005e4c <HAL_SPI_TransmitReceive+0x34a>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d003      	beq.n	8005b8c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2205      	movs	r2, #5
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	887a      	ldrh	r2, [r7, #2]
 8005b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	887a      	ldrh	r2, [r7, #2]
 8005ba2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	887a      	ldrh	r2, [r7, #2]
 8005bae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	887a      	ldrh	r2, [r7, #2]
 8005bb4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d007      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005be8:	d17e      	bne.n	8005ce8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0xf6>
 8005bf2:	8afb      	ldrh	r3, [r7, #22]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d16c      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	881a      	ldrh	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	1c9a      	adds	r2, r3, #2
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c1c:	e059      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d11b      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x162>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d016      	beq.n	8005c64 <HAL_SPI_TransmitReceive+0x162>
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d113      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c40:	881a      	ldrh	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d119      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x1a4>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d014      	beq.n	8005ca6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	b292      	uxth	r2, r2
 8005c88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ca6:	f7fd fc67 	bl	8003578 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d80d      	bhi.n	8005cd2 <HAL_SPI_TransmitReceive+0x1d0>
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d009      	beq.n	8005cd2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e0bc      	b.n	8005e4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1a0      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x11c>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d19b      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x11c>
 8005ce6:	e082      	b.n	8005dee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0x1f4>
 8005cf0:	8afb      	ldrh	r3, [r7, #22]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d171      	bne.n	8005dda <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d1c:	e05d      	b.n	8005dda <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d11c      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x264>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d017      	beq.n	8005d66 <HAL_SPI_TransmitReceive+0x264>
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d114      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	7812      	ldrb	r2, [r2, #0]
 8005d48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d119      	bne.n	8005da8 <HAL_SPI_TransmitReceive+0x2a6>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d014      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005da4:	2301      	movs	r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005da8:	f7fd fbe6 	bl	8003578 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d803      	bhi.n	8005dc0 <HAL_SPI_TransmitReceive+0x2be>
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d102      	bne.n	8005dc6 <HAL_SPI_TransmitReceive+0x2c4>
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e038      	b.n	8005e4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d19c      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x21c>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d197      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f91c 	bl	8006030 <SPI_EndRxTxTransaction>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e01d      	b.n	8005e4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3728      	adds	r7, #40	@ 0x28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e64:	f7fd fb88 	bl	8003578 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	4413      	add	r3, r2
 8005e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e74:	f7fd fb80 	bl	8003578 <HAL_GetTick>
 8005e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e7a:	4b39      	ldr	r3, [pc, #228]	@ (8005f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	015b      	lsls	r3, r3, #5
 8005e80:	0d1b      	lsrs	r3, r3, #20
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
 8005e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8a:	e055      	b.n	8005f38 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e92:	d051      	beq.n	8005f38 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e94:	f7fd fb70 	bl	8003578 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d902      	bls.n	8005eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d13d      	bne.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ec2:	d111      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ecc:	d004      	beq.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed6:	d107      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef0:	d10f      	bne.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e018      	b.n	8005f58 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e002      	b.n	8005f38 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4013      	ands	r3, r2
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	bf0c      	ite	eq
 8005f48:	2301      	moveq	r3, #1
 8005f4a:	2300      	movne	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d19a      	bne.n	8005e8c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000008 	.word	0x20000008

08005f64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f78:	d111      	bne.n	8005f9e <SPI_EndRxTransaction+0x3a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f82:	d004      	beq.n	8005f8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f8c:	d107      	bne.n	8005f9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f9c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fa6:	d12a      	bne.n	8005ffe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb0:	d012      	beq.n	8005fd8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2180      	movs	r1, #128	@ 0x80
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff ff49 	bl	8005e54 <SPI_WaitFlagStateUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d02d      	beq.n	8006024 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e026      	b.n	8006026 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff ff36 	bl	8005e54 <SPI_WaitFlagStateUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01a      	beq.n	8006024 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	f043 0220 	orr.w	r2, r3, #32
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e013      	b.n	8006026 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	2101      	movs	r1, #1
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f7ff ff23 	bl	8005e54 <SPI_WaitFlagStateUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e000      	b.n	8006026 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2201      	movs	r2, #1
 8006044:	2102      	movs	r1, #2
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff04 	bl	8005e54 <SPI_WaitFlagStateUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e032      	b.n	80060c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006062:	4b1b      	ldr	r3, [pc, #108]	@ (80060d0 <SPI_EndRxTxTransaction+0xa0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <SPI_EndRxTxTransaction+0xa4>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	0d5b      	lsrs	r3, r3, #21
 800606e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006072:	fb02 f303 	mul.w	r3, r2, r3
 8006076:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006080:	d112      	bne.n	80060a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2200      	movs	r2, #0
 800608a:	2180      	movs	r1, #128	@ 0x80
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff fee1 	bl	8005e54 <SPI_WaitFlagStateUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d016      	beq.n	80060c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609c:	f043 0220 	orr.w	r2, r3, #32
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e00f      	b.n	80060c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060be:	2b80      	cmp	r3, #128	@ 0x80
 80060c0:	d0f2      	beq.n	80060a8 <SPI_EndRxTxTransaction+0x78>
 80060c2:	e000      	b.n	80060c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80060c4:	bf00      	nop
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000008 	.word	0x20000008
 80060d4:	165e9f81 	.word	0x165e9f81

080060d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e041      	b.n	800616e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f839 	bl	8006176 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f000 f9c0 	bl	800649c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	d001      	beq.n	80061a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e04e      	b.n	8006242 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a23      	ldr	r2, [pc, #140]	@ (8006250 <HAL_TIM_Base_Start_IT+0xc4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d022      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x80>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ce:	d01d      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x80>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006254 <HAL_TIM_Base_Start_IT+0xc8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d018      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x80>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1e      	ldr	r2, [pc, #120]	@ (8006258 <HAL_TIM_Base_Start_IT+0xcc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x80>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <HAL_TIM_Base_Start_IT+0xd0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00e      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x80>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006260 <HAL_TIM_Base_Start_IT+0xd4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d009      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x80>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a19      	ldr	r2, [pc, #100]	@ (8006264 <HAL_TIM_Base_Start_IT+0xd8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x80>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a18      	ldr	r2, [pc, #96]	@ (8006268 <HAL_TIM_Base_Start_IT+0xdc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d111      	bne.n	8006230 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b06      	cmp	r3, #6
 800621c:	d010      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622e:	e007      	b.n	8006240 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40010000 	.word	0x40010000
 8006254:	40000400 	.word	0x40000400
 8006258:	40000800 	.word	0x40000800
 800625c:	40000c00 	.word	0x40000c00
 8006260:	40010400 	.word	0x40010400
 8006264:	40014000 	.word	0x40014000
 8006268:	40001800 	.word	0x40001800

0800626c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d020      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0202 	mvn.w	r2, #2
 80062a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8d2 	bl	8006460 <HAL_TIM_IC_CaptureCallback>
 80062bc:	e005      	b.n	80062ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8c4 	bl	800644c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f8d5 	bl	8006474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d020      	beq.n	800631c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01b      	beq.n	800631c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0204 	mvn.w	r2, #4
 80062ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f8ac 	bl	8006460 <HAL_TIM_IC_CaptureCallback>
 8006308:	e005      	b.n	8006316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f89e 	bl	800644c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f8af 	bl	8006474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d020      	beq.n	8006368 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01b      	beq.n	8006368 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0208 	mvn.w	r2, #8
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f886 	bl	8006460 <HAL_TIM_IC_CaptureCallback>
 8006354:	e005      	b.n	8006362 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f878 	bl	800644c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f889 	bl	8006474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b00      	cmp	r3, #0
 8006370:	d020      	beq.n	80063b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01b      	beq.n	80063b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0210 	mvn.w	r2, #16
 8006384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2208      	movs	r2, #8
 800638a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f860 	bl	8006460 <HAL_TIM_IC_CaptureCallback>
 80063a0:	e005      	b.n	80063ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f852 	bl	800644c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f863 	bl	8006474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00c      	beq.n	80063d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0201 	mvn.w	r2, #1
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fc f92e 	bl	8002634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00c      	beq.n	80063fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f900 	bl	80065fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f834 	bl	8006488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0220 	mvn.w	r2, #32
 800643c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8d2 	bl	80065e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a43      	ldr	r2, [pc, #268]	@ (80065bc <TIM_Base_SetConfig+0x120>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ba:	d00f      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a40      	ldr	r2, [pc, #256]	@ (80065c0 <TIM_Base_SetConfig+0x124>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00b      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3f      	ldr	r2, [pc, #252]	@ (80065c4 <TIM_Base_SetConfig+0x128>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a3e      	ldr	r2, [pc, #248]	@ (80065c8 <TIM_Base_SetConfig+0x12c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a3d      	ldr	r2, [pc, #244]	@ (80065cc <TIM_Base_SetConfig+0x130>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d108      	bne.n	80064ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a32      	ldr	r2, [pc, #200]	@ (80065bc <TIM_Base_SetConfig+0x120>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02b      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fc:	d027      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2f      	ldr	r2, [pc, #188]	@ (80065c0 <TIM_Base_SetConfig+0x124>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d023      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2e      	ldr	r2, [pc, #184]	@ (80065c4 <TIM_Base_SetConfig+0x128>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01f      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2d      	ldr	r2, [pc, #180]	@ (80065c8 <TIM_Base_SetConfig+0x12c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01b      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2c      	ldr	r2, [pc, #176]	@ (80065cc <TIM_Base_SetConfig+0x130>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d017      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2b      	ldr	r2, [pc, #172]	@ (80065d0 <TIM_Base_SetConfig+0x134>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2a      	ldr	r2, [pc, #168]	@ (80065d4 <TIM_Base_SetConfig+0x138>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00f      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a29      	ldr	r2, [pc, #164]	@ (80065d8 <TIM_Base_SetConfig+0x13c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00b      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a28      	ldr	r2, [pc, #160]	@ (80065dc <TIM_Base_SetConfig+0x140>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a27      	ldr	r2, [pc, #156]	@ (80065e0 <TIM_Base_SetConfig+0x144>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a26      	ldr	r2, [pc, #152]	@ (80065e4 <TIM_Base_SetConfig+0x148>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d108      	bne.n	8006560 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a0e      	ldr	r2, [pc, #56]	@ (80065bc <TIM_Base_SetConfig+0x120>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_Base_SetConfig+0xf2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a10      	ldr	r2, [pc, #64]	@ (80065cc <TIM_Base_SetConfig+0x130>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d103      	bne.n	8006596 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f043 0204 	orr.w	r2, r3, #4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	601a      	str	r2, [r3, #0]
}
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40000400 	.word	0x40000400
 80065c4:	40000800 	.word	0x40000800
 80065c8:	40000c00 	.word	0x40000c00
 80065cc:	40010400 	.word	0x40010400
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800
 80065dc:	40001800 	.word	0x40001800
 80065e0:	40001c00 	.word	0x40001c00
 80065e4:	40002000 	.word	0x40002000

080065e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e042      	b.n	80066a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fc fa2e 	bl	8002a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2224      	movs	r2, #36	@ 0x24
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 faa1 	bl	8006b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d112      	bne.n	80066f0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <HAL_UART_Receive_DMA+0x26>
 80066d0:	88fb      	ldrh	r3, [r7, #6]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e00b      	b.n	80066f2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	461a      	mov	r2, r3
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f926 	bl	8006938 <UART_Start_Receive_DMA>
 80066ec:	4603      	mov	r3, r0
 80066ee:	e000      	b.n	80066f2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80066f0:	2302      	movs	r3, #2
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b09c      	sub	sp, #112	@ 0x70
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d172      	bne.n	800683c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006758:	2200      	movs	r2, #0
 800675a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800675c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800676c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800676e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006772:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800677c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800677e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800678a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e5      	bne.n	800675c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3314      	adds	r3, #20
 8006796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a2:	f023 0301 	bic.w	r3, r3, #1
 80067a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80067a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3314      	adds	r3, #20
 80067ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80067b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	623b      	str	r3, [r7, #32]
   return(result);
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067da:	663b      	str	r3, [r7, #96]	@ 0x60
 80067dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80067e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e5      	bne.n	80067c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006804:	2b01      	cmp	r3, #1
 8006806:	d119      	bne.n	800683c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	60fb      	str	r3, [r7, #12]
   return(result);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	330c      	adds	r3, #12
 8006826:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006828:	61fa      	str	r2, [r7, #28]
 800682a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	69b9      	ldr	r1, [r7, #24]
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	617b      	str	r3, [r7, #20]
   return(result);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e5      	bne.n	8006808 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800683c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800683e:	2200      	movs	r2, #0
 8006840:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006846:	2b01      	cmp	r3, #1
 8006848:	d106      	bne.n	8006858 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800684c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800684e:	4619      	mov	r1, r3
 8006850:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006852:	f7ff ff66 	bl	8006722 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006856:	e002      	b.n	800685e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006858:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800685a:	f7fa ff3d 	bl	80016d8 <HAL_UART_RxCpltCallback>
}
 800685e:	bf00      	nop
 8006860:	3770      	adds	r7, #112	@ 0x70
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006872:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687e:	2b01      	cmp	r3, #1
 8006880:	d108      	bne.n	8006894 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	b29b      	uxth	r3, r3
 800688a:	4619      	mov	r1, r3
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff ff48 	bl	8006722 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006892:	e002      	b.n	800689a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff ff30 	bl	80066fa <HAL_UART_RxHalfCpltCallback>
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068be:	2b80      	cmp	r3, #128	@ 0x80
 80068c0:	bf0c      	ite	eq
 80068c2:	2301      	moveq	r3, #1
 80068c4:	2300      	movne	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b21      	cmp	r3, #33	@ 0x21
 80068d4:	d108      	bne.n	80068e8 <UART_DMAError+0x46>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2200      	movs	r2, #0
 80068e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80068e2:	68b8      	ldr	r0, [r7, #8]
 80068e4:	f000 f8ce 	bl	8006a84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f2:	2b40      	cmp	r3, #64	@ 0x40
 80068f4:	bf0c      	ite	eq
 80068f6:	2301      	moveq	r3, #1
 80068f8:	2300      	movne	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b22      	cmp	r3, #34	@ 0x22
 8006908:	d108      	bne.n	800691c <UART_DMAError+0x7a>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006916:	68b8      	ldr	r0, [r7, #8]
 8006918:	f000 f8dc 	bl	8006ad4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006920:	f043 0210 	orr.w	r2, r3, #16
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006928:	68b8      	ldr	r0, [r7, #8]
 800692a:	f7ff fef0 	bl	800670e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b098      	sub	sp, #96	@ 0x60
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	88fa      	ldrh	r2, [r7, #6]
 8006950:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2222      	movs	r2, #34	@ 0x22
 800695c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006964:	4a44      	ldr	r2, [pc, #272]	@ (8006a78 <UART_Start_Receive_DMA+0x140>)
 8006966:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800696c:	4a43      	ldr	r2, [pc, #268]	@ (8006a7c <UART_Start_Receive_DMA+0x144>)
 800696e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006974:	4a42      	ldr	r2, [pc, #264]	@ (8006a80 <UART_Start_Receive_DMA+0x148>)
 8006976:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697c:	2200      	movs	r2, #0
 800697e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006980:	f107 0308 	add.w	r3, r7, #8
 8006984:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	f7fd fc24 	bl	80041e4 <HAL_DMA_Start_IT>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2210      	movs	r2, #16
 80069a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e05d      	b.n	8006a70 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d019      	beq.n	8006a06 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	330c      	adds	r3, #12
 80069d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069f2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80069f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80069f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e5      	bne.n	80069d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3314      	adds	r3, #20
 8006a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	f043 0301 	orr.w	r3, r3, #1
 8006a1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3314      	adds	r3, #20
 8006a24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a26:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e5      	bne.n	8006a06 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	617b      	str	r3, [r7, #20]
   return(result);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a50:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6a39      	ldr	r1, [r7, #32]
 8006a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3760      	adds	r7, #96	@ 0x60
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	0800673b 	.word	0x0800673b
 8006a7c:	08006867 	.word	0x08006867
 8006a80:	080068a3 	.word	0x080068a3

08006a84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b089      	sub	sp, #36	@ 0x24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	61ba      	str	r2, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006ac8:	bf00      	nop
 8006aca:	3724      	adds	r7, #36	@ 0x24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b095      	sub	sp, #84	@ 0x54
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006afc:	643a      	str	r2, [r7, #64]	@ 0x40
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e5      	bne.n	8006adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d119      	bne.n	8006b80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f023 0310 	bic.w	r3, r3, #16
 8006b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b6c:	61ba      	str	r2, [r7, #24]
 8006b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e5      	bne.n	8006b4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b8e:	bf00      	nop
 8006b90:	3754      	adds	r7, #84	@ 0x54
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
	...

08006b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba0:	b0c0      	sub	sp, #256	@ 0x100
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	68d9      	ldr	r1, [r3, #12]
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	ea40 0301 	orr.w	r3, r0, r1
 8006bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006bf4:	f021 010c 	bic.w	r1, r1, #12
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c02:	430b      	orrs	r3, r1
 8006c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c16:	6999      	ldr	r1, [r3, #24]
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	ea40 0301 	orr.w	r3, r0, r1
 8006c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006e68 <UART_SetConfig+0x2cc>)
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d005      	beq.n	8006c3c <UART_SetConfig+0xa0>
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b8d      	ldr	r3, [pc, #564]	@ (8006e6c <UART_SetConfig+0x2d0>)
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d104      	bne.n	8006c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fe fc1a 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8006c40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c44:	e003      	b.n	8006c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c46:	f7fe fc01 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8006c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c58:	f040 810c 	bne.w	8006e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c6e:	4622      	mov	r2, r4
 8006c70:	462b      	mov	r3, r5
 8006c72:	1891      	adds	r1, r2, r2
 8006c74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c76:	415b      	adcs	r3, r3
 8006c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c7e:	4621      	mov	r1, r4
 8006c80:	eb12 0801 	adds.w	r8, r2, r1
 8006c84:	4629      	mov	r1, r5
 8006c86:	eb43 0901 	adc.w	r9, r3, r1
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c9e:	4690      	mov	r8, r2
 8006ca0:	4699      	mov	r9, r3
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	eb18 0303 	adds.w	r3, r8, r3
 8006ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cac:	462b      	mov	r3, r5
 8006cae:	eb49 0303 	adc.w	r3, r9, r3
 8006cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cca:	460b      	mov	r3, r1
 8006ccc:	18db      	adds	r3, r3, r3
 8006cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	eb42 0303 	adc.w	r3, r2, r3
 8006cd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ce0:	f7f9 fa8e 	bl	8000200 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4b61      	ldr	r3, [pc, #388]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006cea:	fba3 2302 	umull	r2, r3, r3, r2
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	011c      	lsls	r4, r3, #4
 8006cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d04:	4642      	mov	r2, r8
 8006d06:	464b      	mov	r3, r9
 8006d08:	1891      	adds	r1, r2, r2
 8006d0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d0c:	415b      	adcs	r3, r3
 8006d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d14:	4641      	mov	r1, r8
 8006d16:	eb12 0a01 	adds.w	sl, r2, r1
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d34:	4692      	mov	sl, r2
 8006d36:	469b      	mov	fp, r3
 8006d38:	4643      	mov	r3, r8
 8006d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d42:	464b      	mov	r3, r9
 8006d44:	eb4b 0303 	adc.w	r3, fp, r3
 8006d48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d60:	460b      	mov	r3, r1
 8006d62:	18db      	adds	r3, r3, r3
 8006d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d66:	4613      	mov	r3, r2
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d76:	f7f9 fa43 	bl	8000200 <__aeabi_uldivmod>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4b3b      	ldr	r3, [pc, #236]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006d82:	fba3 2301 	umull	r2, r3, r3, r1
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	2264      	movs	r2, #100	@ 0x64
 8006d8a:	fb02 f303 	mul.w	r3, r2, r3
 8006d8e:	1acb      	subs	r3, r1, r3
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d96:	4b36      	ldr	r3, [pc, #216]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006d98:	fba3 2302 	umull	r2, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006da4:	441c      	add	r4, r3
 8006da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006db0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	1891      	adds	r1, r2, r2
 8006dbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006dc0:	415b      	adcs	r3, r3
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006dc8:	4641      	mov	r1, r8
 8006dca:	1851      	adds	r1, r2, r1
 8006dcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dce:	4649      	mov	r1, r9
 8006dd0:	414b      	adcs	r3, r1
 8006dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006de0:	4659      	mov	r1, fp
 8006de2:	00cb      	lsls	r3, r1, #3
 8006de4:	4651      	mov	r1, sl
 8006de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dea:	4651      	mov	r1, sl
 8006dec:	00ca      	lsls	r2, r1, #3
 8006dee:	4610      	mov	r0, r2
 8006df0:	4619      	mov	r1, r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	4642      	mov	r2, r8
 8006df6:	189b      	adds	r3, r3, r2
 8006df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	460a      	mov	r2, r1
 8006e00:	eb42 0303 	adc.w	r3, r2, r3
 8006e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	18db      	adds	r3, r3, r3
 8006e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e22:	4613      	mov	r3, r2
 8006e24:	eb42 0303 	adc.w	r3, r2, r3
 8006e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e32:	f7f9 f9e5 	bl	8000200 <__aeabi_uldivmod>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	2164      	movs	r1, #100	@ 0x64
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	3332      	adds	r3, #50	@ 0x32
 8006e4e:	4a08      	ldr	r2, [pc, #32]	@ (8006e70 <UART_SetConfig+0x2d4>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	f003 0207 	and.w	r2, r3, #7
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4422      	add	r2, r4
 8006e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e64:	e106      	b.n	8007074 <UART_SetConfig+0x4d8>
 8006e66:	bf00      	nop
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	40011400 	.word	0x40011400
 8006e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e86:	4642      	mov	r2, r8
 8006e88:	464b      	mov	r3, r9
 8006e8a:	1891      	adds	r1, r2, r2
 8006e8c:	6239      	str	r1, [r7, #32]
 8006e8e:	415b      	adcs	r3, r3
 8006e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e96:	4641      	mov	r1, r8
 8006e98:	1854      	adds	r4, r2, r1
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	eb43 0501 	adc.w	r5, r3, r1
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	00eb      	lsls	r3, r5, #3
 8006eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eae:	00e2      	lsls	r2, r4, #3
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	461d      	mov	r5, r3
 8006eb4:	4643      	mov	r3, r8
 8006eb6:	18e3      	adds	r3, r4, r3
 8006eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	eb45 0303 	adc.w	r3, r5, r3
 8006ec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ed2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	008b      	lsls	r3, r1, #2
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eec:	4621      	mov	r1, r4
 8006eee:	008a      	lsls	r2, r1, #2
 8006ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ef4:	f7f9 f984 	bl	8000200 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4b60      	ldr	r3, [pc, #384]	@ (8007080 <UART_SetConfig+0x4e4>)
 8006efe:	fba3 2302 	umull	r2, r3, r3, r2
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	011c      	lsls	r4, r3, #4
 8006f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	61b9      	str	r1, [r7, #24]
 8006f20:	415b      	adcs	r3, r3
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f28:	4641      	mov	r1, r8
 8006f2a:	1851      	adds	r1, r2, r1
 8006f2c:	6139      	str	r1, [r7, #16]
 8006f2e:	4649      	mov	r1, r9
 8006f30:	414b      	adcs	r3, r1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f40:	4659      	mov	r1, fp
 8006f42:	00cb      	lsls	r3, r1, #3
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	00ca      	lsls	r2, r1, #3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	4642      	mov	r2, r8
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	460a      	mov	r2, r1
 8006f60:	eb42 0303 	adc.w	r3, r2, r3
 8006f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f80:	4649      	mov	r1, r9
 8006f82:	008b      	lsls	r3, r1, #2
 8006f84:	4641      	mov	r1, r8
 8006f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	008a      	lsls	r2, r1, #2
 8006f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f92:	f7f9 f935 	bl	8000200 <__aeabi_uldivmod>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4b38      	ldr	r3, [pc, #224]	@ (8007080 <UART_SetConfig+0x4e4>)
 8006f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	2264      	movs	r2, #100	@ 0x64
 8006fa6:	fb02 f303 	mul.w	r3, r2, r3
 8006faa:	1acb      	subs	r3, r1, r3
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	3332      	adds	r3, #50	@ 0x32
 8006fb0:	4a33      	ldr	r2, [pc, #204]	@ (8007080 <UART_SetConfig+0x4e4>)
 8006fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fbc:	441c      	add	r4, r3
 8006fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	1891      	adds	r1, r2, r2
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	415b      	adcs	r3, r3
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fdc:	4641      	mov	r1, r8
 8006fde:	1851      	adds	r1, r2, r1
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	414b      	adcs	r3, r1
 8006fe6:	607b      	str	r3, [r7, #4]
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	00cb      	lsls	r3, r1, #3
 8006ff8:	4651      	mov	r1, sl
 8006ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ffe:	4651      	mov	r1, sl
 8007000:	00ca      	lsls	r2, r1, #3
 8007002:	4610      	mov	r0, r2
 8007004:	4619      	mov	r1, r3
 8007006:	4603      	mov	r3, r0
 8007008:	4642      	mov	r2, r8
 800700a:	189b      	adds	r3, r3, r2
 800700c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800700e:	464b      	mov	r3, r9
 8007010:	460a      	mov	r2, r1
 8007012:	eb42 0303 	adc.w	r3, r2, r3
 8007016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	663b      	str	r3, [r7, #96]	@ 0x60
 8007022:	667a      	str	r2, [r7, #100]	@ 0x64
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007030:	4649      	mov	r1, r9
 8007032:	008b      	lsls	r3, r1, #2
 8007034:	4641      	mov	r1, r8
 8007036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800703a:	4641      	mov	r1, r8
 800703c:	008a      	lsls	r2, r1, #2
 800703e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007042:	f7f9 f8dd 	bl	8000200 <__aeabi_uldivmod>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <UART_SetConfig+0x4e4>)
 800704c:	fba3 1302 	umull	r1, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	2164      	movs	r1, #100	@ 0x64
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	3332      	adds	r3, #50	@ 0x32
 800705e:	4a08      	ldr	r2, [pc, #32]	@ (8007080 <UART_SetConfig+0x4e4>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	f003 020f 	and.w	r2, r3, #15
 800706a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4422      	add	r2, r4
 8007072:	609a      	str	r2, [r3, #8]
}
 8007074:	bf00      	nop
 8007076:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800707a:	46bd      	mov	sp, r7
 800707c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007080:	51eb851f 	.word	0x51eb851f

08007084 <__NVIC_SetPriority>:
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	6039      	str	r1, [r7, #0]
 800708e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007094:	2b00      	cmp	r3, #0
 8007096:	db0a      	blt.n	80070ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	b2da      	uxtb	r2, r3
 800709c:	490c      	ldr	r1, [pc, #48]	@ (80070d0 <__NVIC_SetPriority+0x4c>)
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	0112      	lsls	r2, r2, #4
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	440b      	add	r3, r1
 80070a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80070ac:	e00a      	b.n	80070c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	4908      	ldr	r1, [pc, #32]	@ (80070d4 <__NVIC_SetPriority+0x50>)
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	3b04      	subs	r3, #4
 80070bc:	0112      	lsls	r2, r2, #4
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	440b      	add	r3, r1
 80070c2:	761a      	strb	r2, [r3, #24]
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	e000e100 	.word	0xe000e100
 80070d4:	e000ed00 	.word	0xe000ed00

080070d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80070dc:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <SysTick_Handler+0x1c>)
 80070de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80070e0:	f002 fbfc 	bl	80098dc <xTaskGetSchedulerState>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d001      	beq.n	80070ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80070ea:	f003 faf5 	bl	800a6d8 <xPortSysTickHandler>
  }
}
 80070ee:	bf00      	nop
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	e000e010 	.word	0xe000e010

080070f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80070fc:	2100      	movs	r1, #0
 80070fe:	f06f 0004 	mvn.w	r0, #4
 8007102:	f7ff ffbf 	bl	8007084 <__NVIC_SetPriority>
#endif
}
 8007106:	bf00      	nop
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007112:	f3ef 8305 	mrs	r3, IPSR
 8007116:	603b      	str	r3, [r7, #0]
  return(result);
 8007118:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800711e:	f06f 0305 	mvn.w	r3, #5
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	e00c      	b.n	8007140 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007126:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <osKernelInitialize+0x44>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d105      	bne.n	800713a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800712e:	4b08      	ldr	r3, [pc, #32]	@ (8007150 <osKernelInitialize+0x44>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007134:	2300      	movs	r3, #0
 8007136:	607b      	str	r3, [r7, #4]
 8007138:	e002      	b.n	8007140 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800713a:	f04f 33ff 	mov.w	r3, #4294967295
 800713e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007140:	687b      	ldr	r3, [r7, #4]
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20002a90 	.word	0x20002a90

08007154 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715a:	f3ef 8305 	mrs	r3, IPSR
 800715e:	603b      	str	r3, [r7, #0]
  return(result);
 8007160:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007166:	f06f 0305 	mvn.w	r3, #5
 800716a:	607b      	str	r3, [r7, #4]
 800716c:	e010      	b.n	8007190 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800716e:	4b0b      	ldr	r3, [pc, #44]	@ (800719c <osKernelStart+0x48>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d109      	bne.n	800718a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007176:	f7ff ffbf 	bl	80070f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800717a:	4b08      	ldr	r3, [pc, #32]	@ (800719c <osKernelStart+0x48>)
 800717c:	2202      	movs	r2, #2
 800717e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007180:	f001 ff26 	bl	8008fd0 <vTaskStartScheduler>
      stat = osOK;
 8007184:	2300      	movs	r3, #0
 8007186:	607b      	str	r3, [r7, #4]
 8007188:	e002      	b.n	8007190 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800718a:	f04f 33ff 	mov.w	r3, #4294967295
 800718e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007190:	687b      	ldr	r3, [r7, #4]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20002a90 	.word	0x20002a90

080071a0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	603b      	str	r3, [r7, #0]
  return(result);
 80071ac:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80071b2:	f002 f839 	bl	8009228 <xTaskGetTickCountFromISR>
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	e002      	b.n	80071c0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80071ba:	f002 f825 	bl	8009208 <xTaskGetTickCount>
 80071be:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80071c0:	687b      	ldr	r3, [r7, #4]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b08e      	sub	sp, #56	@ 0x38
 80071ce:	af04      	add	r7, sp, #16
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071da:	f3ef 8305 	mrs	r3, IPSR
 80071de:	617b      	str	r3, [r7, #20]
  return(result);
 80071e0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d17e      	bne.n	80072e4 <osThreadNew+0x11a>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d07b      	beq.n	80072e4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80071ec:	2380      	movs	r3, #128	@ 0x80
 80071ee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80071f0:	2318      	movs	r3, #24
 80071f2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80071f8:	f04f 33ff 	mov.w	r3, #4294967295
 80071fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d045      	beq.n	8007290 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <osThreadNew+0x48>
        name = attr->name;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d008      	beq.n	8007238 <osThreadNew+0x6e>
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	2b38      	cmp	r3, #56	@ 0x38
 800722a:	d805      	bhi.n	8007238 <osThreadNew+0x6e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <osThreadNew+0x72>
        return (NULL);
 8007238:	2300      	movs	r3, #0
 800723a:	e054      	b.n	80072e6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	089b      	lsrs	r3, r3, #2
 800724a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00e      	beq.n	8007272 <osThreadNew+0xa8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	2ba7      	cmp	r3, #167	@ 0xa7
 800725a:	d90a      	bls.n	8007272 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007260:	2b00      	cmp	r3, #0
 8007262:	d006      	beq.n	8007272 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <osThreadNew+0xa8>
        mem = 1;
 800726c:	2301      	movs	r3, #1
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	e010      	b.n	8007294 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10c      	bne.n	8007294 <osThreadNew+0xca>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d108      	bne.n	8007294 <osThreadNew+0xca>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d104      	bne.n	8007294 <osThreadNew+0xca>
          mem = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e001      	b.n	8007294 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d110      	bne.n	80072bc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072a2:	9202      	str	r2, [sp, #8]
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6a3a      	ldr	r2, [r7, #32]
 80072ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f001 fc99 	bl	8008be8 <xTaskCreateStatic>
 80072b6:	4603      	mov	r3, r0
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	e013      	b.n	80072e4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d110      	bne.n	80072e4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	f107 0310 	add.w	r3, r7, #16
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f001 fce7 	bl	8008ca8 <xTaskCreate>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d001      	beq.n	80072e4 <osThreadNew+0x11a>
            hTask = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80072e4:	693b      	ldr	r3, [r7, #16]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3728      	adds	r7, #40	@ 0x28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072f6:	f3ef 8305 	mrs	r3, IPSR
 80072fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80072fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <osDelay+0x1c>
    stat = osErrorISR;
 8007302:	f06f 0305 	mvn.w	r3, #5
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e007      	b.n	800731a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <osDelay+0x2c>
      vTaskDelay(ticks);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 fe25 	bl	8008f64 <vTaskDelay>
    }
  }

  return (stat);
 800731a:	68fb      	ldr	r3, [r7, #12]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007330:	f3ef 8305 	mrs	r3, IPSR
 8007334:	60bb      	str	r3, [r7, #8]
  return(result);
 8007336:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007338:	2b00      	cmp	r3, #0
 800733a:	d174      	bne.n	8007426 <osMutexNew+0x102>
    if (attr != NULL) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <osMutexNew+0x26>
      type = attr->attr_bits;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	61bb      	str	r3, [r7, #24]
 8007348:	e001      	b.n	800734e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <osMutexNew+0x3a>
      rmtx = 1U;
 8007358:	2301      	movs	r3, #1
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e001      	b.n	8007362 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d15c      	bne.n	8007426 <osMutexNew+0x102>
      mem = -1;
 800736c:	f04f 33ff 	mov.w	r3, #4294967295
 8007370:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d015      	beq.n	80073a4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d006      	beq.n	800738e <osMutexNew+0x6a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	2b4f      	cmp	r3, #79	@ 0x4f
 8007386:	d902      	bls.n	800738e <osMutexNew+0x6a>
          mem = 1;
 8007388:	2301      	movs	r3, #1
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	e00c      	b.n	80073a8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <osMutexNew+0x84>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <osMutexNew+0x84>
            mem = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	e001      	b.n	80073a8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d112      	bne.n	80073d4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	4619      	mov	r1, r3
 80073ba:	2004      	movs	r0, #4
 80073bc:	f000 fcf9 	bl	8007db2 <xQueueCreateMutexStatic>
 80073c0:	61f8      	str	r0, [r7, #28]
 80073c2:	e016      	b.n	80073f2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	4619      	mov	r1, r3
 80073ca:	2001      	movs	r0, #1
 80073cc:	f000 fcf1 	bl	8007db2 <xQueueCreateMutexStatic>
 80073d0:	61f8      	str	r0, [r7, #28]
 80073d2:	e00e      	b.n	80073f2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80073e0:	2004      	movs	r0, #4
 80073e2:	f000 fcce 	bl	8007d82 <xQueueCreateMutex>
 80073e6:	61f8      	str	r0, [r7, #28]
 80073e8:	e003      	b.n	80073f2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80073ea:	2001      	movs	r0, #1
 80073ec:	f000 fcc9 	bl	8007d82 <xQueueCreateMutex>
 80073f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00c      	beq.n	8007412 <osMutexNew+0xee>
        if (attr != NULL) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <osMutexNew+0xe2>
          name = attr->name;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	e001      	b.n	800740a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800740a:	68f9      	ldr	r1, [r7, #12]
 800740c:	69f8      	ldr	r0, [r7, #28]
 800740e:	f001 fb63 	bl	8008ad8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <osMutexNew+0x102>
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007426:	69fb      	ldr	r3, [r7, #28]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3720      	adds	r7, #32
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800744e:	f3ef 8305 	mrs	r3, IPSR
 8007452:	60bb      	str	r3, [r7, #8]
  return(result);
 8007454:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800745a:	f06f 0305 	mvn.w	r3, #5
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	e02c      	b.n	80074bc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d103      	bne.n	8007470 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007468:	f06f 0303 	mvn.w	r3, #3
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	e025      	b.n	80074bc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d011      	beq.n	800749a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6938      	ldr	r0, [r7, #16]
 800747a:	f000 fcea 	bl	8007e52 <xQueueTakeMutexRecursive>
 800747e:	4603      	mov	r3, r0
 8007480:	2b01      	cmp	r3, #1
 8007482:	d01b      	beq.n	80074bc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800748a:	f06f 0301 	mvn.w	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e014      	b.n	80074bc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007492:	f06f 0302 	mvn.w	r3, #2
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	e010      	b.n	80074bc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6938      	ldr	r0, [r7, #16]
 800749e:	f000 ffff 	bl	80084a0 <xQueueSemaphoreTake>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d009      	beq.n	80074bc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80074ae:	f06f 0301 	mvn.w	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e002      	b.n	80074bc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80074b6:	f06f 0302 	mvn.w	r3, #2
 80074ba:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80074bc:	697b      	ldr	r3, [r7, #20]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b086      	sub	sp, #24
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f023 0301 	bic.w	r3, r3, #1
 80074d4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e2:	f3ef 8305 	mrs	r3, IPSR
 80074e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80074e8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80074ee:	f06f 0305 	mvn.w	r3, #5
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e01f      	b.n	8007536 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d103      	bne.n	8007504 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80074fc:	f06f 0303 	mvn.w	r3, #3
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	e018      	b.n	8007536 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800750a:	6938      	ldr	r0, [r7, #16]
 800750c:	f000 fc6c 	bl	8007de8 <xQueueGiveMutexRecursive>
 8007510:	4603      	mov	r3, r0
 8007512:	2b01      	cmp	r3, #1
 8007514:	d00f      	beq.n	8007536 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007516:	f06f 0302 	mvn.w	r3, #2
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	e00b      	b.n	8007536 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800751e:	2300      	movs	r3, #0
 8007520:	2200      	movs	r2, #0
 8007522:	2100      	movs	r1, #0
 8007524:	6938      	ldr	r0, [r7, #16]
 8007526:	f000 fd39 	bl	8007f9c <xQueueGenericSend>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d002      	beq.n	8007536 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007530:	f06f 0302 	mvn.w	r3, #2
 8007534:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007536:	697b      	ldr	r3, [r7, #20]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	@ 0x28
 8007544:	af02      	add	r7, sp, #8
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007550:	f3ef 8305 	mrs	r3, IPSR
 8007554:	613b      	str	r3, [r7, #16]
  return(result);
 8007556:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007558:	2b00      	cmp	r3, #0
 800755a:	d175      	bne.n	8007648 <osSemaphoreNew+0x108>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d072      	beq.n	8007648 <osSemaphoreNew+0x108>
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	429a      	cmp	r2, r3
 8007568:	d86e      	bhi.n	8007648 <osSemaphoreNew+0x108>
    mem = -1;
 800756a:	f04f 33ff 	mov.w	r3, #4294967295
 800756e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d015      	beq.n	80075a2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d006      	beq.n	800758c <osSemaphoreNew+0x4c>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	2b4f      	cmp	r3, #79	@ 0x4f
 8007584:	d902      	bls.n	800758c <osSemaphoreNew+0x4c>
        mem = 1;
 8007586:	2301      	movs	r3, #1
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	e00c      	b.n	80075a6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d108      	bne.n	80075a6 <osSemaphoreNew+0x66>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <osSemaphoreNew+0x66>
          mem = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	e001      	b.n	80075a6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d04c      	beq.n	8007648 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d128      	bne.n	8007606 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d10a      	bne.n	80075d0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	2203      	movs	r2, #3
 80075c0:	9200      	str	r2, [sp, #0]
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	2001      	movs	r0, #1
 80075c8:	f000 fae6 	bl	8007b98 <xQueueGenericCreateStatic>
 80075cc:	61f8      	str	r0, [r7, #28]
 80075ce:	e005      	b.n	80075dc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80075d0:	2203      	movs	r2, #3
 80075d2:	2100      	movs	r1, #0
 80075d4:	2001      	movs	r0, #1
 80075d6:	f000 fb5c 	bl	8007c92 <xQueueGenericCreate>
 80075da:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d022      	beq.n	8007628 <osSemaphoreNew+0xe8>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01f      	beq.n	8007628 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80075e8:	2300      	movs	r3, #0
 80075ea:	2200      	movs	r2, #0
 80075ec:	2100      	movs	r1, #0
 80075ee:	69f8      	ldr	r0, [r7, #28]
 80075f0:	f000 fcd4 	bl	8007f9c <xQueueGenericSend>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d016      	beq.n	8007628 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80075fa:	69f8      	ldr	r0, [r7, #28]
 80075fc:	f001 f920 	bl	8008840 <vQueueDelete>
            hSemaphore = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e010      	b.n	8007628 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d108      	bne.n	800761e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	461a      	mov	r2, r3
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fc53 	bl	8007ec0 <xQueueCreateCountingSemaphoreStatic>
 800761a:	61f8      	str	r0, [r7, #28]
 800761c:	e004      	b.n	8007628 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fc86 	bl	8007f32 <xQueueCreateCountingSemaphore>
 8007626:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00c      	beq.n	8007648 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <osSemaphoreNew+0xfc>
          name = attr->name;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	e001      	b.n	8007640 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007640:	6979      	ldr	r1, [r7, #20]
 8007642:	69f8      	ldr	r0, [r7, #28]
 8007644:	f001 fa48 	bl	8008ad8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007648:	69fb      	ldr	r3, [r7, #28]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007652:	b580      	push	{r7, lr}
 8007654:	b08a      	sub	sp, #40	@ 0x28
 8007656:	af02      	add	r7, sp, #8
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007662:	f3ef 8305 	mrs	r3, IPSR
 8007666:	613b      	str	r3, [r7, #16]
  return(result);
 8007668:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800766a:	2b00      	cmp	r3, #0
 800766c:	d15f      	bne.n	800772e <osMessageQueueNew+0xdc>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d05c      	beq.n	800772e <osMessageQueueNew+0xdc>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d059      	beq.n	800772e <osMessageQueueNew+0xdc>
    mem = -1;
 800767a:	f04f 33ff 	mov.w	r3, #4294967295
 800767e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d029      	beq.n	80076da <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d012      	beq.n	80076b4 <osMessageQueueNew+0x62>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b4f      	cmp	r3, #79	@ 0x4f
 8007694:	d90e      	bls.n	80076b4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695a      	ldr	r2, [r3, #20]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <osMessageQueueNew+0x62>
        mem = 1;
 80076ae:	2301      	movs	r3, #1
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	e014      	b.n	80076de <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d110      	bne.n	80076de <osMessageQueueNew+0x8c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10c      	bne.n	80076de <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d108      	bne.n	80076de <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <osMessageQueueNew+0x8c>
          mem = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61bb      	str	r3, [r7, #24]
 80076d8:	e001      	b.n	80076de <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d10b      	bne.n	80076fc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2100      	movs	r1, #0
 80076ee:	9100      	str	r1, [sp, #0]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fa50 	bl	8007b98 <xQueueGenericCreateStatic>
 80076f8:	61f8      	str	r0, [r7, #28]
 80076fa:	e008      	b.n	800770e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d105      	bne.n	800770e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007702:	2200      	movs	r2, #0
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fac3 	bl	8007c92 <xQueueGenericCreate>
 800770c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00c      	beq.n	800772e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <osMessageQueueNew+0xd0>
        name = attr->name;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e001      	b.n	8007726 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007726:	6979      	ldr	r1, [r7, #20]
 8007728:	69f8      	ldr	r0, [r7, #28]
 800772a:	f001 f9d5 	bl	8008ad8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800772e:	69fb      	ldr	r3, [r7, #28]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3720      	adds	r7, #32
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007750:	f3ef 8305 	mrs	r3, IPSR
 8007754:	617b      	str	r3, [r7, #20]
  return(result);
 8007756:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007758:	2b00      	cmp	r3, #0
 800775a:	d028      	beq.n	80077ae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <osMessageQueuePut+0x36>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <osMessageQueuePut+0x36>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800776e:	f06f 0303 	mvn.w	r3, #3
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	e038      	b.n	80077e8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800777a:	f107 0210 	add.w	r2, r7, #16
 800777e:	2300      	movs	r3, #0
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	69b8      	ldr	r0, [r7, #24]
 8007784:	f000 fd0c 	bl	80081a0 <xQueueGenericSendFromISR>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	d003      	beq.n	8007796 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800778e:	f06f 0302 	mvn.w	r3, #2
 8007792:	61fb      	str	r3, [r7, #28]
 8007794:	e028      	b.n	80077e8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d025      	beq.n	80077e8 <osMessageQueuePut+0xb0>
 800779c:	4b15      	ldr	r3, [pc, #84]	@ (80077f4 <osMessageQueuePut+0xbc>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	e01c      	b.n	80077e8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <osMessageQueuePut+0x82>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80077ba:	f06f 0303 	mvn.w	r3, #3
 80077be:	61fb      	str	r3, [r7, #28]
 80077c0:	e012      	b.n	80077e8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077c2:	2300      	movs	r3, #0
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	69b8      	ldr	r0, [r7, #24]
 80077ca:	f000 fbe7 	bl	8007f9c <xQueueGenericSend>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d009      	beq.n	80077e8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80077da:	f06f 0301 	mvn.w	r3, #1
 80077de:	61fb      	str	r3, [r7, #28]
 80077e0:	e002      	b.n	80077e8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80077e2:	f06f 0302 	mvn.w	r3, #2
 80077e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80077e8:	69fb      	ldr	r3, [r7, #28]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	e000ed04 	.word	0xe000ed04

080077f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800780e:	f3ef 8305 	mrs	r3, IPSR
 8007812:	617b      	str	r3, [r7, #20]
  return(result);
 8007814:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007816:	2b00      	cmp	r3, #0
 8007818:	d028      	beq.n	800786c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <osMessageQueueGet+0x34>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <osMessageQueueGet+0x34>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800782c:	f06f 0303 	mvn.w	r3, #3
 8007830:	61fb      	str	r3, [r7, #28]
 8007832:	e037      	b.n	80078a4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007834:	2300      	movs	r3, #0
 8007836:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007838:	f107 0310 	add.w	r3, r7, #16
 800783c:	461a      	mov	r2, r3
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	69b8      	ldr	r0, [r7, #24]
 8007842:	f000 ff3d 	bl	80086c0 <xQueueReceiveFromISR>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d003      	beq.n	8007854 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800784c:	f06f 0302 	mvn.w	r3, #2
 8007850:	61fb      	str	r3, [r7, #28]
 8007852:	e027      	b.n	80078a4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d024      	beq.n	80078a4 <osMessageQueueGet+0xac>
 800785a:	4b15      	ldr	r3, [pc, #84]	@ (80078b0 <osMessageQueueGet+0xb8>)
 800785c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	e01b      	b.n	80078a4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <osMessageQueueGet+0x80>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d103      	bne.n	8007880 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007878:	f06f 0303 	mvn.w	r3, #3
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	e011      	b.n	80078a4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	69b8      	ldr	r0, [r7, #24]
 8007886:	f000 fd29 	bl	80082dc <xQueueReceive>
 800788a:	4603      	mov	r3, r0
 800788c:	2b01      	cmp	r3, #1
 800788e:	d009      	beq.n	80078a4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007896:	f06f 0301 	mvn.w	r3, #1
 800789a:	61fb      	str	r3, [r7, #28]
 800789c:	e002      	b.n	80078a4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800789e:	f06f 0302 	mvn.w	r3, #2
 80078a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80078a4:	69fb      	ldr	r3, [r7, #28]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3720      	adds	r7, #32
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d102      	bne.n	80078cc <osMessageQueueGetCount+0x18>
    count = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	e00e      	b.n	80078ea <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078cc:	f3ef 8305 	mrs	r3, IPSR
 80078d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80078d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80078d8:	6938      	ldr	r0, [r7, #16]
 80078da:	f000 ff92 	bl	8008802 <uxQueueMessagesWaitingFromISR>
 80078de:	6178      	str	r0, [r7, #20]
 80078e0:	e003      	b.n	80078ea <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80078e2:	6938      	ldr	r0, [r7, #16]
 80078e4:	f000 ff6e 	bl	80087c4 <uxQueueMessagesWaiting>
 80078e8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80078ea:	697b      	ldr	r3, [r7, #20]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a07      	ldr	r2, [pc, #28]	@ (8007920 <vApplicationGetIdleTaskMemory+0x2c>)
 8007904:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4a06      	ldr	r2, [pc, #24]	@ (8007924 <vApplicationGetIdleTaskMemory+0x30>)
 800790a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2280      	movs	r2, #128	@ 0x80
 8007910:	601a      	str	r2, [r3, #0]
}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20002a94 	.word	0x20002a94
 8007924:	20002b3c 	.word	0x20002b3c

08007928 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4a07      	ldr	r2, [pc, #28]	@ (8007954 <vApplicationGetTimerTaskMemory+0x2c>)
 8007938:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	4a06      	ldr	r2, [pc, #24]	@ (8007958 <vApplicationGetTimerTaskMemory+0x30>)
 800793e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007946:	601a      	str	r2, [r3, #0]
}
 8007948:	bf00      	nop
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	20002d3c 	.word	0x20002d3c
 8007958:	20002de4 	.word	0x20002de4

0800795c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f103 0208 	add.w	r2, r3, #8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f103 0208 	add.w	r2, r3, #8
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f103 0208 	add.w	r2, r3, #8
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d103      	bne.n	8007a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e00c      	b.n	8007a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3308      	adds	r3, #8
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e002      	b.n	8007a2c <vListInsert+0x2e>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d2f6      	bcs.n	8007a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6892      	ldr	r2, [r2, #8]
 8007a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6852      	ldr	r2, [r2, #4]
 8007a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d103      	bne.n	8007aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	1e5a      	subs	r2, r3, #1
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10b      	bne.n	8007af0 <xQueueGenericReset+0x2c>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	60bb      	str	r3, [r7, #8]
}
 8007aea:	bf00      	nop
 8007aec:	bf00      	nop
 8007aee:	e7fd      	b.n	8007aec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007af0:	f002 fd62 	bl	800a5b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afc:	68f9      	ldr	r1, [r7, #12]
 8007afe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	441a      	add	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b20:	3b01      	subs	r3, #1
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b26:	fb01 f303 	mul.w	r3, r1, r3
 8007b2a:	441a      	add	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	22ff      	movs	r2, #255	@ 0xff
 8007b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	22ff      	movs	r2, #255	@ 0xff
 8007b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d114      	bne.n	8007b70 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01a      	beq.n	8007b84 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3310      	adds	r3, #16
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 fcec 	bl	8009530 <xTaskRemoveFromEventList>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d012      	beq.n	8007b84 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <xQueueGenericReset+0xd0>)
 8007b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	e009      	b.n	8007b84 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3310      	adds	r3, #16
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fef1 	bl	800795c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3324      	adds	r3, #36	@ 0x24
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff feec 	bl	800795c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b84:	f002 fd4a 	bl	800a61c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b88:	2301      	movs	r3, #1
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	e000ed04 	.word	0xe000ed04

08007b98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08e      	sub	sp, #56	@ 0x38
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10b      	bne.n	8007bc4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bbe:	bf00      	nop
 8007bc0:	bf00      	nop
 8007bc2:	e7fd      	b.n	8007bc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <xQueueGenericCreateStatic+0x56>
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <xQueueGenericCreateStatic+0x5a>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e000      	b.n	8007bf4 <xQueueGenericCreateStatic+0x5c>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10b      	bne.n	8007c10 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	623b      	str	r3, [r7, #32]
}
 8007c0a:	bf00      	nop
 8007c0c:	bf00      	nop
 8007c0e:	e7fd      	b.n	8007c0c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d102      	bne.n	8007c1c <xQueueGenericCreateStatic+0x84>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <xQueueGenericCreateStatic+0x88>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e000      	b.n	8007c22 <xQueueGenericCreateStatic+0x8a>
 8007c20:	2300      	movs	r3, #0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10b      	bne.n	8007c3e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	61fb      	str	r3, [r7, #28]
}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	e7fd      	b.n	8007c3a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c3e:	2350      	movs	r3, #80	@ 0x50
 8007c40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b50      	cmp	r3, #80	@ 0x50
 8007c46:	d00b      	beq.n	8007c60 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	61bb      	str	r3, [r7, #24]
}
 8007c5a:	bf00      	nop
 8007c5c:	bf00      	nop
 8007c5e:	e7fd      	b.n	8007c5c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c60:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00d      	beq.n	8007c88 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c74:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f840 	bl	8007d08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3730      	adds	r7, #48	@ 0x30
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b08a      	sub	sp, #40	@ 0x28
 8007c96:	af02      	add	r7, sp, #8
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <xQueueGenericCreate+0x2c>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	613b      	str	r3, [r7, #16]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	fb02 f303 	mul.w	r3, r2, r3
 8007cc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	3350      	adds	r3, #80	@ 0x50
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f002 fd95 	bl	800a7fc <pvPortMalloc>
 8007cd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d011      	beq.n	8007cfe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	3350      	adds	r3, #80	@ 0x50
 8007ce2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cec:	79fa      	ldrb	r2, [r7, #7]
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f805 	bl	8007d08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
	}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d103      	bne.n	8007d24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	e002      	b.n	8007d2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d36:	2101      	movs	r1, #1
 8007d38:	69b8      	ldr	r0, [r7, #24]
 8007d3a:	f7ff fec3 	bl	8007ac4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00e      	beq.n	8007d7a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f911 	bl	8007f9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b086      	sub	sp, #24
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	4603      	mov	r3, r0
 8007d8a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6939      	ldr	r1, [r7, #16]
 8007d9a:	6978      	ldr	r0, [r7, #20]
 8007d9c:	f7ff ff79 	bl	8007c92 <xQueueGenericCreate>
 8007da0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff ffd3 	bl	8007d4e <prvInitialiseMutex>

		return xNewQueue;
 8007da8:	68fb      	ldr	r3, [r7, #12]
	}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b088      	sub	sp, #32
 8007db6:	af02      	add	r7, sp, #8
 8007db8:	4603      	mov	r3, r0
 8007dba:	6039      	str	r1, [r7, #0]
 8007dbc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	6939      	ldr	r1, [r7, #16]
 8007dd0:	6978      	ldr	r0, [r7, #20]
 8007dd2:	f7ff fee1 	bl	8007b98 <xQueueGenericCreateStatic>
 8007dd6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f7ff ffb8 	bl	8007d4e <prvInitialiseMutex>

		return xNewQueue;
 8007dde:	68fb      	ldr	r3, [r7, #12]
	}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	60fb      	str	r3, [r7, #12]
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	e7fd      	b.n	8007e0e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	689c      	ldr	r4, [r3, #8]
 8007e16:	f001 fd51 	bl	80098bc <xTaskGetCurrentTaskHandle>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	d111      	bne.n	8007e44 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	1e5a      	subs	r2, r3, #1
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007e32:	2300      	movs	r3, #0
 8007e34:	2200      	movs	r2, #0
 8007e36:	2100      	movs	r1, #0
 8007e38:	6938      	ldr	r0, [r7, #16]
 8007e3a:	f000 f8af 	bl	8007f9c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	e001      	b.n	8007e48 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007e48:	697b      	ldr	r3, [r7, #20]
	}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd90      	pop	{r4, r7, pc}

08007e52 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007e52:	b590      	push	{r4, r7, lr}
 8007e54:	b087      	sub	sp, #28
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10b      	bne.n	8007e7e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60fb      	str	r3, [r7, #12]
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	e7fd      	b.n	8007e7a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	689c      	ldr	r4, [r3, #8]
 8007e82:	f001 fd1b 	bl	80098bc <xTaskGetCurrentTaskHandle>
 8007e86:	4603      	mov	r3, r0
 8007e88:	429c      	cmp	r4, r3
 8007e8a:	d107      	bne.n	8007e9c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007e96:	2301      	movs	r3, #1
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e00c      	b.n	8007eb6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6938      	ldr	r0, [r7, #16]
 8007ea0:	f000 fafe 	bl	80084a0 <xQueueSemaphoreTake>
 8007ea4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007eb6:	697b      	ldr	r3, [r7, #20]
	}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd90      	pop	{r4, r7, pc}

08007ec0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	@ 0x28
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10b      	bne.n	8007eea <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	61bb      	str	r3, [r7, #24]
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop
 8007ee8:	e7fd      	b.n	8007ee6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d90b      	bls.n	8007f0a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	617b      	str	r3, [r7, #20]
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	e7fd      	b.n	8007f06 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2100      	movs	r1, #0
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fe3f 	bl	8007b98 <xQueueGenericCreateStatic>
 8007f1a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f28:	69fb      	ldr	r3, [r7, #28]
	}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b086      	sub	sp, #24
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	613b      	str	r3, [r7, #16]
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	e7fd      	b.n	8007f56 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d90b      	bls.n	8007f7a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	60fb      	str	r3, [r7, #12]
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop
 8007f78:	e7fd      	b.n	8007f76 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff fe87 	bl	8007c92 <xQueueGenericCreate>
 8007f84:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f92:	697b      	ldr	r3, [r7, #20]
	}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08e      	sub	sp, #56	@ 0x38
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007faa:	2300      	movs	r3, #0
 8007fac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10b      	bne.n	8007fd0 <xQueueGenericSend+0x34>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	e7fd      	b.n	8007fcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d103      	bne.n	8007fde <xQueueGenericSend+0x42>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <xQueueGenericSend+0x46>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <xQueueGenericSend+0x48>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10b      	bne.n	8008000 <xQueueGenericSend+0x64>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d103      	bne.n	800800e <xQueueGenericSend+0x72>
 8008006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <xQueueGenericSend+0x76>
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <xQueueGenericSend+0x78>
 8008012:	2300      	movs	r3, #0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <xQueueGenericSend+0x94>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	623b      	str	r3, [r7, #32]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008030:	f001 fc54 	bl	80098dc <xTaskGetSchedulerState>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <xQueueGenericSend+0xa4>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <xQueueGenericSend+0xa8>
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <xQueueGenericSend+0xaa>
 8008044:	2300      	movs	r3, #0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10b      	bne.n	8008062 <xQueueGenericSend+0xc6>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	61fb      	str	r3, [r7, #28]
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008062:	f002 faa9 	bl	800a5b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806e:	429a      	cmp	r2, r3
 8008070:	d302      	bcc.n	8008078 <xQueueGenericSend+0xdc>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d129      	bne.n	80080cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800807e:	f000 fc1b 	bl	80088b8 <prvCopyDataToQueue>
 8008082:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d010      	beq.n	80080ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808e:	3324      	adds	r3, #36	@ 0x24
 8008090:	4618      	mov	r0, r3
 8008092:	f001 fa4d 	bl	8009530 <xTaskRemoveFromEventList>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d013      	beq.n	80080c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800809c:	4b3f      	ldr	r3, [pc, #252]	@ (800819c <xQueueGenericSend+0x200>)
 800809e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	e00a      	b.n	80080c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080b4:	4b39      	ldr	r3, [pc, #228]	@ (800819c <xQueueGenericSend+0x200>)
 80080b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080c4:	f002 faaa 	bl	800a61c <vPortExitCritical>
				return pdPASS;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e063      	b.n	8008194 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080d2:	f002 faa3 	bl	800a61c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	e05c      	b.n	8008194 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080e0:	f107 0314 	add.w	r3, r7, #20
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 fa87 	bl	80095f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ea:	2301      	movs	r3, #1
 80080ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080ee:	f002 fa95 	bl	800a61c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080f2:	f000 ffdd 	bl	80090b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080f6:	f002 fa5f 	bl	800a5b8 <vPortEnterCritical>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008100:	b25b      	sxtb	r3, r3
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008106:	d103      	bne.n	8008110 <xQueueGenericSend+0x174>
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008116:	b25b      	sxtb	r3, r3
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d103      	bne.n	8008126 <xQueueGenericSend+0x18a>
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008126:	f002 fa79 	bl	800a61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800812a:	1d3a      	adds	r2, r7, #4
 800812c:	f107 0314 	add.w	r3, r7, #20
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f001 fa76 	bl	8009624 <xTaskCheckForTimeOut>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d124      	bne.n	8008188 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800813e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008140:	f000 fcb2 	bl	8008aa8 <prvIsQueueFull>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d018      	beq.n	800817c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	3310      	adds	r3, #16
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f001 f99a 	bl	800948c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800815a:	f000 fc3d 	bl	80089d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800815e:	f000 ffb5 	bl	80090cc <xTaskResumeAll>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	f47f af7c 	bne.w	8008062 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800816a:	4b0c      	ldr	r3, [pc, #48]	@ (800819c <xQueueGenericSend+0x200>)
 800816c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	e772      	b.n	8008062 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800817c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800817e:	f000 fc2b 	bl	80089d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008182:	f000 ffa3 	bl	80090cc <xTaskResumeAll>
 8008186:	e76c      	b.n	8008062 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800818a:	f000 fc25 	bl	80089d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800818e:	f000 ff9d 	bl	80090cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008192:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008194:	4618      	mov	r0, r3
 8008196:	3738      	adds	r7, #56	@ 0x38
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b090      	sub	sp, #64	@ 0x40
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80081b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d103      	bne.n	80081de <xQueueGenericSendFromISR+0x3e>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <xQueueGenericSendFromISR+0x42>
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <xQueueGenericSendFromISR+0x44>
 80081e2:	2300      	movs	r3, #0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	e7fd      	b.n	80081fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b02      	cmp	r3, #2
 8008204:	d103      	bne.n	800820e <xQueueGenericSendFromISR+0x6e>
 8008206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800820a:	2b01      	cmp	r3, #1
 800820c:	d101      	bne.n	8008212 <xQueueGenericSendFromISR+0x72>
 800820e:	2301      	movs	r3, #1
 8008210:	e000      	b.n	8008214 <xQueueGenericSendFromISR+0x74>
 8008212:	2300      	movs	r3, #0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10b      	bne.n	8008230 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	623b      	str	r3, [r7, #32]
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008230:	f002 faa2 	bl	800a778 <vPortValidateInterruptPriority>
	__asm volatile
 8008234:	f3ef 8211 	mrs	r2, BASEPRI
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	61fa      	str	r2, [r7, #28]
 800824a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800824c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800824e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008258:	429a      	cmp	r2, r3
 800825a:	d302      	bcc.n	8008262 <xQueueGenericSendFromISR+0xc2>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b02      	cmp	r3, #2
 8008260:	d12f      	bne.n	80082c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008268:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008270:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008278:	f000 fb1e 	bl	80088b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800827c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008284:	d112      	bne.n	80082ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	2b00      	cmp	r3, #0
 800828c:	d016      	beq.n	80082bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	3324      	adds	r3, #36	@ 0x24
 8008292:	4618      	mov	r0, r3
 8008294:	f001 f94c 	bl	8009530 <xTaskRemoveFromEventList>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00e      	beq.n	80082bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e007      	b.n	80082bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80082b0:	3301      	adds	r3, #1
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	b25a      	sxtb	r2, r3
 80082b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80082bc:	2301      	movs	r3, #1
 80082be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80082c0:	e001      	b.n	80082c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c8:	617b      	str	r3, [r7, #20]
	__asm volatile
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f383 8811 	msr	BASEPRI, r3
}
 80082d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3740      	adds	r7, #64	@ 0x40
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08c      	sub	sp, #48	@ 0x30
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <xQueueReceive+0x32>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	623b      	str	r3, [r7, #32]
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d103      	bne.n	800831c <xQueueReceive+0x40>
 8008314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <xQueueReceive+0x44>
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <xQueueReceive+0x46>
 8008320:	2300      	movs	r3, #0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <xQueueReceive+0x62>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	61fb      	str	r3, [r7, #28]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800833e:	f001 facd 	bl	80098dc <xTaskGetSchedulerState>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <xQueueReceive+0x72>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <xQueueReceive+0x76>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <xQueueReceive+0x78>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10b      	bne.n	8008370 <xQueueReceive+0x94>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	61bb      	str	r3, [r7, #24]
}
 800836a:	bf00      	nop
 800836c:	bf00      	nop
 800836e:	e7fd      	b.n	800836c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008370:	f002 f922 	bl	800a5b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008378:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01f      	beq.n	80083c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008384:	f000 fb02 	bl	800898c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	1e5a      	subs	r2, r3, #1
 800838c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00f      	beq.n	80083b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	3310      	adds	r3, #16
 800839c:	4618      	mov	r0, r3
 800839e:	f001 f8c7 	bl	8009530 <xTaskRemoveFromEventList>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d007      	beq.n	80083b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083a8:	4b3c      	ldr	r3, [pc, #240]	@ (800849c <xQueueReceive+0x1c0>)
 80083aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083b8:	f002 f930 	bl	800a61c <vPortExitCritical>
				return pdPASS;
 80083bc:	2301      	movs	r3, #1
 80083be:	e069      	b.n	8008494 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d103      	bne.n	80083ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083c6:	f002 f929 	bl	800a61c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083ca:	2300      	movs	r3, #0
 80083cc:	e062      	b.n	8008494 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 f90d 	bl	80095f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083de:	2301      	movs	r3, #1
 80083e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083e2:	f002 f91b 	bl	800a61c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083e6:	f000 fe63 	bl	80090b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083ea:	f002 f8e5 	bl	800a5b8 <vPortEnterCritical>
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083f4:	b25b      	sxtb	r3, r3
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d103      	bne.n	8008404 <xQueueReceive+0x128>
 80083fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800840a:	b25b      	sxtb	r3, r3
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d103      	bne.n	800841a <xQueueReceive+0x13e>
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800841a:	f002 f8ff 	bl	800a61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800841e:	1d3a      	adds	r2, r7, #4
 8008420:	f107 0310 	add.w	r3, r7, #16
 8008424:	4611      	mov	r1, r2
 8008426:	4618      	mov	r0, r3
 8008428:	f001 f8fc 	bl	8009624 <xTaskCheckForTimeOut>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d123      	bne.n	800847a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008434:	f000 fb22 	bl	8008a7c <prvIsQueueEmpty>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d017      	beq.n	800846e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	3324      	adds	r3, #36	@ 0x24
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f001 f820 	bl	800948c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800844c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800844e:	f000 fac3 	bl	80089d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008452:	f000 fe3b 	bl	80090cc <xTaskResumeAll>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d189      	bne.n	8008370 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800845c:	4b0f      	ldr	r3, [pc, #60]	@ (800849c <xQueueReceive+0x1c0>)
 800845e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	e780      	b.n	8008370 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800846e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008470:	f000 fab2 	bl	80089d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008474:	f000 fe2a 	bl	80090cc <xTaskResumeAll>
 8008478:	e77a      	b.n	8008370 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800847a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800847c:	f000 faac 	bl	80089d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008480:	f000 fe24 	bl	80090cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008486:	f000 faf9 	bl	8008a7c <prvIsQueueEmpty>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	f43f af6f 	beq.w	8008370 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008492:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008494:	4618      	mov	r0, r3
 8008496:	3730      	adds	r7, #48	@ 0x30
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08e      	sub	sp, #56	@ 0x38
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	623b      	str	r3, [r7, #32]
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61fb      	str	r3, [r7, #28]
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f4:	f001 f9f2 	bl	80098dc <xTaskGetSchedulerState>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <xQueueSemaphoreTake+0x64>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <xQueueSemaphoreTake+0x68>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <xQueueSemaphoreTake+0x6a>
 8008508:	2300      	movs	r3, #0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	61bb      	str	r3, [r7, #24]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008526:	f002 f847 	bl	800a5b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800852a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d024      	beq.n	8008580 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008538:	1e5a      	subs	r2, r3, #1
 800853a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800853e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d104      	bne.n	8008550 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008546:	f001 fb43 	bl	8009bd0 <pvTaskIncrementMutexHeldCount>
 800854a:	4602      	mov	r2, r0
 800854c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00f      	beq.n	8008578 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	3310      	adds	r3, #16
 800855c:	4618      	mov	r0, r3
 800855e:	f000 ffe7 	bl	8009530 <xTaskRemoveFromEventList>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008568:	4b54      	ldr	r3, [pc, #336]	@ (80086bc <xQueueSemaphoreTake+0x21c>)
 800856a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008578:	f002 f850 	bl	800a61c <vPortExitCritical>
				return pdPASS;
 800857c:	2301      	movs	r3, #1
 800857e:	e098      	b.n	80086b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d112      	bne.n	80085ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	617b      	str	r3, [r7, #20]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80085a4:	f002 f83a 	bl	800a61c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e082      	b.n	80086b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085b2:	f107 030c 	add.w	r3, r7, #12
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 f81e 	bl	80095f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085c0:	f002 f82c 	bl	800a61c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085c4:	f000 fd74 	bl	80090b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085c8:	f001 fff6 	bl	800a5b8 <vPortEnterCritical>
 80085cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d103      	bne.n	80085e2 <xQueueSemaphoreTake+0x142>
 80085da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085e8:	b25b      	sxtb	r3, r3
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d103      	bne.n	80085f8 <xQueueSemaphoreTake+0x158>
 80085f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085f8:	f002 f810 	bl	800a61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085fc:	463a      	mov	r2, r7
 80085fe:	f107 030c 	add.w	r3, r7, #12
 8008602:	4611      	mov	r1, r2
 8008604:	4618      	mov	r0, r3
 8008606:	f001 f80d 	bl	8009624 <xTaskCheckForTimeOut>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d132      	bne.n	8008676 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008610:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008612:	f000 fa33 	bl	8008a7c <prvIsQueueEmpty>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d026      	beq.n	800866a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d109      	bne.n	8008638 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008624:	f001 ffc8 	bl	800a5b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	4618      	mov	r0, r3
 800862e:	f001 f973 	bl	8009918 <xTaskPriorityInherit>
 8008632:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008634:	f001 fff2 	bl	800a61c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	3324      	adds	r3, #36	@ 0x24
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	4611      	mov	r1, r2
 8008640:	4618      	mov	r0, r3
 8008642:	f000 ff23 	bl	800948c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008648:	f000 f9c6 	bl	80089d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800864c:	f000 fd3e 	bl	80090cc <xTaskResumeAll>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f af67 	bne.w	8008526 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008658:	4b18      	ldr	r3, [pc, #96]	@ (80086bc <xQueueSemaphoreTake+0x21c>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	e75d      	b.n	8008526 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800866a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800866c:	f000 f9b4 	bl	80089d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008670:	f000 fd2c 	bl	80090cc <xTaskResumeAll>
 8008674:	e757      	b.n	8008526 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008676:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008678:	f000 f9ae 	bl	80089d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800867c:	f000 fd26 	bl	80090cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008682:	f000 f9fb 	bl	8008a7c <prvIsQueueEmpty>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	f43f af4c 	beq.w	8008526 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008694:	f001 ff90 	bl	800a5b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008698:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800869a:	f000 f8f5 	bl	8008888 <prvGetDisinheritPriorityAfterTimeout>
 800869e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 fa0e 	bl	8009ac8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80086ac:	f001 ffb6 	bl	800a61c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3738      	adds	r7, #56	@ 0x38
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	e000ed04 	.word	0xe000ed04

080086c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08e      	sub	sp, #56	@ 0x38
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	623b      	str	r3, [r7, #32]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d103      	bne.n	80086fc <xQueueReceiveFromISR+0x3c>
 80086f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <xQueueReceiveFromISR+0x40>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <xQueueReceiveFromISR+0x42>
 8008700:	2300      	movs	r3, #0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	61fb      	str	r3, [r7, #28]
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	e7fd      	b.n	800871a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800871e:	f002 f82b 	bl	800a778 <vPortValidateInterruptPriority>
	__asm volatile
 8008722:	f3ef 8211 	mrs	r2, BASEPRI
 8008726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	61ba      	str	r2, [r7, #24]
 8008738:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800873a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800873c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008742:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	2b00      	cmp	r3, #0
 8008748:	d02f      	beq.n	80087aa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008758:	f000 f918 	bl	800898c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	1e5a      	subs	r2, r3, #1
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008764:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d112      	bne.n	8008794 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d016      	beq.n	80087a4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	3310      	adds	r3, #16
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fed8 	bl	8009530 <xTaskRemoveFromEventList>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	e007      	b.n	80087a4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008798:	3301      	adds	r3, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	b25a      	sxtb	r2, r3
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80087a4:	2301      	movs	r3, #1
 80087a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a8:	e001      	b.n	80087ae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f383 8811 	msr	BASEPRI, r3
}
 80087b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3738      	adds	r7, #56	@ 0x38
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10b      	bne.n	80087ea <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60bb      	str	r3, [r7, #8]
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	e7fd      	b.n	80087e6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80087ea:	f001 fee5 	bl	800a5b8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80087f4:	f001 ff12 	bl	800a61c <vPortExitCritical>

	return uxReturn;
 80087f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008802:	b480      	push	{r7}
 8008804:	b087      	sub	sp, #28
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	60fb      	str	r3, [r7, #12]
}
 8008826:	bf00      	nop
 8008828:	bf00      	nop
 800882a:	e7fd      	b.n	8008828 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008830:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008832:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008834:	4618      	mov	r0, r3
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <vQueueDelete+0x2a>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	60bb      	str	r3, [r7, #8]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f95e 	bl	8008b2c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f002 f88c 	bl	800a998 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008880:	bf00      	nop
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d006      	beq.n	80088a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e001      	b.n	80088aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80088aa:	68fb      	ldr	r3, [r7, #12]
	}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10d      	bne.n	80088f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d14d      	bne.n	800897a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f001 f880 	bl	80099e8 <xTaskPriorityDisinherit>
 80088e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	e043      	b.n	800897a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d119      	bne.n	800892c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6858      	ldr	r0, [r3, #4]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008900:	461a      	mov	r2, r3
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	f002 f9fe 	bl	800ad04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008910:	441a      	add	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	429a      	cmp	r2, r3
 8008920:	d32b      	bcc.n	800897a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	605a      	str	r2, [r3, #4]
 800892a:	e026      	b.n	800897a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68d8      	ldr	r0, [r3, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008934:	461a      	mov	r2, r3
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	f002 f9e4 	bl	800ad04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008944:	425b      	negs	r3, r3
 8008946:	441a      	add	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d207      	bcs.n	8008968 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008960:	425b      	negs	r3, r3
 8008962:	441a      	add	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d105      	bne.n	800897a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	3b01      	subs	r3, #1
 8008978:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008982:	697b      	ldr	r3, [r7, #20]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d018      	beq.n	80089d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a6:	441a      	add	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68da      	ldr	r2, [r3, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d303      	bcc.n	80089c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68d9      	ldr	r1, [r3, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c8:	461a      	mov	r2, r3
 80089ca:	6838      	ldr	r0, [r7, #0]
 80089cc:	f002 f99a 	bl	800ad04 <memcpy>
	}
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089e0:	f001 fdea 	bl	800a5b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089ec:	e011      	b.n	8008a12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d012      	beq.n	8008a1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3324      	adds	r3, #36	@ 0x24
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fd98 	bl	8009530 <xTaskRemoveFromEventList>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a06:	f000 fe71 	bl	80096ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dce9      	bgt.n	80089ee <prvUnlockQueue+0x16>
 8008a1a:	e000      	b.n	8008a1e <prvUnlockQueue+0x46>
					break;
 8008a1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	22ff      	movs	r2, #255	@ 0xff
 8008a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008a26:	f001 fdf9 	bl	800a61c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a2a:	f001 fdc5 	bl	800a5b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a36:	e011      	b.n	8008a5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d012      	beq.n	8008a66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3310      	adds	r3, #16
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fd73 	bl	8009530 <xTaskRemoveFromEventList>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a50:	f000 fe4c 	bl	80096ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dce9      	bgt.n	8008a38 <prvUnlockQueue+0x60>
 8008a64:	e000      	b.n	8008a68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	22ff      	movs	r2, #255	@ 0xff
 8008a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a70:	f001 fdd4 	bl	800a61c <vPortExitCritical>
}
 8008a74:	bf00      	nop
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a84:	f001 fd98 	bl	800a5b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e001      	b.n	8008a9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a9a:	f001 fdbf 	bl	800a61c <vPortExitCritical>

	return xReturn;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ab0:	f001 fd82 	bl	800a5b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d102      	bne.n	8008ac6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e001      	b.n	8008aca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008aca:	f001 fda7 	bl	800a61c <vPortExitCritical>

	return xReturn;
 8008ace:	68fb      	ldr	r3, [r7, #12]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	e014      	b.n	8008b12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8008b28 <vQueueAddToRegistry+0x50>)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008af4:	490c      	ldr	r1, [pc, #48]	@ (8008b28 <vQueueAddToRegistry+0x50>)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008afe:	4a0a      	ldr	r2, [pc, #40]	@ (8008b28 <vQueueAddToRegistry+0x50>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	4413      	add	r3, r2
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b0a:	e006      	b.n	8008b1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b07      	cmp	r3, #7
 8008b16:	d9e7      	bls.n	8008ae8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	200031e4 	.word	0x200031e4

08008b2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	e016      	b.n	8008b68 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008b3a:	4a10      	ldr	r2, [pc, #64]	@ (8008b7c <vQueueUnregisterQueue+0x50>)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	4413      	add	r3, r2
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d10b      	bne.n	8008b62 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b7c <vQueueUnregisterQueue+0x50>)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008b54:	4a09      	ldr	r2, [pc, #36]	@ (8008b7c <vQueueUnregisterQueue+0x50>)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	4413      	add	r3, r2
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	605a      	str	r2, [r3, #4]
				break;
 8008b60:	e006      	b.n	8008b70 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	3301      	adds	r3, #1
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b07      	cmp	r3, #7
 8008b6c:	d9e5      	bls.n	8008b3a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	200031e4 	.word	0x200031e4

08008b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b90:	f001 fd12 	bl	800a5b8 <vPortEnterCritical>
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b9a:	b25b      	sxtb	r3, r3
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d103      	bne.n	8008baa <vQueueWaitForMessageRestricted+0x2a>
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bb0:	b25b      	sxtb	r3, r3
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d103      	bne.n	8008bc0 <vQueueWaitForMessageRestricted+0x40>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bc0:	f001 fd2c 	bl	800a61c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	3324      	adds	r3, #36	@ 0x24
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fc7f 	bl	80094d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bda:	6978      	ldr	r0, [r7, #20]
 8008bdc:	f7ff fefc 	bl	80089d8 <prvUnlockQueue>
	}
 8008be0:	bf00      	nop
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08e      	sub	sp, #56	@ 0x38
 8008bec:	af04      	add	r7, sp, #16
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10b      	bne.n	8008c14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	623b      	str	r3, [r7, #32]
}
 8008c0e:	bf00      	nop
 8008c10:	bf00      	nop
 8008c12:	e7fd      	b.n	8008c10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	61fb      	str	r3, [r7, #28]
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	e7fd      	b.n	8008c2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c32:	23a8      	movs	r3, #168	@ 0xa8
 8008c34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2ba8      	cmp	r3, #168	@ 0xa8
 8008c3a:	d00b      	beq.n	8008c54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	61bb      	str	r3, [r7, #24]
}
 8008c4e:	bf00      	nop
 8008c50:	bf00      	nop
 8008c52:	e7fd      	b.n	8008c50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01e      	beq.n	8008c9a <xTaskCreateStatic+0xb2>
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01b      	beq.n	8008c9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c74:	2300      	movs	r3, #0
 8008c76:	9303      	str	r3, [sp, #12]
 8008c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7a:	9302      	str	r3, [sp, #8]
 8008c7c:	f107 0314 	add.w	r3, r7, #20
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 f851 	bl	8008d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c94:	f000 f8f6 	bl	8008e84 <prvAddNewTaskToReadyList>
 8008c98:	e001      	b.n	8008c9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c9e:	697b      	ldr	r3, [r7, #20]
	}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3728      	adds	r7, #40	@ 0x28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08c      	sub	sp, #48	@ 0x30
 8008cac:	af04      	add	r7, sp, #16
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f001 fd9d 	bl	800a7fc <pvPortMalloc>
 8008cc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00e      	beq.n	8008ce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cca:	20a8      	movs	r0, #168	@ 0xa8
 8008ccc:	f001 fd96 	bl	800a7fc <pvPortMalloc>
 8008cd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cde:	e005      	b.n	8008cec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ce0:	6978      	ldr	r0, [r7, #20]
 8008ce2:	f001 fe59 	bl	800a998 <vPortFree>
 8008ce6:	e001      	b.n	8008cec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d017      	beq.n	8008d22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cfa:	88fa      	ldrh	r2, [r7, #6]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	9302      	str	r3, [sp, #8]
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f80f 	bl	8008d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d16:	69f8      	ldr	r0, [r7, #28]
 8008d18:	f000 f8b4 	bl	8008e84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	61bb      	str	r3, [r7, #24]
 8008d20:	e002      	b.n	8008d28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d28:	69bb      	ldr	r3, [r7, #24]
	}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	21a5      	movs	r1, #165	@ 0xa5
 8008d4e:	f001 ff4f 	bl	800abf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	f023 0307 	bic.w	r3, r3, #7
 8008d6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	617b      	str	r3, [r7, #20]
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	e7fd      	b.n	8008d8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01f      	beq.n	8008dd4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e012      	b.n	8008dc0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	4413      	add	r3, r2
 8008da0:	7819      	ldrb	r1, [r3, #0]
 8008da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	4413      	add	r3, r2
 8008da8:	3334      	adds	r3, #52	@ 0x34
 8008daa:	460a      	mov	r2, r1
 8008dac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	4413      	add	r3, r2
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d006      	beq.n	8008dc8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	61fb      	str	r3, [r7, #28]
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	2b0f      	cmp	r3, #15
 8008dc4:	d9e9      	bls.n	8008d9a <prvInitialiseNewTask+0x66>
 8008dc6:	e000      	b.n	8008dca <prvInitialiseNewTask+0x96>
			{
				break;
 8008dc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008dd2:	e003      	b.n	8008ddc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dde:	2b37      	cmp	r3, #55	@ 0x37
 8008de0:	d901      	bls.n	8008de6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008de2:	2337      	movs	r3, #55	@ 0x37
 8008de4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008df0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	2200      	movs	r2, #0
 8008df6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe fdcd 	bl	800799c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	3318      	adds	r3, #24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fdc8 	bl	800799c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	3354      	adds	r3, #84	@ 0x54
 8008e36:	224c      	movs	r2, #76	@ 0x4c
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 fed8 	bl	800abf0 <memset>
 8008e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e42:	4a0d      	ldr	r2, [pc, #52]	@ (8008e78 <prvInitialiseNewTask+0x144>)
 8008e44:	659a      	str	r2, [r3, #88]	@ 0x58
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	4a0c      	ldr	r2, [pc, #48]	@ (8008e7c <prvInitialiseNewTask+0x148>)
 8008e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008e80 <prvInitialiseNewTask+0x14c>)
 8008e50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	68f9      	ldr	r1, [r7, #12]
 8008e56:	69b8      	ldr	r0, [r7, #24]
 8008e58:	f001 fa7c 	bl	800a354 <pxPortInitialiseStack>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e6e:	bf00      	nop
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	2000747c 	.word	0x2000747c
 8008e7c:	200074e4 	.word	0x200074e4
 8008e80:	2000754c 	.word	0x2000754c

08008e84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e8c:	f001 fb94 	bl	800a5b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e90:	4b2d      	ldr	r3, [pc, #180]	@ (8008f48 <prvAddNewTaskToReadyList+0xc4>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3301      	adds	r3, #1
 8008e96:	4a2c      	ldr	r2, [pc, #176]	@ (8008f48 <prvAddNewTaskToReadyList+0xc4>)
 8008e98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8008f4c <prvAddNewTaskToReadyList+0xc8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f4c <prvAddNewTaskToReadyList+0xc8>)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ea8:	4b27      	ldr	r3, [pc, #156]	@ (8008f48 <prvAddNewTaskToReadyList+0xc4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d110      	bne.n	8008ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008eb0:	f000 fc40 	bl	8009734 <prvInitialiseTaskLists>
 8008eb4:	e00d      	b.n	8008ed2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008eb6:	4b26      	ldr	r3, [pc, #152]	@ (8008f50 <prvAddNewTaskToReadyList+0xcc>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ebe:	4b23      	ldr	r3, [pc, #140]	@ (8008f4c <prvAddNewTaskToReadyList+0xc8>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d802      	bhi.n	8008ed2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8008f4c <prvAddNewTaskToReadyList+0xc8>)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ed2:	4b20      	ldr	r3, [pc, #128]	@ (8008f54 <prvAddNewTaskToReadyList+0xd0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8008f54 <prvAddNewTaskToReadyList+0xd0>)
 8008eda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008edc:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <prvAddNewTaskToReadyList+0xd0>)
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f58 <prvAddNewTaskToReadyList+0xd4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d903      	bls.n	8008ef8 <prvAddNewTaskToReadyList+0x74>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef4:	4a18      	ldr	r2, [pc, #96]	@ (8008f58 <prvAddNewTaskToReadyList+0xd4>)
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008efc:	4613      	mov	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4a15      	ldr	r2, [pc, #84]	@ (8008f5c <prvAddNewTaskToReadyList+0xd8>)
 8008f06:	441a      	add	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f7fe fd51 	bl	80079b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f14:	f001 fb82 	bl	800a61c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f18:	4b0d      	ldr	r3, [pc, #52]	@ (8008f50 <prvAddNewTaskToReadyList+0xcc>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00e      	beq.n	8008f3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f20:	4b0a      	ldr	r3, [pc, #40]	@ (8008f4c <prvAddNewTaskToReadyList+0xc8>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d207      	bcs.n	8008f3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f60 <prvAddNewTaskToReadyList+0xdc>)
 8008f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	200036f8 	.word	0x200036f8
 8008f4c:	20003224 	.word	0x20003224
 8008f50:	20003704 	.word	0x20003704
 8008f54:	20003714 	.word	0x20003714
 8008f58:	20003700 	.word	0x20003700
 8008f5c:	20003228 	.word	0x20003228
 8008f60:	e000ed04 	.word	0xe000ed04

08008f64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d018      	beq.n	8008fa8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f76:	4b14      	ldr	r3, [pc, #80]	@ (8008fc8 <vTaskDelay+0x64>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <vTaskDelay+0x32>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	60bb      	str	r3, [r7, #8]
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f96:	f000 f88b 	bl	80090b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fe2b 	bl	8009bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fa2:	f000 f893 	bl	80090cc <xTaskResumeAll>
 8008fa6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d107      	bne.n	8008fbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008fae:	4b07      	ldr	r3, [pc, #28]	@ (8008fcc <vTaskDelay+0x68>)
 8008fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20003720 	.word	0x20003720
 8008fcc:	e000ed04 	.word	0xe000ed04

08008fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	@ 0x28
 8008fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fde:	463a      	mov	r2, r7
 8008fe0:	1d39      	adds	r1, r7, #4
 8008fe2:	f107 0308 	add.w	r3, r7, #8
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fc84 	bl	80078f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	9202      	str	r2, [sp, #8]
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	460a      	mov	r2, r1
 8008ffe:	4924      	ldr	r1, [pc, #144]	@ (8009090 <vTaskStartScheduler+0xc0>)
 8009000:	4824      	ldr	r0, [pc, #144]	@ (8009094 <vTaskStartScheduler+0xc4>)
 8009002:	f7ff fdf1 	bl	8008be8 <xTaskCreateStatic>
 8009006:	4603      	mov	r3, r0
 8009008:	4a23      	ldr	r2, [pc, #140]	@ (8009098 <vTaskStartScheduler+0xc8>)
 800900a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800900c:	4b22      	ldr	r3, [pc, #136]	@ (8009098 <vTaskStartScheduler+0xc8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009014:	2301      	movs	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	e001      	b.n	800901e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d102      	bne.n	800902a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009024:	f000 fe3c 	bl	8009ca0 <xTimerCreateTimerTask>
 8009028:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d11b      	bne.n	8009068 <vTaskStartScheduler+0x98>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	613b      	str	r3, [r7, #16]
}
 8009042:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009044:	4b15      	ldr	r3, [pc, #84]	@ (800909c <vTaskStartScheduler+0xcc>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3354      	adds	r3, #84	@ 0x54
 800904a:	4a15      	ldr	r2, [pc, #84]	@ (80090a0 <vTaskStartScheduler+0xd0>)
 800904c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800904e:	4b15      	ldr	r3, [pc, #84]	@ (80090a4 <vTaskStartScheduler+0xd4>)
 8009050:	f04f 32ff 	mov.w	r2, #4294967295
 8009054:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009056:	4b14      	ldr	r3, [pc, #80]	@ (80090a8 <vTaskStartScheduler+0xd8>)
 8009058:	2201      	movs	r2, #1
 800905a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800905c:	4b13      	ldr	r3, [pc, #76]	@ (80090ac <vTaskStartScheduler+0xdc>)
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009062:	f001 fa05 	bl	800a470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009066:	e00f      	b.n	8009088 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906e:	d10b      	bne.n	8009088 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	60fb      	str	r3, [r7, #12]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <vTaskStartScheduler+0xb4>
}
 8009088:	bf00      	nop
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	0800ae74 	.word	0x0800ae74
 8009094:	08009705 	.word	0x08009705
 8009098:	2000371c 	.word	0x2000371c
 800909c:	20003224 	.word	0x20003224
 80090a0:	20000018 	.word	0x20000018
 80090a4:	20003718 	.word	0x20003718
 80090a8:	20003704 	.word	0x20003704
 80090ac:	200036fc 	.word	0x200036fc

080090b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090b4:	4b04      	ldr	r3, [pc, #16]	@ (80090c8 <vTaskSuspendAll+0x18>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3301      	adds	r3, #1
 80090ba:	4a03      	ldr	r2, [pc, #12]	@ (80090c8 <vTaskSuspendAll+0x18>)
 80090bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090be:	bf00      	nop
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	20003720 	.word	0x20003720

080090cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090da:	4b42      	ldr	r3, [pc, #264]	@ (80091e4 <xTaskResumeAll+0x118>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10b      	bne.n	80090fa <xTaskResumeAll+0x2e>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	603b      	str	r3, [r7, #0]
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop
 80090f8:	e7fd      	b.n	80090f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090fa:	f001 fa5d 	bl	800a5b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090fe:	4b39      	ldr	r3, [pc, #228]	@ (80091e4 <xTaskResumeAll+0x118>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3b01      	subs	r3, #1
 8009104:	4a37      	ldr	r2, [pc, #220]	@ (80091e4 <xTaskResumeAll+0x118>)
 8009106:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009108:	4b36      	ldr	r3, [pc, #216]	@ (80091e4 <xTaskResumeAll+0x118>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d162      	bne.n	80091d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009110:	4b35      	ldr	r3, [pc, #212]	@ (80091e8 <xTaskResumeAll+0x11c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d05e      	beq.n	80091d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009118:	e02f      	b.n	800917a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911a:	4b34      	ldr	r3, [pc, #208]	@ (80091ec <xTaskResumeAll+0x120>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3318      	adds	r3, #24
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fca2 	bl	8007a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3304      	adds	r3, #4
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe fc9d 	bl	8007a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800913a:	4b2d      	ldr	r3, [pc, #180]	@ (80091f0 <xTaskResumeAll+0x124>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d903      	bls.n	800914a <xTaskResumeAll+0x7e>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009146:	4a2a      	ldr	r2, [pc, #168]	@ (80091f0 <xTaskResumeAll+0x124>)
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4a27      	ldr	r2, [pc, #156]	@ (80091f4 <xTaskResumeAll+0x128>)
 8009158:	441a      	add	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3304      	adds	r3, #4
 800915e:	4619      	mov	r1, r3
 8009160:	4610      	mov	r0, r2
 8009162:	f7fe fc28 	bl	80079b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916a:	4b23      	ldr	r3, [pc, #140]	@ (80091f8 <xTaskResumeAll+0x12c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	429a      	cmp	r2, r3
 8009172:	d302      	bcc.n	800917a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009174:	4b21      	ldr	r3, [pc, #132]	@ (80091fc <xTaskResumeAll+0x130>)
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800917a:	4b1c      	ldr	r3, [pc, #112]	@ (80091ec <xTaskResumeAll+0x120>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1cb      	bne.n	800911a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009188:	f000 fb78 	bl	800987c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800918c:	4b1c      	ldr	r3, [pc, #112]	@ (8009200 <xTaskResumeAll+0x134>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d010      	beq.n	80091ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009198:	f000 f858 	bl	800924c <xTaskIncrementTick>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80091a2:	4b16      	ldr	r3, [pc, #88]	@ (80091fc <xTaskResumeAll+0x130>)
 80091a4:	2201      	movs	r2, #1
 80091a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1f1      	bne.n	8009198 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80091b4:	4b12      	ldr	r3, [pc, #72]	@ (8009200 <xTaskResumeAll+0x134>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091ba:	4b10      	ldr	r3, [pc, #64]	@ (80091fc <xTaskResumeAll+0x130>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d009      	beq.n	80091d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091c2:	2301      	movs	r3, #1
 80091c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <xTaskResumeAll+0x138>)
 80091c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091d6:	f001 fa21 	bl	800a61c <vPortExitCritical>

	return xAlreadyYielded;
 80091da:	68bb      	ldr	r3, [r7, #8]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20003720 	.word	0x20003720
 80091e8:	200036f8 	.word	0x200036f8
 80091ec:	200036b8 	.word	0x200036b8
 80091f0:	20003700 	.word	0x20003700
 80091f4:	20003228 	.word	0x20003228
 80091f8:	20003224 	.word	0x20003224
 80091fc:	2000370c 	.word	0x2000370c
 8009200:	20003708 	.word	0x20003708
 8009204:	e000ed04 	.word	0xe000ed04

08009208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800920e:	4b05      	ldr	r3, [pc, #20]	@ (8009224 <xTaskGetTickCount+0x1c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009214:	687b      	ldr	r3, [r7, #4]
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	200036fc 	.word	0x200036fc

08009228 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800922e:	f001 faa3 	bl	800a778 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009236:	4b04      	ldr	r3, [pc, #16]	@ (8009248 <xTaskGetTickCountFromISR+0x20>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800923c:	683b      	ldr	r3, [r7, #0]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	200036fc 	.word	0x200036fc

0800924c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009256:	4b4f      	ldr	r3, [pc, #316]	@ (8009394 <xTaskIncrementTick+0x148>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f040 8090 	bne.w	8009380 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009260:	4b4d      	ldr	r3, [pc, #308]	@ (8009398 <xTaskIncrementTick+0x14c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009268:	4a4b      	ldr	r2, [pc, #300]	@ (8009398 <xTaskIncrementTick+0x14c>)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d121      	bne.n	80092b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009274:	4b49      	ldr	r3, [pc, #292]	@ (800939c <xTaskIncrementTick+0x150>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <xTaskIncrementTick+0x4a>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	603b      	str	r3, [r7, #0]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <xTaskIncrementTick+0x46>
 8009296:	4b41      	ldr	r3, [pc, #260]	@ (800939c <xTaskIncrementTick+0x150>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	4b40      	ldr	r3, [pc, #256]	@ (80093a0 <xTaskIncrementTick+0x154>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a3e      	ldr	r2, [pc, #248]	@ (800939c <xTaskIncrementTick+0x150>)
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	4a3e      	ldr	r2, [pc, #248]	@ (80093a0 <xTaskIncrementTick+0x154>)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	4b3e      	ldr	r3, [pc, #248]	@ (80093a4 <xTaskIncrementTick+0x158>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	4a3c      	ldr	r2, [pc, #240]	@ (80093a4 <xTaskIncrementTick+0x158>)
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	f000 fae2 	bl	800987c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092b8:	4b3b      	ldr	r3, [pc, #236]	@ (80093a8 <xTaskIncrementTick+0x15c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d349      	bcc.n	8009356 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092c2:	4b36      	ldr	r3, [pc, #216]	@ (800939c <xTaskIncrementTick+0x150>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d104      	bne.n	80092d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092cc:	4b36      	ldr	r3, [pc, #216]	@ (80093a8 <xTaskIncrementTick+0x15c>)
 80092ce:	f04f 32ff 	mov.w	r2, #4294967295
 80092d2:	601a      	str	r2, [r3, #0]
					break;
 80092d4:	e03f      	b.n	8009356 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d6:	4b31      	ldr	r3, [pc, #196]	@ (800939c <xTaskIncrementTick+0x150>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d203      	bcs.n	80092f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092ee:	4a2e      	ldr	r2, [pc, #184]	@ (80093a8 <xTaskIncrementTick+0x15c>)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092f4:	e02f      	b.n	8009356 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	3304      	adds	r3, #4
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fbb8 	bl	8007a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	3318      	adds	r3, #24
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fbaf 	bl	8007a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009316:	4b25      	ldr	r3, [pc, #148]	@ (80093ac <xTaskIncrementTick+0x160>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d903      	bls.n	8009326 <xTaskIncrementTick+0xda>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009322:	4a22      	ldr	r2, [pc, #136]	@ (80093ac <xTaskIncrementTick+0x160>)
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a1f      	ldr	r2, [pc, #124]	@ (80093b0 <xTaskIncrementTick+0x164>)
 8009334:	441a      	add	r2, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	3304      	adds	r3, #4
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f7fe fb3a 	bl	80079b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009346:	4b1b      	ldr	r3, [pc, #108]	@ (80093b4 <xTaskIncrementTick+0x168>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934c:	429a      	cmp	r2, r3
 800934e:	d3b8      	bcc.n	80092c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009350:	2301      	movs	r3, #1
 8009352:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009354:	e7b5      	b.n	80092c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009356:	4b17      	ldr	r3, [pc, #92]	@ (80093b4 <xTaskIncrementTick+0x168>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935c:	4914      	ldr	r1, [pc, #80]	@ (80093b0 <xTaskIncrementTick+0x164>)
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d901      	bls.n	8009372 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800936e:	2301      	movs	r3, #1
 8009370:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009372:	4b11      	ldr	r3, [pc, #68]	@ (80093b8 <xTaskIncrementTick+0x16c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800937a:	2301      	movs	r3, #1
 800937c:	617b      	str	r3, [r7, #20]
 800937e:	e004      	b.n	800938a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009380:	4b0e      	ldr	r3, [pc, #56]	@ (80093bc <xTaskIncrementTick+0x170>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3301      	adds	r3, #1
 8009386:	4a0d      	ldr	r2, [pc, #52]	@ (80093bc <xTaskIncrementTick+0x170>)
 8009388:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800938a:	697b      	ldr	r3, [r7, #20]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20003720 	.word	0x20003720
 8009398:	200036fc 	.word	0x200036fc
 800939c:	200036b0 	.word	0x200036b0
 80093a0:	200036b4 	.word	0x200036b4
 80093a4:	20003710 	.word	0x20003710
 80093a8:	20003718 	.word	0x20003718
 80093ac:	20003700 	.word	0x20003700
 80093b0:	20003228 	.word	0x20003228
 80093b4:	20003224 	.word	0x20003224
 80093b8:	2000370c 	.word	0x2000370c
 80093bc:	20003708 	.word	0x20003708

080093c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093c6:	4b2b      	ldr	r3, [pc, #172]	@ (8009474 <vTaskSwitchContext+0xb4>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093ce:	4b2a      	ldr	r3, [pc, #168]	@ (8009478 <vTaskSwitchContext+0xb8>)
 80093d0:	2201      	movs	r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093d4:	e047      	b.n	8009466 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80093d6:	4b28      	ldr	r3, [pc, #160]	@ (8009478 <vTaskSwitchContext+0xb8>)
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093dc:	4b27      	ldr	r3, [pc, #156]	@ (800947c <vTaskSwitchContext+0xbc>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	60fb      	str	r3, [r7, #12]
 80093e2:	e011      	b.n	8009408 <vTaskSwitchContext+0x48>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10b      	bne.n	8009402 <vTaskSwitchContext+0x42>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	607b      	str	r3, [r7, #4]
}
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	e7fd      	b.n	80093fe <vTaskSwitchContext+0x3e>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3b01      	subs	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	491d      	ldr	r1, [pc, #116]	@ (8009480 <vTaskSwitchContext+0xc0>)
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0e3      	beq.n	80093e4 <vTaskSwitchContext+0x24>
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a16      	ldr	r2, [pc, #88]	@ (8009480 <vTaskSwitchContext+0xc0>)
 8009428:	4413      	add	r3, r2
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	605a      	str	r2, [r3, #4]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	3308      	adds	r3, #8
 800943e:	429a      	cmp	r2, r3
 8009440:	d104      	bne.n	800944c <vTaskSwitchContext+0x8c>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	605a      	str	r2, [r3, #4]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	4a0c      	ldr	r2, [pc, #48]	@ (8009484 <vTaskSwitchContext+0xc4>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	4a09      	ldr	r2, [pc, #36]	@ (800947c <vTaskSwitchContext+0xbc>)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800945c:	4b09      	ldr	r3, [pc, #36]	@ (8009484 <vTaskSwitchContext+0xc4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3354      	adds	r3, #84	@ 0x54
 8009462:	4a09      	ldr	r2, [pc, #36]	@ (8009488 <vTaskSwitchContext+0xc8>)
 8009464:	6013      	str	r3, [r2, #0]
}
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	20003720 	.word	0x20003720
 8009478:	2000370c 	.word	0x2000370c
 800947c:	20003700 	.word	0x20003700
 8009480:	20003228 	.word	0x20003228
 8009484:	20003224 	.word	0x20003224
 8009488:	20000018 	.word	0x20000018

0800948c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10b      	bne.n	80094b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	60fb      	str	r3, [r7, #12]
}
 80094ae:	bf00      	nop
 80094b0:	bf00      	nop
 80094b2:	e7fd      	b.n	80094b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094b4:	4b07      	ldr	r3, [pc, #28]	@ (80094d4 <vTaskPlaceOnEventList+0x48>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3318      	adds	r3, #24
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7fe fa9e 	bl	80079fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094c2:	2101      	movs	r1, #1
 80094c4:	6838      	ldr	r0, [r7, #0]
 80094c6:	f000 fb97 	bl	8009bf8 <prvAddCurrentTaskToDelayedList>
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	20003224 	.word	0x20003224

080094d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10b      	bne.n	8009502 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	617b      	str	r3, [r7, #20]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009502:	4b0a      	ldr	r3, [pc, #40]	@ (800952c <vTaskPlaceOnEventListRestricted+0x54>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3318      	adds	r3, #24
 8009508:	4619      	mov	r1, r3
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7fe fa53 	bl	80079b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009516:	f04f 33ff 	mov.w	r3, #4294967295
 800951a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	68b8      	ldr	r0, [r7, #8]
 8009520:	f000 fb6a 	bl	8009bf8 <prvAddCurrentTaskToDelayedList>
	}
 8009524:	bf00      	nop
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20003224 	.word	0x20003224

08009530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10b      	bne.n	800955e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60fb      	str	r3, [r7, #12]
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	e7fd      	b.n	800955a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	3318      	adds	r3, #24
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe fa84 	bl	8007a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009568:	4b1d      	ldr	r3, [pc, #116]	@ (80095e0 <xTaskRemoveFromEventList+0xb0>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d11d      	bne.n	80095ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	3304      	adds	r3, #4
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe fa7b 	bl	8007a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957e:	4b19      	ldr	r3, [pc, #100]	@ (80095e4 <xTaskRemoveFromEventList+0xb4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d903      	bls.n	800958e <xTaskRemoveFromEventList+0x5e>
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958a:	4a16      	ldr	r2, [pc, #88]	@ (80095e4 <xTaskRemoveFromEventList+0xb4>)
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4a13      	ldr	r2, [pc, #76]	@ (80095e8 <xTaskRemoveFromEventList+0xb8>)
 800959c:	441a      	add	r2, r3
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	3304      	adds	r3, #4
 80095a2:	4619      	mov	r1, r3
 80095a4:	4610      	mov	r0, r2
 80095a6:	f7fe fa06 	bl	80079b6 <vListInsertEnd>
 80095aa:	e005      	b.n	80095b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	3318      	adds	r3, #24
 80095b0:	4619      	mov	r1, r3
 80095b2:	480e      	ldr	r0, [pc, #56]	@ (80095ec <xTaskRemoveFromEventList+0xbc>)
 80095b4:	f7fe f9ff 	bl	80079b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095bc:	4b0c      	ldr	r3, [pc, #48]	@ (80095f0 <xTaskRemoveFromEventList+0xc0>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d905      	bls.n	80095d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095c6:	2301      	movs	r3, #1
 80095c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095ca:	4b0a      	ldr	r3, [pc, #40]	@ (80095f4 <xTaskRemoveFromEventList+0xc4>)
 80095cc:	2201      	movs	r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	e001      	b.n	80095d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095d6:	697b      	ldr	r3, [r7, #20]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3718      	adds	r7, #24
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20003720 	.word	0x20003720
 80095e4:	20003700 	.word	0x20003700
 80095e8:	20003228 	.word	0x20003228
 80095ec:	200036b8 	.word	0x200036b8
 80095f0:	20003224 	.word	0x20003224
 80095f4:	2000370c 	.word	0x2000370c

080095f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009600:	4b06      	ldr	r3, [pc, #24]	@ (800961c <vTaskInternalSetTimeOutState+0x24>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009608:	4b05      	ldr	r3, [pc, #20]	@ (8009620 <vTaskInternalSetTimeOutState+0x28>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	605a      	str	r2, [r3, #4]
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	20003710 	.word	0x20003710
 8009620:	200036fc 	.word	0x200036fc

08009624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10b      	bne.n	800964c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	613b      	str	r3, [r7, #16]
}
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	e7fd      	b.n	8009648 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60fb      	str	r3, [r7, #12]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800966a:	f000 ffa5 	bl	800a5b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800966e:	4b1d      	ldr	r3, [pc, #116]	@ (80096e4 <xTaskCheckForTimeOut+0xc0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009686:	d102      	bne.n	800968e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009688:	2300      	movs	r3, #0
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e023      	b.n	80096d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b15      	ldr	r3, [pc, #84]	@ (80096e8 <xTaskCheckForTimeOut+0xc4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d007      	beq.n	80096aa <xTaskCheckForTimeOut+0x86>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d302      	bcc.n	80096aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096a4:	2301      	movs	r3, #1
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	e015      	b.n	80096d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d20b      	bcs.n	80096cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	1ad2      	subs	r2, r2, r3
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff ff99 	bl	80095f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096c6:	2300      	movs	r3, #0
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	e004      	b.n	80096d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096d6:	f000 ffa1 	bl	800a61c <vPortExitCritical>

	return xReturn;
 80096da:	69fb      	ldr	r3, [r7, #28]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	200036fc 	.word	0x200036fc
 80096e8:	20003710 	.word	0x20003710

080096ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096f0:	4b03      	ldr	r3, [pc, #12]	@ (8009700 <vTaskMissedYield+0x14>)
 80096f2:	2201      	movs	r2, #1
 80096f4:	601a      	str	r2, [r3, #0]
}
 80096f6:	bf00      	nop
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	2000370c 	.word	0x2000370c

08009704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800970c:	f000 f852 	bl	80097b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009710:	4b06      	ldr	r3, [pc, #24]	@ (800972c <prvIdleTask+0x28>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d9f9      	bls.n	800970c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009718:	4b05      	ldr	r3, [pc, #20]	@ (8009730 <prvIdleTask+0x2c>)
 800971a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009728:	e7f0      	b.n	800970c <prvIdleTask+0x8>
 800972a:	bf00      	nop
 800972c:	20003228 	.word	0x20003228
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800973a:	2300      	movs	r3, #0
 800973c:	607b      	str	r3, [r7, #4]
 800973e:	e00c      	b.n	800975a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	4613      	mov	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4a12      	ldr	r2, [pc, #72]	@ (8009794 <prvInitialiseTaskLists+0x60>)
 800974c:	4413      	add	r3, r2
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe f904 	bl	800795c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3301      	adds	r3, #1
 8009758:	607b      	str	r3, [r7, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b37      	cmp	r3, #55	@ 0x37
 800975e:	d9ef      	bls.n	8009740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009760:	480d      	ldr	r0, [pc, #52]	@ (8009798 <prvInitialiseTaskLists+0x64>)
 8009762:	f7fe f8fb 	bl	800795c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009766:	480d      	ldr	r0, [pc, #52]	@ (800979c <prvInitialiseTaskLists+0x68>)
 8009768:	f7fe f8f8 	bl	800795c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800976c:	480c      	ldr	r0, [pc, #48]	@ (80097a0 <prvInitialiseTaskLists+0x6c>)
 800976e:	f7fe f8f5 	bl	800795c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009772:	480c      	ldr	r0, [pc, #48]	@ (80097a4 <prvInitialiseTaskLists+0x70>)
 8009774:	f7fe f8f2 	bl	800795c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009778:	480b      	ldr	r0, [pc, #44]	@ (80097a8 <prvInitialiseTaskLists+0x74>)
 800977a:	f7fe f8ef 	bl	800795c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800977e:	4b0b      	ldr	r3, [pc, #44]	@ (80097ac <prvInitialiseTaskLists+0x78>)
 8009780:	4a05      	ldr	r2, [pc, #20]	@ (8009798 <prvInitialiseTaskLists+0x64>)
 8009782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009784:	4b0a      	ldr	r3, [pc, #40]	@ (80097b0 <prvInitialiseTaskLists+0x7c>)
 8009786:	4a05      	ldr	r2, [pc, #20]	@ (800979c <prvInitialiseTaskLists+0x68>)
 8009788:	601a      	str	r2, [r3, #0]
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20003228 	.word	0x20003228
 8009798:	20003688 	.word	0x20003688
 800979c:	2000369c 	.word	0x2000369c
 80097a0:	200036b8 	.word	0x200036b8
 80097a4:	200036cc 	.word	0x200036cc
 80097a8:	200036e4 	.word	0x200036e4
 80097ac:	200036b0 	.word	0x200036b0
 80097b0:	200036b4 	.word	0x200036b4

080097b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ba:	e019      	b.n	80097f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097bc:	f000 fefc 	bl	800a5b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c0:	4b10      	ldr	r3, [pc, #64]	@ (8009804 <prvCheckTasksWaitingTermination+0x50>)
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe f94f 	bl	8007a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009808 <prvCheckTasksWaitingTermination+0x54>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009808 <prvCheckTasksWaitingTermination+0x54>)
 80097da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097dc:	4b0b      	ldr	r3, [pc, #44]	@ (800980c <prvCheckTasksWaitingTermination+0x58>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	4a0a      	ldr	r2, [pc, #40]	@ (800980c <prvCheckTasksWaitingTermination+0x58>)
 80097e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097e6:	f000 ff19 	bl	800a61c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f810 	bl	8009810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097f0:	4b06      	ldr	r3, [pc, #24]	@ (800980c <prvCheckTasksWaitingTermination+0x58>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e1      	bne.n	80097bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	200036cc 	.word	0x200036cc
 8009808:	200036f8 	.word	0x200036f8
 800980c:	200036e0 	.word	0x200036e0

08009810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3354      	adds	r3, #84	@ 0x54
 800981c:	4618      	mov	r0, r3
 800981e:	f001 f9ef 	bl	800ac00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009828:	2b00      	cmp	r3, #0
 800982a:	d108      	bne.n	800983e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009830:	4618      	mov	r0, r3
 8009832:	f001 f8b1 	bl	800a998 <vPortFree>
				vPortFree( pxTCB );
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 f8ae 	bl	800a998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800983c:	e019      	b.n	8009872 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009844:	2b01      	cmp	r3, #1
 8009846:	d103      	bne.n	8009850 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 f8a5 	bl	800a998 <vPortFree>
	}
 800984e:	e010      	b.n	8009872 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009856:	2b02      	cmp	r3, #2
 8009858:	d00b      	beq.n	8009872 <prvDeleteTCB+0x62>
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	60fb      	str	r3, [r7, #12]
}
 800986c:	bf00      	nop
 800986e:	bf00      	nop
 8009870:	e7fd      	b.n	800986e <prvDeleteTCB+0x5e>
	}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009882:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <prvResetNextTaskUnblockTime+0x38>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800988c:	4b0a      	ldr	r3, [pc, #40]	@ (80098b8 <prvResetNextTaskUnblockTime+0x3c>)
 800988e:	f04f 32ff 	mov.w	r2, #4294967295
 8009892:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009894:	e008      	b.n	80098a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009896:	4b07      	ldr	r3, [pc, #28]	@ (80098b4 <prvResetNextTaskUnblockTime+0x38>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4a04      	ldr	r2, [pc, #16]	@ (80098b8 <prvResetNextTaskUnblockTime+0x3c>)
 80098a6:	6013      	str	r3, [r2, #0]
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	200036b0 	.word	0x200036b0
 80098b8:	20003718 	.word	0x20003718

080098bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80098c2:	4b05      	ldr	r3, [pc, #20]	@ (80098d8 <xTaskGetCurrentTaskHandle+0x1c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80098c8:	687b      	ldr	r3, [r7, #4]
	}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	20003224 	.word	0x20003224

080098dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009910 <xTaskGetSchedulerState+0x34>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d102      	bne.n	80098f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098ea:	2301      	movs	r3, #1
 80098ec:	607b      	str	r3, [r7, #4]
 80098ee:	e008      	b.n	8009902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f0:	4b08      	ldr	r3, [pc, #32]	@ (8009914 <xTaskGetSchedulerState+0x38>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d102      	bne.n	80098fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098f8:	2302      	movs	r3, #2
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	e001      	b.n	8009902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098fe:	2300      	movs	r3, #0
 8009900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009902:	687b      	ldr	r3, [r7, #4]
	}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	20003704 	.word	0x20003704
 8009914:	20003720 	.word	0x20003720

08009918 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d051      	beq.n	80099d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009932:	4b2a      	ldr	r3, [pc, #168]	@ (80099dc <xTaskPriorityInherit+0xc4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009938:	429a      	cmp	r2, r3
 800993a:	d241      	bcs.n	80099c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	db06      	blt.n	8009952 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009944:	4b25      	ldr	r3, [pc, #148]	@ (80099dc <xTaskPriorityInherit+0xc4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	6959      	ldr	r1, [r3, #20]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4a1f      	ldr	r2, [pc, #124]	@ (80099e0 <xTaskPriorityInherit+0xc8>)
 8009964:	4413      	add	r3, r2
 8009966:	4299      	cmp	r1, r3
 8009968:	d122      	bne.n	80099b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	3304      	adds	r3, #4
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe f87e 	bl	8007a70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009974:	4b19      	ldr	r3, [pc, #100]	@ (80099dc <xTaskPriorityInherit+0xc4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009982:	4b18      	ldr	r3, [pc, #96]	@ (80099e4 <xTaskPriorityInherit+0xcc>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d903      	bls.n	8009992 <xTaskPriorityInherit+0x7a>
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998e:	4a15      	ldr	r2, [pc, #84]	@ (80099e4 <xTaskPriorityInherit+0xcc>)
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4a10      	ldr	r2, [pc, #64]	@ (80099e0 <xTaskPriorityInherit+0xc8>)
 80099a0:	441a      	add	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	3304      	adds	r3, #4
 80099a6:	4619      	mov	r1, r3
 80099a8:	4610      	mov	r0, r2
 80099aa:	f7fe f804 	bl	80079b6 <vListInsertEnd>
 80099ae:	e004      	b.n	80099ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099b0:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <xTaskPriorityInherit+0xc4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80099ba:	2301      	movs	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	e008      	b.n	80099d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099c4:	4b05      	ldr	r3, [pc, #20]	@ (80099dc <xTaskPriorityInherit+0xc4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d201      	bcs.n	80099d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80099ce:	2301      	movs	r3, #1
 80099d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099d2:	68fb      	ldr	r3, [r7, #12]
	}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20003224 	.word	0x20003224
 80099e0:	20003228 	.word	0x20003228
 80099e4:	20003700 	.word	0x20003700

080099e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d058      	beq.n	8009ab0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099fe:	4b2f      	ldr	r3, [pc, #188]	@ (8009abc <xTaskPriorityDisinherit+0xd4>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d00b      	beq.n	8009a20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	60fb      	str	r3, [r7, #12]
}
 8009a1a:	bf00      	nop
 8009a1c:	bf00      	nop
 8009a1e:	e7fd      	b.n	8009a1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10b      	bne.n	8009a40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	60bb      	str	r3, [r7, #8]
}
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	e7fd      	b.n	8009a3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a44:	1e5a      	subs	r2, r3, #1
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d02c      	beq.n	8009ab0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d128      	bne.n	8009ab0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	3304      	adds	r3, #4
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe f804 	bl	8007a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a80:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac0 <xTaskPriorityDisinherit+0xd8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d903      	bls.n	8009a90 <xTaskPriorityDisinherit+0xa8>
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8009ac0 <xTaskPriorityDisinherit+0xd8>)
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4a09      	ldr	r2, [pc, #36]	@ (8009ac4 <xTaskPriorityDisinherit+0xdc>)
 8009a9e:	441a      	add	r2, r3
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	f7fd ff85 	bl	80079b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009aac:	2301      	movs	r3, #1
 8009aae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ab0:	697b      	ldr	r3, [r7, #20]
	}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20003224 	.word	0x20003224
 8009ac0:	20003700 	.word	0x20003700
 8009ac4:	20003228 	.word	0x20003228

08009ac8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d06c      	beq.n	8009bba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10b      	bne.n	8009b00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	60fb      	str	r3, [r7, #12]
}
 8009afa:	bf00      	nop
 8009afc:	bf00      	nop
 8009afe:	e7fd      	b.n	8009afc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d902      	bls.n	8009b10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	61fb      	str	r3, [r7, #28]
 8009b0e:	e002      	b.n	8009b16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1a:	69fa      	ldr	r2, [r7, #28]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d04c      	beq.n	8009bba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d147      	bne.n	8009bba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009b2a:	4b26      	ldr	r3, [pc, #152]	@ (8009bc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d10b      	bne.n	8009b4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	60bb      	str	r3, [r7, #8]
}
 8009b46:	bf00      	nop
 8009b48:	bf00      	nop
 8009b4a:	e7fd      	b.n	8009b48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	69fa      	ldr	r2, [r7, #28]
 8009b56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	db04      	blt.n	8009b6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	6959      	ldr	r1, [r3, #20]
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	4613      	mov	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4a13      	ldr	r2, [pc, #76]	@ (8009bc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b7a:	4413      	add	r3, r2
 8009b7c:	4299      	cmp	r1, r3
 8009b7e:	d11c      	bne.n	8009bba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fd ff73 	bl	8007a70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009bcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d903      	bls.n	8009b9e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8009bcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4a07      	ldr	r2, [pc, #28]	@ (8009bc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009bac:	441a      	add	r2, r3
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f7fd fefe 	bl	80079b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bba:	bf00      	nop
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20003224 	.word	0x20003224
 8009bc8:	20003228 	.word	0x20003228
 8009bcc:	20003700 	.word	0x20003700

08009bd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009bd4:	4b07      	ldr	r3, [pc, #28]	@ (8009bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d004      	beq.n	8009be6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009bdc:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009be2:	3201      	adds	r2, #1
 8009be4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009be6:	4b03      	ldr	r3, [pc, #12]	@ (8009bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009be8:	681b      	ldr	r3, [r3, #0]
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	20003224 	.word	0x20003224

08009bf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c02:	4b21      	ldr	r3, [pc, #132]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c08:	4b20      	ldr	r3, [pc, #128]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fd ff2e 	bl	8007a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1a:	d10a      	bne.n	8009c32 <prvAddCurrentTaskToDelayedList+0x3a>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c22:	4b1a      	ldr	r3, [pc, #104]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4819      	ldr	r0, [pc, #100]	@ (8009c90 <prvAddCurrentTaskToDelayedList+0x98>)
 8009c2c:	f7fd fec3 	bl	80079b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c30:	e026      	b.n	8009c80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4413      	add	r3, r2
 8009c38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c3a:	4b14      	ldr	r3, [pc, #80]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d209      	bcs.n	8009c5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c4a:	4b12      	ldr	r3, [pc, #72]	@ (8009c94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3304      	adds	r3, #4
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f7fd fed1 	bl	80079fe <vListInsert>
}
 8009c5c:	e010      	b.n	8009c80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4b0a      	ldr	r3, [pc, #40]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fd fec7 	bl	80079fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c70:	4b0a      	ldr	r3, [pc, #40]	@ (8009c9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d202      	bcs.n	8009c80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c7a:	4a08      	ldr	r2, [pc, #32]	@ (8009c9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	6013      	str	r3, [r2, #0]
}
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	200036fc 	.word	0x200036fc
 8009c8c:	20003224 	.word	0x20003224
 8009c90:	200036e4 	.word	0x200036e4
 8009c94:	200036b4 	.word	0x200036b4
 8009c98:	200036b0 	.word	0x200036b0
 8009c9c:	20003718 	.word	0x20003718

08009ca0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	@ 0x28
 8009ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009caa:	f000 fb13 	bl	800a2d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009cae:	4b1d      	ldr	r3, [pc, #116]	@ (8009d24 <xTimerCreateTimerTask+0x84>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d021      	beq.n	8009cfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009cbe:	1d3a      	adds	r2, r7, #4
 8009cc0:	f107 0108 	add.w	r1, r7, #8
 8009cc4:	f107 030c 	add.w	r3, r7, #12
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fd fe2d 	bl	8007928 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	9202      	str	r2, [sp, #8]
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	2302      	movs	r3, #2
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	460a      	mov	r2, r1
 8009ce0:	4911      	ldr	r1, [pc, #68]	@ (8009d28 <xTimerCreateTimerTask+0x88>)
 8009ce2:	4812      	ldr	r0, [pc, #72]	@ (8009d2c <xTimerCreateTimerTask+0x8c>)
 8009ce4:	f7fe ff80 	bl	8008be8 <xTaskCreateStatic>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4a11      	ldr	r2, [pc, #68]	@ (8009d30 <xTimerCreateTimerTask+0x90>)
 8009cec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009cee:	4b10      	ldr	r3, [pc, #64]	@ (8009d30 <xTimerCreateTimerTask+0x90>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10b      	bne.n	8009d18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	613b      	str	r3, [r7, #16]
}
 8009d12:	bf00      	nop
 8009d14:	bf00      	nop
 8009d16:	e7fd      	b.n	8009d14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d18:	697b      	ldr	r3, [r7, #20]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20003754 	.word	0x20003754
 8009d28:	0800ae7c 	.word	0x0800ae7c
 8009d2c:	08009e6d 	.word	0x08009e6d
 8009d30:	20003758 	.word	0x20003758

08009d34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08a      	sub	sp, #40	@ 0x28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10b      	bne.n	8009d64 <xTimerGenericCommand+0x30>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	623b      	str	r3, [r7, #32]
}
 8009d5e:	bf00      	nop
 8009d60:	bf00      	nop
 8009d62:	e7fd      	b.n	8009d60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d64:	4b19      	ldr	r3, [pc, #100]	@ (8009dcc <xTimerGenericCommand+0x98>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d02a      	beq.n	8009dc2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b05      	cmp	r3, #5
 8009d7c:	dc18      	bgt.n	8009db0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d7e:	f7ff fdad 	bl	80098dc <xTaskGetSchedulerState>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d109      	bne.n	8009d9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d88:	4b10      	ldr	r3, [pc, #64]	@ (8009dcc <xTimerGenericCommand+0x98>)
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	f107 0110 	add.w	r1, r7, #16
 8009d90:	2300      	movs	r3, #0
 8009d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d94:	f7fe f902 	bl	8007f9c <xQueueGenericSend>
 8009d98:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d9a:	e012      	b.n	8009dc2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009dcc <xTimerGenericCommand+0x98>)
 8009d9e:	6818      	ldr	r0, [r3, #0]
 8009da0:	f107 0110 	add.w	r1, r7, #16
 8009da4:	2300      	movs	r3, #0
 8009da6:	2200      	movs	r2, #0
 8009da8:	f7fe f8f8 	bl	8007f9c <xQueueGenericSend>
 8009dac:	6278      	str	r0, [r7, #36]	@ 0x24
 8009dae:	e008      	b.n	8009dc2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009db0:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <xTimerGenericCommand+0x98>)
 8009db2:	6818      	ldr	r0, [r3, #0]
 8009db4:	f107 0110 	add.w	r1, r7, #16
 8009db8:	2300      	movs	r3, #0
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	f7fe f9f0 	bl	80081a0 <xQueueGenericSendFromISR>
 8009dc0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3728      	adds	r7, #40	@ 0x28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20003754 	.word	0x20003754

08009dd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af02      	add	r7, sp, #8
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dda:	4b23      	ldr	r3, [pc, #140]	@ (8009e68 <prvProcessExpiredTimer+0x98>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	3304      	adds	r3, #4
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fd fe41 	bl	8007a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d023      	beq.n	8009e44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	699a      	ldr	r2, [r3, #24]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	18d1      	adds	r1, r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	6978      	ldr	r0, [r7, #20]
 8009e0a:	f000 f8d5 	bl	8009fb8 <prvInsertTimerInActiveList>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d020      	beq.n	8009e56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e14:	2300      	movs	r3, #0
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	6978      	ldr	r0, [r7, #20]
 8009e20:	f7ff ff88 	bl	8009d34 <xTimerGenericCommand>
 8009e24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d114      	bne.n	8009e56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	60fb      	str	r3, [r7, #12]
}
 8009e3e:	bf00      	nop
 8009e40:	bf00      	nop
 8009e42:	e7fd      	b.n	8009e40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e4a:	f023 0301 	bic.w	r3, r3, #1
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	6978      	ldr	r0, [r7, #20]
 8009e5c:	4798      	blx	r3
}
 8009e5e:	bf00      	nop
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	2000374c 	.word	0x2000374c

08009e6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e74:	f107 0308 	add.w	r3, r7, #8
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 f859 	bl	8009f30 <prvGetNextExpireTime>
 8009e7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4619      	mov	r1, r3
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f805 	bl	8009e94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e8a:	f000 f8d7 	bl	800a03c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e8e:	bf00      	nop
 8009e90:	e7f0      	b.n	8009e74 <prvTimerTask+0x8>
	...

08009e94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e9e:	f7ff f907 	bl	80090b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 f866 	bl	8009f78 <prvSampleTimeNow>
 8009eac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d130      	bne.n	8009f16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <prvProcessTimerOrBlockTask+0x3c>
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d806      	bhi.n	8009ed0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ec2:	f7ff f903 	bl	80090cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff ff81 	bl	8009dd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ece:	e024      	b.n	8009f1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d008      	beq.n	8009ee8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ed6:	4b13      	ldr	r3, [pc, #76]	@ (8009f24 <prvProcessTimerOrBlockTask+0x90>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <prvProcessTimerOrBlockTask+0x50>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e000      	b.n	8009ee6 <prvProcessTimerOrBlockTask+0x52>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8009f28 <prvProcessTimerOrBlockTask+0x94>)
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	f7fe fe43 	bl	8008b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009efa:	f7ff f8e7 	bl	80090cc <xTaskResumeAll>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10a      	bne.n	8009f1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f04:	4b09      	ldr	r3, [pc, #36]	@ (8009f2c <prvProcessTimerOrBlockTask+0x98>)
 8009f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	f3bf 8f6f 	isb	sy
}
 8009f14:	e001      	b.n	8009f1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f16:	f7ff f8d9 	bl	80090cc <xTaskResumeAll>
}
 8009f1a:	bf00      	nop
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20003750 	.word	0x20003750
 8009f28:	20003754 	.word	0x20003754
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f38:	4b0e      	ldr	r3, [pc, #56]	@ (8009f74 <prvGetNextExpireTime+0x44>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <prvGetNextExpireTime+0x16>
 8009f42:	2201      	movs	r2, #1
 8009f44:	e000      	b.n	8009f48 <prvGetNextExpireTime+0x18>
 8009f46:	2200      	movs	r2, #0
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d105      	bne.n	8009f60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f54:	4b07      	ldr	r3, [pc, #28]	@ (8009f74 <prvGetNextExpireTime+0x44>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	e001      	b.n	8009f64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f64:	68fb      	ldr	r3, [r7, #12]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	2000374c 	.word	0x2000374c

08009f78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f80:	f7ff f942 	bl	8009208 <xTaskGetTickCount>
 8009f84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f86:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb4 <prvSampleTimeNow+0x3c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d205      	bcs.n	8009f9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f90:	f000 f93a 	bl	800a208 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e002      	b.n	8009fa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009fa2:	4a04      	ldr	r2, [pc, #16]	@ (8009fb4 <prvSampleTimeNow+0x3c>)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	2000375c 	.word	0x2000375c

08009fb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d812      	bhi.n	800a004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	1ad2      	subs	r2, r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d302      	bcc.n	8009ff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009fec:	2301      	movs	r3, #1
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	e01b      	b.n	800a02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ff2:	4b10      	ldr	r3, [pc, #64]	@ (800a034 <prvInsertTimerInActiveList+0x7c>)
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f7fd fcfe 	bl	80079fe <vListInsert>
 800a002:	e012      	b.n	800a02a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d206      	bcs.n	800a01a <prvInsertTimerInActiveList+0x62>
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d302      	bcc.n	800a01a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a014:	2301      	movs	r3, #1
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	e007      	b.n	800a02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a01a:	4b07      	ldr	r3, [pc, #28]	@ (800a038 <prvInsertTimerInActiveList+0x80>)
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3304      	adds	r3, #4
 800a022:	4619      	mov	r1, r3
 800a024:	4610      	mov	r0, r2
 800a026:	f7fd fcea 	bl	80079fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a02a:	697b      	ldr	r3, [r7, #20]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	20003750 	.word	0x20003750
 800a038:	2000374c 	.word	0x2000374c

0800a03c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08e      	sub	sp, #56	@ 0x38
 800a040:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a042:	e0ce      	b.n	800a1e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	da19      	bge.n	800a07e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a04a:	1d3b      	adds	r3, r7, #4
 800a04c:	3304      	adds	r3, #4
 800a04e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10b      	bne.n	800a06e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	61fb      	str	r3, [r7, #28]
}
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	e7fd      	b.n	800a06a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a074:	6850      	ldr	r0, [r2, #4]
 800a076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a078:	6892      	ldr	r2, [r2, #8]
 800a07a:	4611      	mov	r1, r2
 800a07c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	f2c0 80ae 	blt.w	800a1e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d004      	beq.n	800a09c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a094:	3304      	adds	r3, #4
 800a096:	4618      	mov	r0, r3
 800a098:	f7fd fcea 	bl	8007a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a09c:	463b      	mov	r3, r7
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff ff6a 	bl	8009f78 <prvSampleTimeNow>
 800a0a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	f200 8097 	bhi.w	800a1dc <prvProcessReceivedCommands+0x1a0>
 800a0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b4 <prvProcessReceivedCommands+0x78>)
 800a0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b4:	0800a0dd 	.word	0x0800a0dd
 800a0b8:	0800a0dd 	.word	0x0800a0dd
 800a0bc:	0800a0dd 	.word	0x0800a0dd
 800a0c0:	0800a153 	.word	0x0800a153
 800a0c4:	0800a167 	.word	0x0800a167
 800a0c8:	0800a1b3 	.word	0x0800a1b3
 800a0cc:	0800a0dd 	.word	0x0800a0dd
 800a0d0:	0800a0dd 	.word	0x0800a0dd
 800a0d4:	0800a153 	.word	0x0800a153
 800a0d8:	0800a167 	.word	0x0800a167
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	18d1      	adds	r1, r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0fc:	f7ff ff5c 	bl	8009fb8 <prvInsertTimerInActiveList>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d06c      	beq.n	800a1e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a10c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d061      	beq.n	800a1e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	441a      	add	r2, r3
 800a124:	2300      	movs	r3, #0
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	2100      	movs	r1, #0
 800a12c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a12e:	f7ff fe01 	bl	8009d34 <xTimerGenericCommand>
 800a132:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d152      	bne.n	800a1e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	61bb      	str	r3, [r7, #24]
}
 800a14c:	bf00      	nop
 800a14e:	bf00      	nop
 800a150:	e7fd      	b.n	800a14e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a158:	f023 0301 	bic.w	r3, r3, #1
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a160:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a164:	e03d      	b.n	800a1e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a16c:	f043 0301 	orr.w	r3, r3, #1
 800a170:	b2da      	uxtb	r2, r3
 800a172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10b      	bne.n	800a19e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	617b      	str	r3, [r7, #20]
}
 800a198:	bf00      	nop
 800a19a:	bf00      	nop
 800a19c:	e7fd      	b.n	800a19a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a0:	699a      	ldr	r2, [r3, #24]
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	18d1      	adds	r1, r2, r3
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1ac:	f7ff ff04 	bl	8009fb8 <prvInsertTimerInActiveList>
					break;
 800a1b0:	e017      	b.n	800a1e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d103      	bne.n	800a1c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a1c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1c2:	f000 fbe9 	bl	800a998 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1c6:	e00c      	b.n	800a1e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a1da:	e002      	b.n	800a1e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a1dc:	bf00      	nop
 800a1de:	e000      	b.n	800a1e2 <prvProcessReceivedCommands+0x1a6>
					break;
 800a1e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1e2:	4b08      	ldr	r3, [pc, #32]	@ (800a204 <prvProcessReceivedCommands+0x1c8>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	1d39      	adds	r1, r7, #4
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe f876 	bl	80082dc <xQueueReceive>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f47f af26 	bne.w	800a044 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a1f8:	bf00      	nop
 800a1fa:	bf00      	nop
 800a1fc:	3730      	adds	r7, #48	@ 0x30
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20003754 	.word	0x20003754

0800a208 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a20e:	e049      	b.n	800a2a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a210:	4b2e      	ldr	r3, [pc, #184]	@ (800a2cc <prvSwitchTimerLists+0xc4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21a:	4b2c      	ldr	r3, [pc, #176]	@ (800a2cc <prvSwitchTimerLists+0xc4>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3304      	adds	r3, #4
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fd fc21 	bl	8007a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	d02f      	beq.n	800a2a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	4413      	add	r3, r2
 800a24c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	429a      	cmp	r2, r3
 800a254:	d90e      	bls.n	800a274 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a262:	4b1a      	ldr	r3, [pc, #104]	@ (800a2cc <prvSwitchTimerLists+0xc4>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3304      	adds	r3, #4
 800a26a:	4619      	mov	r1, r3
 800a26c:	4610      	mov	r0, r2
 800a26e:	f7fd fbc6 	bl	80079fe <vListInsert>
 800a272:	e017      	b.n	800a2a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a274:	2300      	movs	r3, #0
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	2300      	movs	r3, #0
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	2100      	movs	r1, #0
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff fd58 	bl	8009d34 <xTimerGenericCommand>
 800a284:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10b      	bne.n	800a2a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	603b      	str	r3, [r7, #0]
}
 800a29e:	bf00      	nop
 800a2a0:	bf00      	nop
 800a2a2:	e7fd      	b.n	800a2a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2a4:	4b09      	ldr	r3, [pc, #36]	@ (800a2cc <prvSwitchTimerLists+0xc4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1b0      	bne.n	800a210 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2ae:	4b07      	ldr	r3, [pc, #28]	@ (800a2cc <prvSwitchTimerLists+0xc4>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2b4:	4b06      	ldr	r3, [pc, #24]	@ (800a2d0 <prvSwitchTimerLists+0xc8>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a04      	ldr	r2, [pc, #16]	@ (800a2cc <prvSwitchTimerLists+0xc4>)
 800a2ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2bc:	4a04      	ldr	r2, [pc, #16]	@ (800a2d0 <prvSwitchTimerLists+0xc8>)
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	6013      	str	r3, [r2, #0]
}
 800a2c2:	bf00      	nop
 800a2c4:	3718      	adds	r7, #24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	2000374c 	.word	0x2000374c
 800a2d0:	20003750 	.word	0x20003750

0800a2d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2da:	f000 f96d 	bl	800a5b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2de:	4b15      	ldr	r3, [pc, #84]	@ (800a334 <prvCheckForValidListAndQueue+0x60>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d120      	bne.n	800a328 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2e6:	4814      	ldr	r0, [pc, #80]	@ (800a338 <prvCheckForValidListAndQueue+0x64>)
 800a2e8:	f7fd fb38 	bl	800795c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2ec:	4813      	ldr	r0, [pc, #76]	@ (800a33c <prvCheckForValidListAndQueue+0x68>)
 800a2ee:	f7fd fb35 	bl	800795c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2f2:	4b13      	ldr	r3, [pc, #76]	@ (800a340 <prvCheckForValidListAndQueue+0x6c>)
 800a2f4:	4a10      	ldr	r2, [pc, #64]	@ (800a338 <prvCheckForValidListAndQueue+0x64>)
 800a2f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2f8:	4b12      	ldr	r3, [pc, #72]	@ (800a344 <prvCheckForValidListAndQueue+0x70>)
 800a2fa:	4a10      	ldr	r2, [pc, #64]	@ (800a33c <prvCheckForValidListAndQueue+0x68>)
 800a2fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a2fe:	2300      	movs	r3, #0
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	4b11      	ldr	r3, [pc, #68]	@ (800a348 <prvCheckForValidListAndQueue+0x74>)
 800a304:	4a11      	ldr	r2, [pc, #68]	@ (800a34c <prvCheckForValidListAndQueue+0x78>)
 800a306:	2110      	movs	r1, #16
 800a308:	200a      	movs	r0, #10
 800a30a:	f7fd fc45 	bl	8007b98 <xQueueGenericCreateStatic>
 800a30e:	4603      	mov	r3, r0
 800a310:	4a08      	ldr	r2, [pc, #32]	@ (800a334 <prvCheckForValidListAndQueue+0x60>)
 800a312:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a314:	4b07      	ldr	r3, [pc, #28]	@ (800a334 <prvCheckForValidListAndQueue+0x60>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a31c:	4b05      	ldr	r3, [pc, #20]	@ (800a334 <prvCheckForValidListAndQueue+0x60>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	490b      	ldr	r1, [pc, #44]	@ (800a350 <prvCheckForValidListAndQueue+0x7c>)
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe fbd8 	bl	8008ad8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a328:	f000 f978 	bl	800a61c <vPortExitCritical>
}
 800a32c:	bf00      	nop
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20003754 	.word	0x20003754
 800a338:	20003724 	.word	0x20003724
 800a33c:	20003738 	.word	0x20003738
 800a340:	2000374c 	.word	0x2000374c
 800a344:	20003750 	.word	0x20003750
 800a348:	20003800 	.word	0x20003800
 800a34c:	20003760 	.word	0x20003760
 800a350:	0800ae84 	.word	0x0800ae84

0800a354 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3b04      	subs	r3, #4
 800a364:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a36c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3b04      	subs	r3, #4
 800a372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	f023 0201 	bic.w	r2, r3, #1
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3b04      	subs	r3, #4
 800a382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a384:	4a0c      	ldr	r2, [pc, #48]	@ (800a3b8 <pxPortInitialiseStack+0x64>)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3b14      	subs	r3, #20
 800a38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3b04      	subs	r3, #4
 800a39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f06f 0202 	mvn.w	r2, #2
 800a3a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3b20      	subs	r3, #32
 800a3a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	0800a3bd 	.word	0x0800a3bd

0800a3bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3c6:	4b13      	ldr	r3, [pc, #76]	@ (800a414 <prvTaskExitError+0x58>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ce:	d00b      	beq.n	800a3e8 <prvTaskExitError+0x2c>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	60fb      	str	r3, [r7, #12]
}
 800a3e2:	bf00      	nop
 800a3e4:	bf00      	nop
 800a3e6:	e7fd      	b.n	800a3e4 <prvTaskExitError+0x28>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	60bb      	str	r3, [r7, #8]
}
 800a3fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3fc:	bf00      	nop
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0fc      	beq.n	800a3fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20000014 	.word	0x20000014
	...

0800a420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a420:	4b07      	ldr	r3, [pc, #28]	@ (800a440 <pxCurrentTCBConst2>)
 800a422:	6819      	ldr	r1, [r3, #0]
 800a424:	6808      	ldr	r0, [r1, #0]
 800a426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42a:	f380 8809 	msr	PSP, r0
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f04f 0000 	mov.w	r0, #0
 800a436:	f380 8811 	msr	BASEPRI, r0
 800a43a:	4770      	bx	lr
 800a43c:	f3af 8000 	nop.w

0800a440 <pxCurrentTCBConst2>:
 800a440:	20003224 	.word	0x20003224
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop

0800a448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a448:	4808      	ldr	r0, [pc, #32]	@ (800a46c <prvPortStartFirstTask+0x24>)
 800a44a:	6800      	ldr	r0, [r0, #0]
 800a44c:	6800      	ldr	r0, [r0, #0]
 800a44e:	f380 8808 	msr	MSP, r0
 800a452:	f04f 0000 	mov.w	r0, #0
 800a456:	f380 8814 	msr	CONTROL, r0
 800a45a:	b662      	cpsie	i
 800a45c:	b661      	cpsie	f
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	df00      	svc	0
 800a468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a46a:	bf00      	nop
 800a46c:	e000ed08 	.word	0xe000ed08

0800a470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a476:	4b47      	ldr	r3, [pc, #284]	@ (800a594 <xPortStartScheduler+0x124>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a47      	ldr	r2, [pc, #284]	@ (800a598 <xPortStartScheduler+0x128>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10b      	bne.n	800a498 <xPortStartScheduler+0x28>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
}
 800a492:	bf00      	nop
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a498:	4b3e      	ldr	r3, [pc, #248]	@ (800a594 <xPortStartScheduler+0x124>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a3f      	ldr	r2, [pc, #252]	@ (800a59c <xPortStartScheduler+0x12c>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d10b      	bne.n	800a4ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	613b      	str	r3, [r7, #16]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4ba:	4b39      	ldr	r3, [pc, #228]	@ (800a5a0 <xPortStartScheduler+0x130>)
 800a4bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	22ff      	movs	r2, #255	@ 0xff
 800a4ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4d4:	78fb      	ldrb	r3, [r7, #3]
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	4b31      	ldr	r3, [pc, #196]	@ (800a5a4 <xPortStartScheduler+0x134>)
 800a4e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4e2:	4b31      	ldr	r3, [pc, #196]	@ (800a5a8 <xPortStartScheduler+0x138>)
 800a4e4:	2207      	movs	r2, #7
 800a4e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4e8:	e009      	b.n	800a4fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a5a8 <xPortStartScheduler+0x138>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a5a8 <xPortStartScheduler+0x138>)
 800a4f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	005b      	lsls	r3, r3, #1
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a506:	2b80      	cmp	r3, #128	@ 0x80
 800a508:	d0ef      	beq.n	800a4ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a50a:	4b27      	ldr	r3, [pc, #156]	@ (800a5a8 <xPortStartScheduler+0x138>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f1c3 0307 	rsb	r3, r3, #7
 800a512:	2b04      	cmp	r3, #4
 800a514:	d00b      	beq.n	800a52e <xPortStartScheduler+0xbe>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	60bb      	str	r3, [r7, #8]
}
 800a528:	bf00      	nop
 800a52a:	bf00      	nop
 800a52c:	e7fd      	b.n	800a52a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a52e:	4b1e      	ldr	r3, [pc, #120]	@ (800a5a8 <xPortStartScheduler+0x138>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a8 <xPortStartScheduler+0x138>)
 800a536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a538:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a8 <xPortStartScheduler+0x138>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a540:	4a19      	ldr	r2, [pc, #100]	@ (800a5a8 <xPortStartScheduler+0x138>)
 800a542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	b2da      	uxtb	r2, r3
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a54c:	4b17      	ldr	r3, [pc, #92]	@ (800a5ac <xPortStartScheduler+0x13c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a16      	ldr	r2, [pc, #88]	@ (800a5ac <xPortStartScheduler+0x13c>)
 800a552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a558:	4b14      	ldr	r3, [pc, #80]	@ (800a5ac <xPortStartScheduler+0x13c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a13      	ldr	r2, [pc, #76]	@ (800a5ac <xPortStartScheduler+0x13c>)
 800a55e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a564:	f000 f8da 	bl	800a71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a568:	4b11      	ldr	r3, [pc, #68]	@ (800a5b0 <xPortStartScheduler+0x140>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a56e:	f000 f8f9 	bl	800a764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a572:	4b10      	ldr	r3, [pc, #64]	@ (800a5b4 <xPortStartScheduler+0x144>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a0f      	ldr	r2, [pc, #60]	@ (800a5b4 <xPortStartScheduler+0x144>)
 800a578:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a57c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a57e:	f7ff ff63 	bl	800a448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a582:	f7fe ff1d 	bl	80093c0 <vTaskSwitchContext>
	prvTaskExitError();
 800a586:	f7ff ff19 	bl	800a3bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	e000ed00 	.word	0xe000ed00
 800a598:	410fc271 	.word	0x410fc271
 800a59c:	410fc270 	.word	0x410fc270
 800a5a0:	e000e400 	.word	0xe000e400
 800a5a4:	20003850 	.word	0x20003850
 800a5a8:	20003854 	.word	0x20003854
 800a5ac:	e000ed20 	.word	0xe000ed20
 800a5b0:	20000014 	.word	0x20000014
 800a5b4:	e000ef34 	.word	0xe000ef34

0800a5b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	607b      	str	r3, [r7, #4]
}
 800a5d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5d2:	4b10      	ldr	r3, [pc, #64]	@ (800a614 <vPortEnterCritical+0x5c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	4a0e      	ldr	r2, [pc, #56]	@ (800a614 <vPortEnterCritical+0x5c>)
 800a5da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a614 <vPortEnterCritical+0x5c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d110      	bne.n	800a606 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a618 <vPortEnterCritical+0x60>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00b      	beq.n	800a606 <vPortEnterCritical+0x4e>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	603b      	str	r3, [r7, #0]
}
 800a600:	bf00      	nop
 800a602:	bf00      	nop
 800a604:	e7fd      	b.n	800a602 <vPortEnterCritical+0x4a>
	}
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	20000014 	.word	0x20000014
 800a618:	e000ed04 	.word	0xe000ed04

0800a61c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a622:	4b12      	ldr	r3, [pc, #72]	@ (800a66c <vPortExitCritical+0x50>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10b      	bne.n	800a642 <vPortExitCritical+0x26>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	607b      	str	r3, [r7, #4]
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a642:	4b0a      	ldr	r3, [pc, #40]	@ (800a66c <vPortExitCritical+0x50>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3b01      	subs	r3, #1
 800a648:	4a08      	ldr	r2, [pc, #32]	@ (800a66c <vPortExitCritical+0x50>)
 800a64a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a64c:	4b07      	ldr	r3, [pc, #28]	@ (800a66c <vPortExitCritical+0x50>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d105      	bne.n	800a660 <vPortExitCritical+0x44>
 800a654:	2300      	movs	r3, #0
 800a656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	f383 8811 	msr	BASEPRI, r3
}
 800a65e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	20000014 	.word	0x20000014

0800a670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a670:	f3ef 8009 	mrs	r0, PSP
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	4b15      	ldr	r3, [pc, #84]	@ (800a6d0 <pxCurrentTCBConst>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	f01e 0f10 	tst.w	lr, #16
 800a680:	bf08      	it	eq
 800a682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	6010      	str	r0, [r2, #0]
 800a68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a694:	f380 8811 	msr	BASEPRI, r0
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f7fe fe8e 	bl	80093c0 <vTaskSwitchContext>
 800a6a4:	f04f 0000 	mov.w	r0, #0
 800a6a8:	f380 8811 	msr	BASEPRI, r0
 800a6ac:	bc09      	pop	{r0, r3}
 800a6ae:	6819      	ldr	r1, [r3, #0]
 800a6b0:	6808      	ldr	r0, [r1, #0]
 800a6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b6:	f01e 0f10 	tst.w	lr, #16
 800a6ba:	bf08      	it	eq
 800a6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6c0:	f380 8809 	msr	PSP, r0
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	f3af 8000 	nop.w

0800a6d0 <pxCurrentTCBConst>:
 800a6d0:	20003224 	.word	0x20003224
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop

0800a6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	607b      	str	r3, [r7, #4]
}
 800a6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6f2:	f7fe fdab 	bl	800924c <xTaskIncrementTick>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6fc:	4b06      	ldr	r3, [pc, #24]	@ (800a718 <xPortSysTickHandler+0x40>)
 800a6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	2300      	movs	r3, #0
 800a706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f383 8811 	msr	BASEPRI, r3
}
 800a70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a720:	4b0b      	ldr	r3, [pc, #44]	@ (800a750 <vPortSetupTimerInterrupt+0x34>)
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a726:	4b0b      	ldr	r3, [pc, #44]	@ (800a754 <vPortSetupTimerInterrupt+0x38>)
 800a728:	2200      	movs	r2, #0
 800a72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a72c:	4b0a      	ldr	r3, [pc, #40]	@ (800a758 <vPortSetupTimerInterrupt+0x3c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a0a      	ldr	r2, [pc, #40]	@ (800a75c <vPortSetupTimerInterrupt+0x40>)
 800a732:	fba2 2303 	umull	r2, r3, r2, r3
 800a736:	099b      	lsrs	r3, r3, #6
 800a738:	4a09      	ldr	r2, [pc, #36]	@ (800a760 <vPortSetupTimerInterrupt+0x44>)
 800a73a:	3b01      	subs	r3, #1
 800a73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a73e:	4b04      	ldr	r3, [pc, #16]	@ (800a750 <vPortSetupTimerInterrupt+0x34>)
 800a740:	2207      	movs	r2, #7
 800a742:	601a      	str	r2, [r3, #0]
}
 800a744:	bf00      	nop
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	e000e010 	.word	0xe000e010
 800a754:	e000e018 	.word	0xe000e018
 800a758:	20000008 	.word	0x20000008
 800a75c:	10624dd3 	.word	0x10624dd3
 800a760:	e000e014 	.word	0xe000e014

0800a764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a774 <vPortEnableVFP+0x10>
 800a768:	6801      	ldr	r1, [r0, #0]
 800a76a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a76e:	6001      	str	r1, [r0, #0]
 800a770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a772:	bf00      	nop
 800a774:	e000ed88 	.word	0xe000ed88

0800a778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a77e:	f3ef 8305 	mrs	r3, IPSR
 800a782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b0f      	cmp	r3, #15
 800a788:	d915      	bls.n	800a7b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a78a:	4a18      	ldr	r2, [pc, #96]	@ (800a7ec <vPortValidateInterruptPriority+0x74>)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4413      	add	r3, r2
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a794:	4b16      	ldr	r3, [pc, #88]	@ (800a7f0 <vPortValidateInterruptPriority+0x78>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	7afa      	ldrb	r2, [r7, #11]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d20b      	bcs.n	800a7b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	607b      	str	r3, [r7, #4]
}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	e7fd      	b.n	800a7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a7f4 <vPortValidateInterruptPriority+0x7c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a7be:	4b0e      	ldr	r3, [pc, #56]	@ (800a7f8 <vPortValidateInterruptPriority+0x80>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d90b      	bls.n	800a7de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	603b      	str	r3, [r7, #0]
}
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	e7fd      	b.n	800a7da <vPortValidateInterruptPriority+0x62>
	}
 800a7de:	bf00      	nop
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	e000e3f0 	.word	0xe000e3f0
 800a7f0:	20003850 	.word	0x20003850
 800a7f4:	e000ed0c 	.word	0xe000ed0c
 800a7f8:	20003854 	.word	0x20003854

0800a7fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08a      	sub	sp, #40	@ 0x28
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a804:	2300      	movs	r3, #0
 800a806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a808:	f7fe fc52 	bl	80090b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a80c:	4b5c      	ldr	r3, [pc, #368]	@ (800a980 <pvPortMalloc+0x184>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a814:	f000 f924 	bl	800aa60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a818:	4b5a      	ldr	r3, [pc, #360]	@ (800a984 <pvPortMalloc+0x188>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4013      	ands	r3, r2
 800a820:	2b00      	cmp	r3, #0
 800a822:	f040 8095 	bne.w	800a950 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01e      	beq.n	800a86a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a82c:	2208      	movs	r2, #8
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4413      	add	r3, r2
 800a832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f003 0307 	and.w	r3, r3, #7
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d015      	beq.n	800a86a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f023 0307 	bic.w	r3, r3, #7
 800a844:	3308      	adds	r3, #8
 800a846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f003 0307 	and.w	r3, r3, #7
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00b      	beq.n	800a86a <pvPortMalloc+0x6e>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	617b      	str	r3, [r7, #20]
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop
 800a868:	e7fd      	b.n	800a866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d06f      	beq.n	800a950 <pvPortMalloc+0x154>
 800a870:	4b45      	ldr	r3, [pc, #276]	@ (800a988 <pvPortMalloc+0x18c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	429a      	cmp	r2, r3
 800a878:	d86a      	bhi.n	800a950 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a87a:	4b44      	ldr	r3, [pc, #272]	@ (800a98c <pvPortMalloc+0x190>)
 800a87c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a87e:	4b43      	ldr	r3, [pc, #268]	@ (800a98c <pvPortMalloc+0x190>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a884:	e004      	b.n	800a890 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	429a      	cmp	r2, r3
 800a898:	d903      	bls.n	800a8a2 <pvPortMalloc+0xa6>
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1f1      	bne.n	800a886 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8a2:	4b37      	ldr	r3, [pc, #220]	@ (800a980 <pvPortMalloc+0x184>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d051      	beq.n	800a950 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2208      	movs	r2, #8
 800a8b2:	4413      	add	r3, r2
 800a8b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	6a3b      	ldr	r3, [r7, #32]
 800a8bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	1ad2      	subs	r2, r2, r3
 800a8c6:	2308      	movs	r3, #8
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d920      	bls.n	800a910 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	f003 0307 	and.w	r3, r3, #7
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00b      	beq.n	800a8f8 <pvPortMalloc+0xfc>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	613b      	str	r3, [r7, #16]
}
 800a8f2:	bf00      	nop
 800a8f4:	bf00      	nop
 800a8f6:	e7fd      	b.n	800a8f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a90a:	69b8      	ldr	r0, [r7, #24]
 800a90c:	f000 f90a 	bl	800ab24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a910:	4b1d      	ldr	r3, [pc, #116]	@ (800a988 <pvPortMalloc+0x18c>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	4a1b      	ldr	r2, [pc, #108]	@ (800a988 <pvPortMalloc+0x18c>)
 800a91c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a91e:	4b1a      	ldr	r3, [pc, #104]	@ (800a988 <pvPortMalloc+0x18c>)
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	4b1b      	ldr	r3, [pc, #108]	@ (800a990 <pvPortMalloc+0x194>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	429a      	cmp	r2, r3
 800a928:	d203      	bcs.n	800a932 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a92a:	4b17      	ldr	r3, [pc, #92]	@ (800a988 <pvPortMalloc+0x18c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a18      	ldr	r2, [pc, #96]	@ (800a990 <pvPortMalloc+0x194>)
 800a930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	4b13      	ldr	r3, [pc, #76]	@ (800a984 <pvPortMalloc+0x188>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	431a      	orrs	r2, r3
 800a93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a946:	4b13      	ldr	r3, [pc, #76]	@ (800a994 <pvPortMalloc+0x198>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3301      	adds	r3, #1
 800a94c:	4a11      	ldr	r2, [pc, #68]	@ (800a994 <pvPortMalloc+0x198>)
 800a94e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a950:	f7fe fbbc 	bl	80090cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00b      	beq.n	800a976 <pvPortMalloc+0x17a>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	60fb      	str	r3, [r7, #12]
}
 800a970:	bf00      	nop
 800a972:	bf00      	nop
 800a974:	e7fd      	b.n	800a972 <pvPortMalloc+0x176>
	return pvReturn;
 800a976:	69fb      	ldr	r3, [r7, #28]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3728      	adds	r7, #40	@ 0x28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	20007460 	.word	0x20007460
 800a984:	20007474 	.word	0x20007474
 800a988:	20007464 	.word	0x20007464
 800a98c:	20007458 	.word	0x20007458
 800a990:	20007468 	.word	0x20007468
 800a994:	2000746c 	.word	0x2000746c

0800a998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d04f      	beq.n	800aa4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9aa:	2308      	movs	r3, #8
 800a9ac:	425b      	negs	r3, r3
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	4b25      	ldr	r3, [pc, #148]	@ (800aa54 <vPortFree+0xbc>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10b      	bne.n	800a9de <vPortFree+0x46>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	60fb      	str	r3, [r7, #12]
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	e7fd      	b.n	800a9da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00b      	beq.n	800a9fe <vPortFree+0x66>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	60bb      	str	r3, [r7, #8]
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	4b14      	ldr	r3, [pc, #80]	@ (800aa54 <vPortFree+0xbc>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4013      	ands	r3, r2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01e      	beq.n	800aa4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d11a      	bne.n	800aa4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	4b0e      	ldr	r3, [pc, #56]	@ (800aa54 <vPortFree+0xbc>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	43db      	mvns	r3, r3
 800aa1e:	401a      	ands	r2, r3
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa24:	f7fe fb44 	bl	80090b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa58 <vPortFree+0xc0>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4413      	add	r3, r2
 800aa32:	4a09      	ldr	r2, [pc, #36]	@ (800aa58 <vPortFree+0xc0>)
 800aa34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa36:	6938      	ldr	r0, [r7, #16]
 800aa38:	f000 f874 	bl	800ab24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa3c:	4b07      	ldr	r3, [pc, #28]	@ (800aa5c <vPortFree+0xc4>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3301      	adds	r3, #1
 800aa42:	4a06      	ldr	r2, [pc, #24]	@ (800aa5c <vPortFree+0xc4>)
 800aa44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa46:	f7fe fb41 	bl	80090cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa4a:	bf00      	nop
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20007474 	.word	0x20007474
 800aa58:	20007464 	.word	0x20007464
 800aa5c:	20007470 	.word	0x20007470

0800aa60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aa6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa6c:	4b27      	ldr	r3, [pc, #156]	@ (800ab0c <prvHeapInit+0xac>)
 800aa6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f003 0307 	and.w	r3, r3, #7
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00c      	beq.n	800aa94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3307      	adds	r3, #7
 800aa7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 0307 	bic.w	r3, r3, #7
 800aa86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ab0c <prvHeapInit+0xac>)
 800aa90:	4413      	add	r3, r2
 800aa92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa98:	4a1d      	ldr	r2, [pc, #116]	@ (800ab10 <prvHeapInit+0xb0>)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ab10 <prvHeapInit+0xb0>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aaac:	2208      	movs	r2, #8
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	1a9b      	subs	r3, r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0307 	bic.w	r3, r3, #7
 800aaba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4a15      	ldr	r2, [pc, #84]	@ (800ab14 <prvHeapInit+0xb4>)
 800aac0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aac2:	4b14      	ldr	r3, [pc, #80]	@ (800ab14 <prvHeapInit+0xb4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2200      	movs	r2, #0
 800aac8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aaca:	4b12      	ldr	r3, [pc, #72]	@ (800ab14 <prvHeapInit+0xb4>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2200      	movs	r2, #0
 800aad0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	1ad2      	subs	r2, r2, r3
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aae0:	4b0c      	ldr	r3, [pc, #48]	@ (800ab14 <prvHeapInit+0xb4>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	4a0a      	ldr	r2, [pc, #40]	@ (800ab18 <prvHeapInit+0xb8>)
 800aaee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	4a09      	ldr	r2, [pc, #36]	@ (800ab1c <prvHeapInit+0xbc>)
 800aaf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aaf8:	4b09      	ldr	r3, [pc, #36]	@ (800ab20 <prvHeapInit+0xc0>)
 800aafa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aafe:	601a      	str	r2, [r3, #0]
}
 800ab00:	bf00      	nop
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	20003858 	.word	0x20003858
 800ab10:	20007458 	.word	0x20007458
 800ab14:	20007460 	.word	0x20007460
 800ab18:	20007468 	.word	0x20007468
 800ab1c:	20007464 	.word	0x20007464
 800ab20:	20007474 	.word	0x20007474

0800ab24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab2c:	4b28      	ldr	r3, [pc, #160]	@ (800abd0 <prvInsertBlockIntoFreeList+0xac>)
 800ab2e:	60fb      	str	r3, [r7, #12]
 800ab30:	e002      	b.n	800ab38 <prvInsertBlockIntoFreeList+0x14>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d8f7      	bhi.n	800ab32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d108      	bne.n	800ab66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	441a      	add	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	441a      	add	r2, r3
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d118      	bne.n	800abac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	4b15      	ldr	r3, [pc, #84]	@ (800abd4 <prvInsertBlockIntoFreeList+0xb0>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d00d      	beq.n	800aba2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	441a      	add	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	e008      	b.n	800abb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aba2:	4b0c      	ldr	r3, [pc, #48]	@ (800abd4 <prvInsertBlockIntoFreeList+0xb0>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	601a      	str	r2, [r3, #0]
 800abaa:	e003      	b.n	800abb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d002      	beq.n	800abc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abc2:	bf00      	nop
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	20007458 	.word	0x20007458
 800abd4:	20007460 	.word	0x20007460

0800abd8 <__malloc_lock>:
 800abd8:	4801      	ldr	r0, [pc, #4]	@ (800abe0 <__malloc_lock+0x8>)
 800abda:	f7f8 bc6c 	b.w	80034b6 <__retarget_lock_acquire_recursive>
 800abde:	bf00      	nop
 800abe0:	20002a80 	.word	0x20002a80

0800abe4 <__malloc_unlock>:
 800abe4:	4801      	ldr	r0, [pc, #4]	@ (800abec <__malloc_unlock+0x8>)
 800abe6:	f7f8 bc7b 	b.w	80034e0 <__retarget_lock_release_recursive>
 800abea:	bf00      	nop
 800abec:	20002a80 	.word	0x20002a80

0800abf0 <memset>:
 800abf0:	4402      	add	r2, r0
 800abf2:	4603      	mov	r3, r0
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d100      	bne.n	800abfa <memset+0xa>
 800abf8:	4770      	bx	lr
 800abfa:	f803 1b01 	strb.w	r1, [r3], #1
 800abfe:	e7f9      	b.n	800abf4 <memset+0x4>

0800ac00 <_reclaim_reent>:
 800ac00:	4b2d      	ldr	r3, [pc, #180]	@ (800acb8 <_reclaim_reent+0xb8>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4283      	cmp	r3, r0
 800ac06:	b570      	push	{r4, r5, r6, lr}
 800ac08:	4604      	mov	r4, r0
 800ac0a:	d053      	beq.n	800acb4 <_reclaim_reent+0xb4>
 800ac0c:	69c3      	ldr	r3, [r0, #28]
 800ac0e:	b31b      	cbz	r3, 800ac58 <_reclaim_reent+0x58>
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	b163      	cbz	r3, 800ac2e <_reclaim_reent+0x2e>
 800ac14:	2500      	movs	r5, #0
 800ac16:	69e3      	ldr	r3, [r4, #28]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	5959      	ldr	r1, [r3, r5]
 800ac1c:	b9b1      	cbnz	r1, 800ac4c <_reclaim_reent+0x4c>
 800ac1e:	3504      	adds	r5, #4
 800ac20:	2d80      	cmp	r5, #128	@ 0x80
 800ac22:	d1f8      	bne.n	800ac16 <_reclaim_reent+0x16>
 800ac24:	69e3      	ldr	r3, [r4, #28]
 800ac26:	4620      	mov	r0, r4
 800ac28:	68d9      	ldr	r1, [r3, #12]
 800ac2a:	f000 f879 	bl	800ad20 <_free_r>
 800ac2e:	69e3      	ldr	r3, [r4, #28]
 800ac30:	6819      	ldr	r1, [r3, #0]
 800ac32:	b111      	cbz	r1, 800ac3a <_reclaim_reent+0x3a>
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 f873 	bl	800ad20 <_free_r>
 800ac3a:	69e3      	ldr	r3, [r4, #28]
 800ac3c:	689d      	ldr	r5, [r3, #8]
 800ac3e:	b15d      	cbz	r5, 800ac58 <_reclaim_reent+0x58>
 800ac40:	4629      	mov	r1, r5
 800ac42:	4620      	mov	r0, r4
 800ac44:	682d      	ldr	r5, [r5, #0]
 800ac46:	f000 f86b 	bl	800ad20 <_free_r>
 800ac4a:	e7f8      	b.n	800ac3e <_reclaim_reent+0x3e>
 800ac4c:	680e      	ldr	r6, [r1, #0]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 f866 	bl	800ad20 <_free_r>
 800ac54:	4631      	mov	r1, r6
 800ac56:	e7e1      	b.n	800ac1c <_reclaim_reent+0x1c>
 800ac58:	6961      	ldr	r1, [r4, #20]
 800ac5a:	b111      	cbz	r1, 800ac62 <_reclaim_reent+0x62>
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f000 f85f 	bl	800ad20 <_free_r>
 800ac62:	69e1      	ldr	r1, [r4, #28]
 800ac64:	b111      	cbz	r1, 800ac6c <_reclaim_reent+0x6c>
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 f85a 	bl	800ad20 <_free_r>
 800ac6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac6e:	b111      	cbz	r1, 800ac76 <_reclaim_reent+0x76>
 800ac70:	4620      	mov	r0, r4
 800ac72:	f000 f855 	bl	800ad20 <_free_r>
 800ac76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac78:	b111      	cbz	r1, 800ac80 <_reclaim_reent+0x80>
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 f850 	bl	800ad20 <_free_r>
 800ac80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ac82:	b111      	cbz	r1, 800ac8a <_reclaim_reent+0x8a>
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 f84b 	bl	800ad20 <_free_r>
 800ac8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac8c:	b111      	cbz	r1, 800ac94 <_reclaim_reent+0x94>
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 f846 	bl	800ad20 <_free_r>
 800ac94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ac96:	b111      	cbz	r1, 800ac9e <_reclaim_reent+0x9e>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 f841 	bl	800ad20 <_free_r>
 800ac9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aca0:	b111      	cbz	r1, 800aca8 <_reclaim_reent+0xa8>
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 f83c 	bl	800ad20 <_free_r>
 800aca8:	6a23      	ldr	r3, [r4, #32]
 800acaa:	b11b      	cbz	r3, 800acb4 <_reclaim_reent+0xb4>
 800acac:	4620      	mov	r0, r4
 800acae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acb2:	4718      	bx	r3
 800acb4:	bd70      	pop	{r4, r5, r6, pc}
 800acb6:	bf00      	nop
 800acb8:	20000018 	.word	0x20000018

0800acbc <__libc_init_array>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	4d0d      	ldr	r5, [pc, #52]	@ (800acf4 <__libc_init_array+0x38>)
 800acc0:	4c0d      	ldr	r4, [pc, #52]	@ (800acf8 <__libc_init_array+0x3c>)
 800acc2:	1b64      	subs	r4, r4, r5
 800acc4:	10a4      	asrs	r4, r4, #2
 800acc6:	2600      	movs	r6, #0
 800acc8:	42a6      	cmp	r6, r4
 800acca:	d109      	bne.n	800ace0 <__libc_init_array+0x24>
 800accc:	4d0b      	ldr	r5, [pc, #44]	@ (800acfc <__libc_init_array+0x40>)
 800acce:	4c0c      	ldr	r4, [pc, #48]	@ (800ad00 <__libc_init_array+0x44>)
 800acd0:	f000 f870 	bl	800adb4 <_init>
 800acd4:	1b64      	subs	r4, r4, r5
 800acd6:	10a4      	asrs	r4, r4, #2
 800acd8:	2600      	movs	r6, #0
 800acda:	42a6      	cmp	r6, r4
 800acdc:	d105      	bne.n	800acea <__libc_init_array+0x2e>
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ace4:	4798      	blx	r3
 800ace6:	3601      	adds	r6, #1
 800ace8:	e7ee      	b.n	800acc8 <__libc_init_array+0xc>
 800acea:	f855 3b04 	ldr.w	r3, [r5], #4
 800acee:	4798      	blx	r3
 800acf0:	3601      	adds	r6, #1
 800acf2:	e7f2      	b.n	800acda <__libc_init_array+0x1e>
 800acf4:	0800afa0 	.word	0x0800afa0
 800acf8:	0800afa0 	.word	0x0800afa0
 800acfc:	0800afa0 	.word	0x0800afa0
 800ad00:	0800afa4 	.word	0x0800afa4

0800ad04 <memcpy>:
 800ad04:	440a      	add	r2, r1
 800ad06:	4291      	cmp	r1, r2
 800ad08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad0c:	d100      	bne.n	800ad10 <memcpy+0xc>
 800ad0e:	4770      	bx	lr
 800ad10:	b510      	push	{r4, lr}
 800ad12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad1a:	4291      	cmp	r1, r2
 800ad1c:	d1f9      	bne.n	800ad12 <memcpy+0xe>
 800ad1e:	bd10      	pop	{r4, pc}

0800ad20 <_free_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4605      	mov	r5, r0
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d041      	beq.n	800adac <_free_r+0x8c>
 800ad28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad2c:	1f0c      	subs	r4, r1, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfb8      	it	lt
 800ad32:	18e4      	addlt	r4, r4, r3
 800ad34:	f7ff ff50 	bl	800abd8 <__malloc_lock>
 800ad38:	4a1d      	ldr	r2, [pc, #116]	@ (800adb0 <_free_r+0x90>)
 800ad3a:	6813      	ldr	r3, [r2, #0]
 800ad3c:	b933      	cbnz	r3, 800ad4c <_free_r+0x2c>
 800ad3e:	6063      	str	r3, [r4, #4]
 800ad40:	6014      	str	r4, [r2, #0]
 800ad42:	4628      	mov	r0, r5
 800ad44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad48:	f7ff bf4c 	b.w	800abe4 <__malloc_unlock>
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	d908      	bls.n	800ad62 <_free_r+0x42>
 800ad50:	6820      	ldr	r0, [r4, #0]
 800ad52:	1821      	adds	r1, r4, r0
 800ad54:	428b      	cmp	r3, r1
 800ad56:	bf01      	itttt	eq
 800ad58:	6819      	ldreq	r1, [r3, #0]
 800ad5a:	685b      	ldreq	r3, [r3, #4]
 800ad5c:	1809      	addeq	r1, r1, r0
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	e7ed      	b.n	800ad3e <_free_r+0x1e>
 800ad62:	461a      	mov	r2, r3
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	b10b      	cbz	r3, 800ad6c <_free_r+0x4c>
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	d9fa      	bls.n	800ad62 <_free_r+0x42>
 800ad6c:	6811      	ldr	r1, [r2, #0]
 800ad6e:	1850      	adds	r0, r2, r1
 800ad70:	42a0      	cmp	r0, r4
 800ad72:	d10b      	bne.n	800ad8c <_free_r+0x6c>
 800ad74:	6820      	ldr	r0, [r4, #0]
 800ad76:	4401      	add	r1, r0
 800ad78:	1850      	adds	r0, r2, r1
 800ad7a:	4283      	cmp	r3, r0
 800ad7c:	6011      	str	r1, [r2, #0]
 800ad7e:	d1e0      	bne.n	800ad42 <_free_r+0x22>
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	6053      	str	r3, [r2, #4]
 800ad86:	4408      	add	r0, r1
 800ad88:	6010      	str	r0, [r2, #0]
 800ad8a:	e7da      	b.n	800ad42 <_free_r+0x22>
 800ad8c:	d902      	bls.n	800ad94 <_free_r+0x74>
 800ad8e:	230c      	movs	r3, #12
 800ad90:	602b      	str	r3, [r5, #0]
 800ad92:	e7d6      	b.n	800ad42 <_free_r+0x22>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	1821      	adds	r1, r4, r0
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	bf04      	itt	eq
 800ad9c:	6819      	ldreq	r1, [r3, #0]
 800ad9e:	685b      	ldreq	r3, [r3, #4]
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	bf04      	itt	eq
 800ada4:	1809      	addeq	r1, r1, r0
 800ada6:	6021      	streq	r1, [r4, #0]
 800ada8:	6054      	str	r4, [r2, #4]
 800adaa:	e7ca      	b.n	800ad42 <_free_r+0x22>
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	20007478 	.word	0x20007478

0800adb4 <_init>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	bf00      	nop
 800adb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adba:	bc08      	pop	{r3}
 800adbc:	469e      	mov	lr, r3
 800adbe:	4770      	bx	lr

0800adc0 <_fini>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	bf00      	nop
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr
